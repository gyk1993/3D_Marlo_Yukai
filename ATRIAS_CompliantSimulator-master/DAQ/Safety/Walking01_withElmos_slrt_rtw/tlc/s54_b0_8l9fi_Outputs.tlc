%implements s54_b0_8l9fi_Outputs "C"

%function OutputsForTID(block, system, tid) Output
%if tid == 0
%assign ::GlobalCurrentTID = 0
%<SLibCGIRAccessLocalDWork(337, 0)> %% ForEach_itr_n
%<SLibCGIRAccessLocalVar(242, 0)> %% rtb_LogicalOperator
%<SLibCGIRAccessLocalDWork(336, 0)> %% ForEach_itr
%<SLibCGIRAccessLocalVar(212, 0)> %% rtb_DigitalClock_a
%<SLibCGIRAccessLocalVar(78, 0)> %% rtb_DataTypeConversion10
%<SLibCGIRAccessLocalVar(79, 0)> %% rtb_DataTypeConversion108
%<SLibCGIRAccessLocalVar(80, 0)> %% rtb_DataTypeConversion109
%<SLibCGIRAccessLocalVar(81, 0)> %% rtb_DataTypeConversion11
%<SLibCGIRAccessLocalVar(82, 0)> %% rtb_DataTypeConversion110
%<SLibCGIRAccessLocalVar(83, 0)> %% rtb_DataTypeConversion12
%<SLibCGIRAccessLocalVar(84, 0)> %% rtb_DataTypeConversion123
%<SLibCGIRAccessLocalVar(85, 0)> %% rtb_DataTypeConversion124
%<SLibCGIRAccessLocalVar(86, 0)> %% rtb_DataTypeConversion125
%<SLibCGIRAccessLocalVar(87, 0)> %% rtb_DataTypeConversion16
%<SLibCGIRAccessLocalVar(88, 0)> %% rtb_DataTypeConversion2
%<SLibCGIRAccessLocalVar(90, 0)> %% rtb_DataTypeConversion27
%<SLibCGIRAccessLocalVar(91, 0)> %% rtb_DataTypeConversion29
%<SLibCGIRAccessLocalVar(92, 0)> %% rtb_DataTypeConversion34
%<SLibCGIRAccessLocalVar(93, 0)> %% rtb_DataTypeConversion35
%<SLibCGIRAccessLocalVar(94, 0)> %% rtb_DataTypeConversion36
%<SLibCGIRAccessLocalVar(96, 0)> %% rtb_DataTypeConversion5
%<SLibCGIRAccessLocalVar(97, 0)> %% rtb_DataTypeConversion51
%<SLibCGIRAccessLocalVar(98, 0)> %% rtb_DataTypeConversion53
%<SLibCGIRAccessLocalVar(99, 0)> %% rtb_DataTypeConversion58
%<SLibCGIRAccessLocalVar(100, 0)> %% rtb_DataTypeConversion59
%<SLibCGIRAccessLocalVar(101, 0)> %% rtb_DataTypeConversion60
%<SLibCGIRAccessLocalVar(103, 0)> %% rtb_DataTypeConversion75
%<SLibCGIRAccessLocalVar(104, 0)> %% rtb_DataTypeConversion77
%<SLibCGIRAccessLocalVar(105, 0)> %% rtb_DataTypeConversion82
%<SLibCGIRAccessLocalVar(106, 0)> %% rtb_DataTypeConversion83
%<SLibCGIRAccessLocalVar(107, 0)> %% rtb_DataTypeConversion84
%<SLibCGIRAccessLocalVar(161, 0)> %% rtb_ImpSel_InsertedFor_q_at_o_g
%<SLibCGIRAccessLocalVar(162, 0)> %% rtb_ImpSel_InsertedFor_Counter_
%<SLibCGIRAccessLocalVar(164, 0)> %% rtb_ImpSel_InsertedFor_Threshol
%<SLibCGIRAccessLocalVar(251, 0)> %% rtb_Counter_o2
%<SLibCGIRAccessLocalVar(160, 0)> %% rtb_measuredCurrent
%<SLibCGIRAccessLocalVar(159, 0)> %% rtb_logicVoltage
%<SLibCGIRAccessLocalVar(158, 0)> %% rtb_motorVoltage
%<SLibCGIRAccessLocalVar(89, 0)> %% rtb_DataTypeConversion23
%<SLibCGIRAccessLocalVar(95, 0)> %% rtb_DataTypeConversion47
%<SLibCGIRAccessLocalVar(102, 0)> %% rtb_DataTypeConversion71
%<SLibCGIRAccessLocalVar(108, 0)> %% rtb_DataTypeConversion95
%<SLibCGIRAccessLocalVar(28, 0)> %% rtb_Gain
%<SLibCGIRAccessLocalVar(37, 0)> %% rtb_Switch2
%<SLibCGIRAccessLocalVar(122, 0)> %% rtb_u_sat
%<SLibCGIRAccessLocalVar(36, 0)> %% rtb_Switch_o
%<SLibCGIRAccessLocalVar(109, 0)> %% rtb_Reshape
%<SLibCGIRAccessLocalVar(44, 0)> %% rtb_current_unsat
%<SLibCGIRAccessLocalVar(29, 0)> %% rtb_UnitDelay4
%<SLibCGIRAccessLocalVar(45, 0)> %% rtb_Switch_n
%<SLibCGIRAccessLocalVar(46, 0)> %% rtb_Switch2_p
%<SLibCGIRAccessLocalVar(163, 0)> %% rtb_ImpSel_InsertedFor_q_limi_h
%<SLibCGIRAccessLocalVar(30, 0)> %% rtb_UnitDelay3
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl
real_T RefAngle[6];
boolean_T iHigh[2];
real_T NormalizedCountPrev[9];
real_T NormalizedCount[9];
real32_T ys[9];
static const int8_T c[13] = { 16, 17, 18, 0, 1, 2, 3, 4, 5, 14, 6, 7, 15 };
static const int8_T b[8] = { 3, 4, 5, 6, 7, 8, 10, 11 };
int32_T c_previousEvent;
real_T HAlpha[36];
real_T L2fh[6];
real_T T[36];
real_T jacob_h_D_inv[78];
real_T b_s;
real_T b_ds;
real_T jacob_h0[78];
real_T b_s_unsaturated;
real_T b_theta;
real_T dsdq[13];
real_T b_phi;
real_T b_r;
static const int8_T b_0[6] = { 1, 5, 10, 10, 5, 1 };
static const real_T b_b[78] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 50.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 50.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 26.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 50.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 50.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 26.7 };
static const real_T c_b[36] = { 50.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 50.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 26.7, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 50.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 50.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 26.7 };
static const int8_T c_0[6] = { 0, 2, 4, 1, 3, 5 };
static const int8_T d[6] = { 3, 4, 5, 0, 1, 2 };
static const real_T e[36] = { 0.0, 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 };
static const real_T T0[36] = { 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };
boolean_T guard1 = false;
real_T weight[2];
static const real_T b_1[36] = { 0.0, 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 };
static const real_T b_T0[36] = { 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };
boolean_T exitg3;
real_T x[34];
int32_T ihi;
int32_T imid;
int32_T exponent;
int32_T b_exponent;
static const real_T SS_DYNAMIC_STATE_LIMIT[34] = { 1.0, 2.0, 4.0, 8.0, 16.0, 32.0, 64.0, 128.0, 256.0, 512.0, 1024.0, 2048.0, 4096.0, 8192.0, 16384.0, 32768.0, 65536.0, 131072.0, 262144.0, 524288.0, 1.048576E+6, 2.097152E+6, 4.194304E+6, 8.388608E+6, 1.6777216E+7, 3.3554432E+7, 6.7108864E+7, 1.34217728E+8, 2.68435456E+8, 5.36870912E+8, 1.073741824E+9, 2.147483648E+9, 4.294967296E+9, 8.589934592E+9 };
boolean_T guard1_0 = false;
boolean_T rtb_UnitDelay_m;
real_T rtb_VectorConcatenate[13];
real_T rtb_y[6];
real_T rtb_dy[6];
real_T rtb_hd[6];
real_T rtb_hdbar[6];
real_T rtb_ControlStateVec[7];
real_T rtb_u_star[6];
real_T rtb_u_pd[6];
real_T rtb_ImpAsg_InsertedFor_q_clean_[3];
real_T rtb_ImpAsg_InsertedFor_dq_clean[3];
boolean_T rtb_Compare_pw = false;
uint32_T rtb_TmpSignalConversionAtSFunct[10];
real_T rtb_TmpSignalConversionAtSFu_mr[9];
real_T rtb_ImpAsg_InsertedFor_q_clea_k[19];
real_T rtb_ImpAsg_InsertedFor_dq_cle_i[19];
real_T rtb_ImpAsg_InsertedFor_ErrorC_g[19];
uint32_T rtb_TmpSignalConversionAtSFun_o[9];
real_T rtb_ImpAsg_InsertedFor_ErrorCou[3];
real_T rtb_q_clean[13];
real_T rtb_u[6];
OutputParamsBus rtb_Output_k;
OutputParamsBus rtb_Output_p;
OutputParamsBus rtb_BusAssignment5;
OutputParamsBus rtb_BusAssignment2;
OutputParamsBus rtb_BusAssignment4;
int32_T i;
boolean_T RefAngle_0[6];
boolean_T tmp[34];
real_T tmp_0[2];
boolean_T NormalizedCountPrev_0[9];
real_T tmp_1[8];
real_T jacob_h_D_inv_0[78];
real_T RefAngle_1[6];
int32_T d_data[9];
int32_T tmp_data[2];
int32_T tmp_data_0[2];
int32_T tmp_data_1[2];
real_T weight_data[2];
real_T HalfMaxTicks_idx_0;
real_T HalfMaxTicks_idx_1;
real_T CalOffset_idx_0;
real_T CalOffset_idx_1;
real_T rtb_Switch1_idx_1;
real_T rtb_Switch1_idx_2;
%closefile localVarDecl
%assign _modelSS = ""

%assign tlcOutputsFcnOfS39B1 = OpaqueTLCBlockFcn("Outputs", 39, 1, 9, 72)
%assign tlcOutputsFcnOfS39B2 = OpaqueTLCBlockFcn("Outputs", 39, 2, 9, 72)
%assign tlcOutputsFcnOfS39B3 = OpaqueTLCBlockFcn("Outputs", 39, 3, 9, 72)
%assign tlcOutputsFcnOfS39B4 = OpaqueTLCBlockFcn("Outputs", 39, 4, 9, 72)
%assign tlcOutputsFcnOfS39B5 = OpaqueTLCBlockFcn("Outputs", 39, 5, 9, 72)
%assign tlcOutputsFcnOfS39B6 = OpaqueTLCBlockFcn("Outputs", 39, 6, 9, 72)
%assign tlcOutputsFcnOfS39B7 = OpaqueTLCBlockFcn("Outputs", 39, 7, 9, 72)
%assign tlcOutputsFcnOfS39B8 = OpaqueTLCBlockFcn("Outputs", 39, 8, 9, 72)
%assign tlcOutputsFcnOfS39B9 = OpaqueTLCBlockFcn("Outputs", 39, 9, 9, 72)
%assign tlcOutputsFcnOfS39B10 = OpaqueTLCBlockFcn("Outputs", 39, 10, 9, 72)
%assign tlcOutputsFcnOfS39B11 = OpaqueTLCBlockFcn("Outputs", 39, 11, 9, 72)
%assign tlcOutputsFcnOfS39B12 = OpaqueTLCBlockFcn("Outputs", 39, 12, 9, 72)
%assign tlcOutputsFcnOfS39B13 = OpaqueTLCBlockFcn("Outputs", 39, 13, 9, 72)
%assign tlcOutputsFcnOfS39B14 = OpaqueTLCBlockFcn("Outputs", 39, 14, 9, 72)
%assign tlcOutputsFcnOfS39B15 = OpaqueTLCBlockFcn("Outputs", 39, 15, 9, 72)
%assign tlcOutputsFcnOfS39B16 = OpaqueTLCBlockFcn("Outputs", 39, 16, 9, 72)
%assign tlcOutputsFcnOfS39B21 = OpaqueTLCBlockFcn("Outputs", 39, 21, 9, 72)
%assign tlcOutputsFcnOfS39B22 = OpaqueTLCBlockFcn("Outputs", 39, 22, 9, 72)
%assign tlcOutputsFcnOfS39B23 = OpaqueTLCBlockFcn("Outputs", 39, 23, 9, 72)
%assign tlcOutputsFcnOfS39B24 = OpaqueTLCBlockFcn("Outputs", 39, 24, 9, 72)
%assign tlcOutputsFcnOfS39B25 = OpaqueTLCBlockFcn("Outputs", 39, 25, 9, 72)
%assign tlcOutputsFcnOfS39B26 = OpaqueTLCBlockFcn("Outputs", 39, 26, 9, 72)
%assign tlcOutputsFcnOfS39B27 = OpaqueTLCBlockFcn("Outputs", 39, 27, 9, 72)
%assign tlcOutputsFcnOfS39B30 = OpaqueTLCBlockFcn("Outputs", 39, 30, 9, 72)
%assign tlcOutputsFcnOfS39B31 = OpaqueTLCBlockFcn("Outputs", 39, 31, 9, 72)
%assign tlcOutputsFcnOfS39B32 = OpaqueTLCBlockFcn("Outputs", 39, 32, 9, 72)
%assign tlcOutputsFcnOfS39B33 = OpaqueTLCBlockFcn("Outputs", 39, 33, 9, 72)
%assign tlcOutputsFcnOfS39B34 = OpaqueTLCBlockFcn("Outputs", 39, 34, 9, 72)
%assign tlcOutputsFcnOfS39B35 = OpaqueTLCBlockFcn("Outputs", 39, 35, 9, 72)
%assign tlcOutputsFcnOfS39B36 = OpaqueTLCBlockFcn("Outputs", 39, 36, 9, 72)
%assign tlcOutputsFcnOfS39B37 = OpaqueTLCBlockFcn("Outputs", 39, 37, 9, 72)
%assign tlcOutputsFcnOfS39B38 = OpaqueTLCBlockFcn("Outputs", 39, 38, 9, 72)
%assign tlcOutputsFcnOfS39B40 = OpaqueTLCBlockFcn("Outputs", 39, 40, 9, 72)
%assign tlcOutputsFcnOfS39B41 = OpaqueTLCBlockFcn("Outputs", 39, 41, 9, 72)
%assign tlcOutputsFcnOfS39B42 = OpaqueTLCBlockFcn("Outputs", 39, 42, 9, 72)
%assign tlcOutputsFcnOfS39B61 = OpaqueTLCBlockFcn("Outputs", 39, 61, 9, 72)
%assign tlcOutputsFcnOfS39B62 = OpaqueTLCBlockFcn("Outputs", 39, 62, 9, 72)
%assign tlcOutputsFcnOfS39B63 = OpaqueTLCBlockFcn("Outputs", 39, 63, 9, 72)
%assign tlcOutputsFcnOfS39B186 = OpaqueTLCBlockFcn("Outputs", 39, 186, 9, 72)
%assign tlcOutputsFcnOfS39B187 = OpaqueTLCBlockFcn("Outputs", 39, 187, 9, 72)
%assign tlcOutputsFcnOfS39B188 = OpaqueTLCBlockFcn("Outputs", 39, 188, 9, 72)
%assign tlcOutputsFcnOfS39B189 = OpaqueTLCBlockFcn("Outputs", 39, 189, 9, 72)
%assign tlcOutputsFcnOfS39B190 = OpaqueTLCBlockFcn("Outputs", 39, 190, 9, 72)
%assign tlcOutputsFcnOfS39B191 = OpaqueTLCBlockFcn("Outputs", 39, 191, 9, 72)
%assign tlcOutputsFcnOfS39B194 = OpaqueTLCBlockFcn("Outputs", 39, 194, 9, 72)
%assign tlcOutputsFcnOfS39B195 = OpaqueTLCBlockFcn("Outputs", 39, 195, 9, 72)
%assign tlcOutputsFcnOfS39B196 = OpaqueTLCBlockFcn("Outputs", 39, 196, 9, 72)
%assign tlcOutputsFcnOfS39B197 = OpaqueTLCBlockFcn("Outputs", 39, 197, 9, 72)
%assign tlcOutputsFcnOfS39B198 = OpaqueTLCBlockFcn("Outputs", 39, 198, 9, 72)
%assign tlcOutputsFcnOfS39B199 = OpaqueTLCBlockFcn("Outputs", 39, 199, 9, 72)
%assign tlcOutputsFcnOfS39B200 = OpaqueTLCBlockFcn("Outputs", 39, 200, 9, 72)
%assign tlcOutputsFcnOfS39B202 = OpaqueTLCBlockFcn("Outputs", 39, 202, 9, 72)
%assign tlcOutputsFcnOfS39B203 = OpaqueTLCBlockFcn("Outputs", 39, 203, 9, 72)
%assign tlcOutputsFcnOfS39B204 = OpaqueTLCBlockFcn("Outputs", 39, 204, 9, 72)
%assign tlcOutputsFcnOfS39B205 = OpaqueTLCBlockFcn("Outputs", 39, 205, 9, 72)
%assign tlcOutputsFcnOfS39B206 = OpaqueTLCBlockFcn("Outputs", 39, 206, 9, 72)
%assign tlcOutputsFcnOfS39B207 = OpaqueTLCBlockFcn("Outputs", 39, 207, 9, 72)
%assign tlcOutputsFcnOfS39B208 = OpaqueTLCBlockFcn("Outputs", 39, 208, 9, 72)
%assign tlcOutputsFcnOfS39B211 = OpaqueTLCBlockFcn("Outputs", 39, 211, 9, 72)
%assign tlcOutputsFcnOfS39B226 = OpaqueTLCBlockFcn("Outputs", 39, 226, 9, 72)
%assign tlcOutputsFcnOfS39B228 = OpaqueTLCBlockFcn("Outputs", 39, 228, 9, 72)
%assign tlcOutputsFcnOfS39B229 = OpaqueTLCBlockFcn("Outputs", 39, 229, 9, 72)
%assign tlcOutputsFcnOfS39B230 = OpaqueTLCBlockFcn("Outputs", 39, 230, 9, 72)
%assign tlcOutputsFcnOfS39B231 = OpaqueTLCBlockFcn("Outputs", 39, 231, 9, 72)
%assign tlcOutputsFcnOfS39B232 = OpaqueTLCBlockFcn("Outputs", 39, 232, 9, 72)
%assign tlcOutputsFcnOfS39B233 = OpaqueTLCBlockFcn("Outputs", 39, 233, 9, 72)
%assign tlcOutputsFcnOfS39B234 = OpaqueTLCBlockFcn("Outputs", 39, 234, 9, 72)
%assign tlcOutputsFcnOfS39B235 = OpaqueTLCBlockFcn("Outputs", 39, 235, 9, 72)
%assign tlcOutputsFcnOfS39B236 = OpaqueTLCBlockFcn("Outputs", 39, 236, 9, 72)
%assign tlcOutputsFcnOfS39B237 = OpaqueTLCBlockFcn("Outputs", 39, 237, 9, 72)
%assign tlcOutputsFcnOfS39B238 = OpaqueTLCBlockFcn("Outputs", 39, 238, 9, 72)
%assign tlcOutputsFcnOfS39B239 = OpaqueTLCBlockFcn("Outputs", 39, 239, 9, 72)
%assign tlcOutputsFcnOfS39B240 = OpaqueTLCBlockFcn("Outputs", 39, 240, 9, 72)
%assign tlcOutputsFcnOfS39B241 = OpaqueTLCBlockFcn("Outputs", 39, 241, 9, 72)
%assign tlcOutputsFcnOfS39B242 = OpaqueTLCBlockFcn("Outputs", 39, 242, 9, 72)
%assign tlcOutputsFcnOfS39B243 = OpaqueTLCBlockFcn("Outputs", 39, 243, 9, 72)
%assign tlcOutputsFcnOfS39B244 = OpaqueTLCBlockFcn("Outputs", 39, 244, 9, 72)
%assign tlcOutputsFcnOfS39B245 = OpaqueTLCBlockFcn("Outputs", 39, 245, 9, 72)
%assign tlcOutputsFcnOfS39B246 = OpaqueTLCBlockFcn("Outputs", 39, 246, 9, 72)
%assign tlcOutputsFcnOfS39B247 = OpaqueTLCBlockFcn("Outputs", 39, 247, 9, 72)
%assign tlcOutputsFcnOfS39B248 = OpaqueTLCBlockFcn("Outputs", 39, 248, 9, 72)
%assign tlcOutputsFcnOfS39B249 = OpaqueTLCBlockFcn("Outputs", 39, 249, 9, 72)
%assign tlcOutputsFcnOfS39B250 = OpaqueTLCBlockFcn("Outputs", 39, 250, 9, 72)
%assign tlcOutputsFcnOfS39B251 = OpaqueTLCBlockFcn("Outputs", 39, 251, 9, 72)
%assign tlcOutputsFcnOfS39B252 = OpaqueTLCBlockFcn("Outputs", 39, 252, 9, 72)
%assign tlcOutputsFcnOfS39B253 = OpaqueTLCBlockFcn("Outputs", 39, 253, 9, 72)
%assign tlcOutputsFcnOfS39B254 = OpaqueTLCBlockFcn("Outputs", 39, 254, 9, 72)
%assign tlcOutputsFcnOfS39B255 = OpaqueTLCBlockFcn("Outputs", 39, 255, 9, 72)
%assign tlcOutputsFcnOfS39B256 = OpaqueTLCBlockFcn("Outputs", 39, 256, 9, 72)
%assign tlcOutputsFcnOfS39B257 = OpaqueTLCBlockFcn("Outputs", 39, 257, 9, 72)
%assign tlcOutputsFcnOfS39B263 = OpaqueTLCBlockFcn("Outputs", 39, 263, 9, 72)
%assign tlcOutputsFcnOfS39B269 = OpaqueTLCBlockFcn("Outputs", 39, 269, 9, 72)
%assign tlcOutputsFcnOfS39B271 = OpaqueTLCBlockFcn("Outputs", 39, 271, 9, 72)
%assign tlcOutputsFcnOfS39B273 = OpaqueTLCBlockFcn("Outputs", 39, 273, 9, 72)
%assign tlcOutputsFcnOfS39B275 = OpaqueTLCBlockFcn("Outputs", 39, 275, 9, 72)
%assign tlcOutputsFcnOfS39B278 = OpaqueTLCBlockFcn("Outputs", 39, 278, 9, 72)
%assign tlcOutputsFcnOfS39B279 = OpaqueTLCBlockFcn("Outputs", 39, 279, 9, 72)
%assign tlcOutputsFcnOfS39B280 = OpaqueTLCBlockFcn("Outputs", 39, 280, 9, 72)
%assign tlcOutputsFcnOfS39B281 = OpaqueTLCBlockFcn("Outputs", 39, 281, 9, 72)
%assign tlcOutputsFcnOfS39B283 = OpaqueTLCBlockFcn("Outputs", 39, 283, 9, 72)
%assign tlcOutputsFcnOfS39B284 = OpaqueTLCBlockFcn("Outputs", 39, 284, 9, 72)
%assign tlcOutputsFcnOfS39B285 = OpaqueTLCBlockFcn("Outputs", 39, 285, 9, 72)
%assign tlcOutputsFcnOfS39B286 = OpaqueTLCBlockFcn("Outputs", 39, 286, 9, 72)
%assign tlcOutputsFcnOfS39B288 = OpaqueTLCBlockFcn("Outputs", 39, 288, 9, 72)
%assign tlcOutputsFcnOfS39B289 = OpaqueTLCBlockFcn("Outputs", 39, 289, 9, 72)
%assign tlcOutputsFcnOfS39B290 = OpaqueTLCBlockFcn("Outputs", 39, 290, 9, 72)
%assign tlcOutputsFcnOfS39B291 = OpaqueTLCBlockFcn("Outputs", 39, 291, 9, 72)
%assign tlcOutputsFcnOfS39B293 = OpaqueTLCBlockFcn("Outputs", 39, 293, 9, 72)
%assign tlcOutputsFcnOfS39B299 = OpaqueTLCBlockFcn("Outputs", 39, 299, 9, 72)
%assign tlcOutputsFcnOfS39B305 = OpaqueTLCBlockFcn("Outputs", 39, 305, 9, 72)
%assign tlcOutputsFcnOfS39B311 = OpaqueTLCBlockFcn("Outputs", 39, 311, 9, 72)
%assign tlcOutputsFcnOfS1B1 = OpaqueTLCBlockFcn("Outputs", 1, 1, 9, 72)
%assign tlcOutputsFcnOfS39B322 = OpaqueTLCBlockFcn("Outputs", 39, 322, 9, 72)
%assign tlcOutputsFcnOfS39B323 = OpaqueTLCBlockFcn("Outputs", 39, 323, 9, 72)
%assign tlcOutputsFcnOfS39B324 = OpaqueTLCBlockFcn("Outputs", 39, 324, 9, 72)
%assign tlcOutputsFcnOfS39B325 = OpaqueTLCBlockFcn("Outputs", 39, 325, 9, 72)
%assign tlcOutputsFcnOfS39B326 = OpaqueTLCBlockFcn("Outputs", 39, 326, 9, 72)
%assign tlcOutputsFcnOfS39B327 = OpaqueTLCBlockFcn("Outputs", 39, 327, 9, 72)
%assign tlcOutputsFcnOfS39B328 = OpaqueTLCBlockFcn("Outputs", 39, 328, 9, 72)
%assign tlcOutputsFcnOfS39B329 = OpaqueTLCBlockFcn("Outputs", 39, 329, 9, 72)
%assign tlcOutputsFcnOfS39B330 = OpaqueTLCBlockFcn("Outputs", 39, 330, 9, 72)
%assign tlcOutputsFcnOfS39B331 = OpaqueTLCBlockFcn("Outputs", 39, 331, 9, 72)
%assign tlcOutputsFcnOfS39B333 = OpaqueTLCBlockFcn("Outputs", 39, 333, 9, 72)
%assign tlcOutputsFcnOfS39B334 = OpaqueTLCBlockFcn("Outputs", 39, 334, 9, 72)
%assign tlcOutputsFcnOfS39B335 = OpaqueTLCBlockFcn("Outputs", 39, 335, 9, 72)
%assign tlcOutputsFcnOfS39B336 = OpaqueTLCBlockFcn("Outputs", 39, 336, 9, 72)
%assign tlcOutputsFcnOfS39B337 = OpaqueTLCBlockFcn("Outputs", 39, 337, 9, 72)
%assign tlcOutputsFcnOfS39B338 = OpaqueTLCBlockFcn("Outputs", 39, 338, 9, 72)
%assign tlcOutputsFcnOfS39B340 = OpaqueTLCBlockFcn("Outputs", 39, 340, 9, 72)
%assign tlcOutputsFcnOfS39B341 = OpaqueTLCBlockFcn("Outputs", 39, 341, 9, 72)
%assign tlcOutputsFcnOfS39B342 = OpaqueTLCBlockFcn("Outputs", 39, 342, 9, 72)
%assign tlcOutputsFcnOfS39B343 = OpaqueTLCBlockFcn("Outputs", 39, 343, 9, 72)
%assign tlcOutputsFcnOfS39B344 = OpaqueTLCBlockFcn("Outputs", 39, 344, 9, 72)
%assign tlcOutputsFcnOfS39B345 = OpaqueTLCBlockFcn("Outputs", 39, 345, 9, 72)
%assign tlcOutputsFcnOfS39B347 = OpaqueTLCBlockFcn("Outputs", 39, 347, 9, 72)
%assign tlcOutputsFcnOfS39B348 = OpaqueTLCBlockFcn("Outputs", 39, 348, 9, 72)
%assign tlcOutputsFcnOfS39B349 = OpaqueTLCBlockFcn("Outputs", 39, 349, 9, 72)
%assign tlcOutputsFcnOfS39B350 = OpaqueTLCBlockFcn("Outputs", 39, 350, 9, 72)
%assign tlcOutputsFcnOfS39B351 = OpaqueTLCBlockFcn("Outputs", 39, 351, 9, 72)
%assign tlcOutputsFcnOfS39B352 = OpaqueTLCBlockFcn("Outputs", 39, 352, 9, 72)
%assign tlcOutputsFcnOfS39B353 = OpaqueTLCBlockFcn("Outputs", 39, 353, 9, 72)
%assign tlcOutputsFcnOfS39B354 = OpaqueTLCBlockFcn("Outputs", 39, 354, 9, 72)
%assign tlcOutputsFcnOfS39B355 = OpaqueTLCBlockFcn("Outputs", 39, 355, 9, 72)
%assign tlcOutputsFcnOfS39B356 = OpaqueTLCBlockFcn("Outputs", 39, 356, 9, 72)
%assign tlcOutputsFcnOfS39B357 = OpaqueTLCBlockFcn("Outputs", 39, 357, 9, 72)
%assign tlcOutputsFcnOfS39B358 = OpaqueTLCBlockFcn("Outputs", 39, 358, 9, 72)
%assign tlcOutputsFcnOfS39B359 = OpaqueTLCBlockFcn("Outputs", 39, 359, 9, 72)
%assign tlcOutputsFcnOfS39B360 = OpaqueTLCBlockFcn("Outputs", 39, 360, 9, 72)
%assign tlcOutputsFcnOfS39B361 = OpaqueTLCBlockFcn("Outputs", 39, 361, 9, 72)
%assign tlcOutputsFcnOfS39B362 = OpaqueTLCBlockFcn("Outputs", 39, 362, 9, 72)
%assign tlcOutputsFcnOfS39B363 = OpaqueTLCBlockFcn("Outputs", 39, 363, 9, 72)
%assign tlcOutputsFcnOfS39B364 = OpaqueTLCBlockFcn("Outputs", 39, 364, 9, 72)
%assign tlcOutputsFcnOfS39B365 = OpaqueTLCBlockFcn("Outputs", 39, 365, 9, 72)
%assign tlcOutputsFcnOfS39B366 = OpaqueTLCBlockFcn("Outputs", 39, 366, 9, 72)
%assign tlcOutputsFcnOfS39B367 = OpaqueTLCBlockFcn("Outputs", 39, 367, 9, 72)
%assign tlcOutputsFcnOfS39B368 = OpaqueTLCBlockFcn("Outputs", 39, 368, 9, 72)
%assign tlcOutputsFcnOfS39B369 = OpaqueTLCBlockFcn("Outputs", 39, 369, 9, 72)
%assign tlcOutputsFcnOfS39B370 = OpaqueTLCBlockFcn("Outputs", 39, 370, 9, 72)
%assign tlcOutputsFcnOfS39B371 = OpaqueTLCBlockFcn("Outputs", 39, 371, 9, 72)
%assign tlcOutputsFcnOfS39B372 = OpaqueTLCBlockFcn("Outputs", 39, 372, 9, 72)
%assign tlcOutputsFcnOfS39B373 = OpaqueTLCBlockFcn("Outputs", 39, 373, 9, 72)
%assign tlcOutputsFcnOfS39B374 = OpaqueTLCBlockFcn("Outputs", 39, 374, 9, 72)
%assign tlcOutputsFcnOfS39B375 = OpaqueTLCBlockFcn("Outputs", 39, 375, 9, 72)
%assign tlcOutputsFcnOfS39B376 = OpaqueTLCBlockFcn("Outputs", 39, 376, 9, 72)
%assign tlcOutputsFcnOfS39B377 = OpaqueTLCBlockFcn("Outputs", 39, 377, 9, 72)
%assign tlcOutputsFcnOfS39B378 = OpaqueTLCBlockFcn("Outputs", 39, 378, 9, 72)
%assign tlcOutputsFcnOfS39B379 = OpaqueTLCBlockFcn("Outputs", 39, 379, 9, 72)
%assign tlcOutputsFcnOfS39B380 = OpaqueTLCBlockFcn("Outputs", 39, 380, 9, 72)
%assign tlcOutputsFcnOfS39B381 = OpaqueTLCBlockFcn("Outputs", 39, 381, 9, 72)
%assign tlcOutputsFcnOfS39B382 = OpaqueTLCBlockFcn("Outputs", 39, 382, 9, 72)
%assign tlcOutputsFcnOfS39B383 = OpaqueTLCBlockFcn("Outputs", 39, 383, 9, 72)
%assign tlcOutputsFcnOfS39B386 = OpaqueTLCBlockFcn("Outputs", 39, 386, 9, 72)
%assign tlcOutputsFcnOfS39B387 = OpaqueTLCBlockFcn("Outputs", 39, 387, 9, 72)
%assign tlcOutputsFcnOfS39B388 = OpaqueTLCBlockFcn("Outputs", 39, 388, 9, 72)
%assign tlcOutputsFcnOfS39B389 = OpaqueTLCBlockFcn("Outputs", 39, 389, 9, 72)
%assign tlcOutputsFcnOfS39B390 = OpaqueTLCBlockFcn("Outputs", 39, 390, 9, 72)
%assign tlcOutputsFcnOfS39B391 = OpaqueTLCBlockFcn("Outputs", 39, 391, 9, 72)
%assign tlcOutputsFcnOfS39B392 = OpaqueTLCBlockFcn("Outputs", 39, 392, 9, 72)
%assign tlcOutputsFcnOfS39B394 = OpaqueTLCBlockFcn("Outputs", 39, 394, 9, 72)
%assign tlcOutputsFcnOfS39B395 = OpaqueTLCBlockFcn("Outputs", 39, 395, 9, 72)
%assign tlcOutputsFcnOfS39B397 = OpaqueTLCBlockFcn("Outputs", 39, 397, 9, 72)
%assign tlcOutputsFcnOfS39B399 = OpaqueTLCBlockFcn("Outputs", 39, 399, 9, 72)
%assign tlcOutputsFcnOfS39B401 = OpaqueTLCBlockFcn("Outputs", 39, 401, 9, 72)
%assign tlcOutputsFcnOfS39B406 = OpaqueTLCBlockFcn("Outputs", 39, 406, 9, 72)
%assign tlcOutputsFcnOfS39B408 = OpaqueTLCBlockFcn("Outputs", 39, 408, 9, 72)
%assign tlcOutputsFcnOfS39B410 = OpaqueTLCBlockFcn("Outputs", 39, 410, 9, 72)
%assign tlcOutputsFcnOfS39B412 = OpaqueTLCBlockFcn("Outputs", 39, 412, 9, 72)
%assign tlcOutputsFcnOfS39B417 = OpaqueTLCBlockFcn("Outputs", 39, 417, 9, 72)
%assign tlcOutputsFcnOfS39B419 = OpaqueTLCBlockFcn("Outputs", 39, 419, 9, 72)
%assign tlcOutputsFcnOfS39B421 = OpaqueTLCBlockFcn("Outputs", 39, 421, 9, 72)
%assign tlcOutputsFcnOfS39B423 = OpaqueTLCBlockFcn("Outputs", 39, 423, 9, 72)
%assign tlcOutputsFcnOfS39B428 = OpaqueTLCBlockFcn("Outputs", 39, 428, 9, 72)
%assign tlcOutputsFcnOfS39B430 = OpaqueTLCBlockFcn("Outputs", 39, 430, 9, 72)
%assign tlcOutputsFcnOfS39B432 = OpaqueTLCBlockFcn("Outputs", 39, 432, 9, 72)
%assign tlcOutputsFcnOfS39B434 = OpaqueTLCBlockFcn("Outputs", 39, 434, 9, 72)
%assign tlcOutputsFcnOfS39B439 = OpaqueTLCBlockFcn("Outputs", 39, 439, 9, 72)
%assign tlcOutputsFcnOfS39B441 = OpaqueTLCBlockFcn("Outputs", 39, 441, 9, 72)
%assign tlcOutputsFcnOfS39B442 = OpaqueTLCBlockFcn("Outputs", 39, 442, 9, 72)
%assign tlcOutputsFcnOfS39B443 = OpaqueTLCBlockFcn("Outputs", 39, 443, 9, 72)
%assign tlcOutputsFcnOfS39B444 = OpaqueTLCBlockFcn("Outputs", 39, 444, 9, 72)
%assign tlcOutputsFcnOfS39B445 = OpaqueTLCBlockFcn("Outputs", 39, 445, 9, 72)
%assign tlcOutputsFcnOfS39B446 = OpaqueTLCBlockFcn("Outputs", 39, 446, 9, 72)
%assign tlcOutputsFcnOfS39B447 = OpaqueTLCBlockFcn("Outputs", 39, 447, 9, 72)
%assign tlcOutputsFcnOfS39B448 = OpaqueTLCBlockFcn("Outputs", 39, 448, 9, 72)
%assign tlcOutputsFcnOfS39B449 = OpaqueTLCBlockFcn("Outputs", 39, 449, 9, 72)
%assign tlcOutputsFcnOfS39B450 = OpaqueTLCBlockFcn("Outputs", 39, 450, 9, 72)
%assign tlcOutputsFcnOfS39B451 = OpaqueTLCBlockFcn("Outputs", 39, 451, 9, 72)
%assign tlcOutputsFcnOfS39B452 = OpaqueTLCBlockFcn("Outputs", 39, 452, 9, 72)
%assign tlcOutputsFcnOfS39B453 = OpaqueTLCBlockFcn("Outputs", 39, 453, 9, 72)
%assign tlcOutputsFcnOfS39B454 = OpaqueTLCBlockFcn("Outputs", 39, 454, 9, 72)
%assign tlcOutputsFcnOfS39B458 = OpaqueTLCBlockFcn("Outputs", 39, 458, 9, 72)
%assign tlcOutputsFcnOfS39B461 = OpaqueTLCBlockFcn("Outputs", 39, 461, 9, 72)
%assign tlcOutputsFcnOfS4B2 = OpaqueTLCBlockFcn("Outputs", 4, 2, 9, 72)
%<SLibCG_TrackEO(42)>\
%<SLibCG_TrackEO(41)>\
%<SLibCG_TrackEO(40)>\
%<SLibCG_TrackEO(39)>\
%<SLibCG_TrackEO(38)>\
%<SLibCG_TrackEO(37)>\
%<SLibCG_TrackEO(34)>\
%<SLibCG_TrackEO(33)>\
%<SLibCG_TrackEO(32)>\
%<SLibCG_TrackEO(31)>\
%<SLibCG_TrackEO(30)>\
%<SLibCG_TrackEO(29)>\
%<SLibCG_TrackEO(28)>\
%<SLibCG_TrackEO(27)>\
%<SLibCG_TrackEO(21)>\
%<SLibCG_TrackEO(20)>\
%<SLibCG_TrackEO(19)>\
%<SLibCG_TrackEO(18)>\
%<SLibCG_TrackEO(17)>\
%<SLibCG_TrackEO(16)>\
%<SLibCG_TrackEO(15)>\
%<SLibCG_TrackEO(14)>\
%<SLibCG_TrackEO(13)>\
%<SLibCG_TrackEO(12)>\
%<SLibCG_TrackEO(11)>\
%<SLibCG_TrackEO(10)>\
%<SLibCG_TrackEO(9)>\
%<SLibCG_TrackEO(8)>\
%<SLibCG_TrackEO(7)>\
%<SLibCG_TrackEO(6)>\
%<SLibCG_TrackEO(5)>\
%<SLibCG_TrackEO(4)>\
%<SLibCG_TrackEO(3)>\
%<SLibCG_TrackEO(2)>\
%<SLibCG_TrackEO(1)>\
%<SLibCG_TrackEO(0)>\
%<SLibGenerateExtModeOutput(system)>
%<SLibCGIRDumpSystemUserCode(39, "Output", "Header")>\
%<SLibCGIRDumpSystemUserCode(39, "Output", "Body")>\
/* Reset subsysRan breadcrumbs */
srClearBC(Walking01_withElmos_DW.ResetCPUOverloadCount_SubsysRan);
/* Reset subsysRan breadcrumbs */
srClearBC(Walking01_withElmos_DW.ShutdownControlWord.ShutdownControlWord_SubsysRanBC);
/* Reset subsysRan breadcrumbs */
srClearBC(Walking01_withElmos_DW.EnableControlWord.EnableControlWord_SubsysRanBC);
/* Reset subsysRan breadcrumbs */
srClearBC(Walking01_withElmos_DW.FaultReset.FaultReset_SubsysRanBC);
/* Reset subsysRan breadcrumbs */
srClearBC(Walking01_withElmos_DW.NothingControlWord.NothingControlWord_SubsysRanBC);
%<tlcOutputsFcnOfS39B1>\
%<tlcOutputsFcnOfS39B2>\
%<tlcOutputsFcnOfS39B3>\
%<tlcOutputsFcnOfS39B4>\
%<tlcOutputsFcnOfS39B5>\
%<tlcOutputsFcnOfS39B6>\
%<tlcOutputsFcnOfS39B7>\
%<tlcOutputsFcnOfS39B8>\
%<tlcOutputsFcnOfS39B9>\
%<tlcOutputsFcnOfS39B10>\
%<tlcOutputsFcnOfS39B11>\
/* DataTypeConversion: '<S19>/Data Type Conversion57' */
Walking01_withElmos_B.DataTypeConversion57 = Walking01_withElmos_B.EtherCATRxVar_h;
%<tlcOutputsFcnOfS39B12>\
/* DataTypeConversion: '<S19>/Data Type Conversion81' */
Walking01_withElmos_B.DataTypeConversion81 = Walking01_withElmos_B.EtherCATRxVar_k;
%<tlcOutputsFcnOfS39B13>\
/* DataTypeConversion: '<S19>/Data Type Conversion9' */
Walking01_withElmos_B.DataTypeConversion9 = Walking01_withElmos_B.EtherCATRxVar_o;
%<tlcOutputsFcnOfS39B14>\
/* DataTypeConversion: '<S19>/Data Type Conversion33' */
Walking01_withElmos_B.DataTypeConversion33 = Walking01_withElmos_B.EtherCATRxVar_p;
%<tlcOutputsFcnOfS39B15>\
/* DataTypeConversion: '<S19>/Data Type Conversion104' */
Walking01_withElmos_B.DataTypeConversion104 = Walking01_withElmos_B.EtherCATRxVar2_g;
%<tlcOutputsFcnOfS39B16>\
/* DataTypeConversion: '<S19>/Data Type Conversion119' */
Walking01_withElmos_B.DataTypeConversion119 = Walking01_withElmos_B.EtherCATRxVar2_i;
/* UnitDelay: '<S14>/Unit Delay' */
rtb_UnitDelay_m = Walking01_withElmos_DW.UnitDelay_DSTATE_n;
/* Logic: '<S14>/Logical Operator1' incorporates:
 *  Constant: '<S14>/ResetDAQ1'
 *  UnitDelay: '<S14>/Unit Delay'
 */
Walking01_withElmos_B.LogicalOperator1 = (Walking01_withElmos_P.ResetDAQ || Walking01_withElmos_DW.UnitDelay_DSTATE_n);
/* SignalConversion: '<S22>/TmpSignal ConversionAt SFunction Inport2' incorporates:
 *  DataTypeConversion: '<S19>/Data Type Conversion1'
 *  DataTypeConversion: '<S19>/Data Type Conversion114'
 *  DataTypeConversion: '<S19>/Data Type Conversion25'
 *  DataTypeConversion: '<S19>/Data Type Conversion26'
 *  DataTypeConversion: '<S19>/Data Type Conversion3'
 *  DataTypeConversion: '<S19>/Data Type Conversion49'
 *  DataTypeConversion: '<S19>/Data Type Conversion50'
 *  DataTypeConversion: '<S19>/Data Type Conversion73'
 *  DataTypeConversion: '<S19>/Data Type Conversion74'
 *  DataTypeConversion: '<S19>/Data Type Conversion98'
 *  MATLAB Function: '<S13>/calibrate'
 */
rtb_TmpSignalConversionAtSFunct[0] = Walking01_withElmos_B.EtherCATRxVar4;
rtb_TmpSignalConversionAtSFunct[1] = Walking01_withElmos_B.EtherCATRxVar4_p;
rtb_TmpSignalConversionAtSFunct[2] = Walking01_withElmos_B.EtherCATRxVar4_n;
rtb_TmpSignalConversionAtSFunct[3] = Walking01_withElmos_B.EtherCATRxVar4_e;
rtb_TmpSignalConversionAtSFunct[4] = Walking01_withElmos_B.EtherCATRxVar8;
rtb_TmpSignalConversionAtSFunct[5] = Walking01_withElmos_B.EtherCATRxVar8_h;
rtb_TmpSignalConversionAtSFunct[6] = Walking01_withElmos_B.EtherCATRxVar8_b;
rtb_TmpSignalConversionAtSFunct[7] = Walking01_withElmos_B.EtherCATRxVar8_bs;
rtb_TmpSignalConversionAtSFunct[8] = Walking01_withElmos_B.EtherCATRxVar4_m;
rtb_TmpSignalConversionAtSFunct[9] = Walking01_withElmos_B.EtherCATRxVar4_nd;
/* SignalConversion: '<S22>/TmpSignal ConversionAt SFunction Inport3' incorporates:
 *  MATLAB Function: '<S13>/calibrate'
 */
rtb_TmpSignalConversionAtSFu_mr[0] = Walking01_withElmos_B.DataTypeConversion57;
rtb_TmpSignalConversionAtSFu_mr[1] = Walking01_withElmos_B.DataTypeConversion81;
rtb_TmpSignalConversionAtSFu_mr[2] = Walking01_withElmos_B.DataTypeConversion9;
rtb_TmpSignalConversionAtSFu_mr[3] = Walking01_withElmos_B.DataTypeConversion33;
rtb_TmpSignalConversionAtSFu_mr[4] = Walking01_withElmos_B.DataTypeConversion104;
rtb_TmpSignalConversionAtSFu_mr[5] = Walking01_withElmos_B.DataTypeConversion119;
rtb_TmpSignalConversionAtSFu_mr[6] = Walking01_withElmos_ConstB.DataTypeConversion141[0];
rtb_TmpSignalConversionAtSFu_mr[7] = Walking01_withElmos_ConstB.DataTypeConversion141[1];
rtb_TmpSignalConversionAtSFu_mr[8] = Walking01_withElmos_ConstB.DataTypeConversion141[2];
/* MATLAB Function: '<S13>/calibrate' incorporates:
 *  Constant: '<S13>/CalibrationParameters'
 *  DataTypeConversion: '<S19>/Data Type Conversion114'
 *  DataTypeConversion: '<S19>/Data Type Conversion98'
 *  SignalConversion: '<S22>/TmpSignal ConversionAt SFunction Inport3'
 *  UnitDelay: '<S13>/Unit Delay'
 *  UnitDelay: '<S13>/Unit Delay1'
 *  UnitDelay: '<S13>/Unit Delay2'
 */
/* MATLAB Function 'DAQ_WITH_SAFETY_IMU/DAQ/EtherCATNetwork/calibrate': '<S22>:1' */
/* '<S22>:1:3' [AbsAngle, IncAngle, Rollover, IncCalTick] = calibrateEncoders2(Calibration,AbsEncoders,IncEncoders,IncEncodersPrev,Reset,RolloverIn,IncCalTickIn); */
for (i = 0; i < 10; i++) {
    Walking01_withElmos_B.VectorConcatenate_m[i] = rtb_TmpSignalConversionAtSFunct[i];
}
/* This function calibrates the encoder values and converts to radians. */
/*  Absolute hip encoders might rollover. This is not possible for the */
/*  linear optical encoders. We solve the rollover problem for the */
/*  absolute hip encoders by noting that they can only move about 30 */
/*  degrees, so if the TICK count is very far from the CAL TICK count, we */
/*  know a rollover has occurred. We can then add or subtract the max */
/*  tick count to correct the problem. */
/* 'calibrateEncoders2:11' AbsEncoders(9:10) = unrollAbsEncoders(Calibration.AbsMaxTick(9:10), Calibration.AbsCalTick(9:10), AbsEncoders(9:10)); */
/*  We solve the rollover problem for the absolute hip encoders by noting */
/*  that they can only move about 30 degrees, so if the TICK count is */
/*  very far from the CAL TICK count, we know a rollover has occurred. We */
/*  can then add or subtract the max tick count to correct the problem. */
/* 'calibrateEncoders2:68' AbsUnrolled = AbsEncoder; */
weight[0] = Walking01_withElmos_B.EtherCATRxVar4_m;
weight[1] = Walking01_withElmos_B.EtherCATRxVar4_nd;
/*  Find offset of Cal from center of tick range */
/* 'calibrateEncoders2:71' HalfMaxTicks = AbsMaxTick/2; */
HalfMaxTicks_idx_0 = %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 10, ".AbsMaxTick", -1, "", 8)))> / 2.0;
HalfMaxTicks_idx_1 = %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 10, ".AbsMaxTick", -1, "", 9)))> / 2.0;
/* 'calibrateEncoders2:72' CalOffset = AbsCalTick - HalfMaxTicks; */
CalOffset_idx_0 = %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 10, ".AbsCalTick", -1, "", 8)))> - HalfMaxTicks_idx_0;
CalOffset_idx_1 = %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 10, ".AbsCalTick", -1, "", 9)))> - HalfMaxTicks_idx_1;
/*  Find index of elements where the current encoder reading is GREATER */
/*  than CalOffset ticks above the CalTick. Correct by subtracting */
/*  MaxTicks (results in a negative number, which is okay). */
/* 'calibrateEncoders2:77' iHigh = (CalOffset<0) & (AbsEncoder > AbsCalTick + HalfMaxTicks); */
iHigh[0] = ((CalOffset_idx_0 < 0.0) && (Walking01_withElmos_B.EtherCATRxVar4_m > %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 10, ".AbsCalTick", -1, "", 8)))> + HalfMaxTicks_idx_0));
iHigh[1] = ((CalOffset_idx_1 < 0.0) && (Walking01_withElmos_B.EtherCATRxVar4_nd > %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 10, ".AbsCalTick", -1, "", 9)))> + HalfMaxTicks_idx_1));
/* 'calibrateEncoders2:78' AbsUnrolled(iHigh) = AbsUnrolled(iHigh) - AbsMaxTick(iHigh); */
%<(SLibCGCallSubFcn("Walking01_withElmos_eml_li_find", ["iHigh", "tmp_data", "&i"], 9, 72, 24))>;
%<(SLibCGCallSubFcn("Walking01_withElmos_eml_li_find", ["iHigh", "tmp_data_0", "&i"], 9, 72, 25))>;
%<(SLibCGCallSubFcn("Walking01_withElmos_eml_li_find", ["iHigh", "tmp_data_1", "&c_previousEvent"], 9, 72, 26))>;
for (ihi = 0; ihi < i; ihi++) {
    weight[tmp_data[ihi] - 1] = (real_T)rtb_TmpSignalConversionAtSFunct[tmp_data_0[ihi] + 7] - %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 10, ".AbsMaxTick", -1, "tmp_data_1[ihi] + 7", 0)))>;
}
/*  Find index of elements where the current encoder reading is LESS than */
/*  CalOffset ticks below the CalTick. Correct by adding MaxTicks */
/*  (results in a count greater than MaxTicks, which is okay). */
/* 'calibrateEncoders2:83' iLow = (CalOffset>0) & (AbsEncoder < AbsCalTick - HalfMaxTicks); */
iHigh[0] = ((CalOffset_idx_0 > 0.0) && (Walking01_withElmos_B.EtherCATRxVar4_m < %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 10, ".AbsCalTick", -1, "", 8)))> - HalfMaxTicks_idx_0));
iHigh[1] = ((CalOffset_idx_1 > 0.0) && (Walking01_withElmos_B.EtherCATRxVar4_nd < %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 10, ".AbsCalTick", -1, "", 9)))> - HalfMaxTicks_idx_1));
/* 'calibrateEncoders2:84' AbsUnrolled(iLow) = AbsUnrolled(iLow) + AbsMaxTick(iLow); */
%<(SLibCGCallSubFcn("Walking01_withElmos_eml_li_find", ["iHigh", "tmp_data", "&i"], 9, 72, 27))>;
%<(SLibCGCallSubFcn("Walking01_withElmos_eml_li_find", ["iHigh", "tmp_data_0", "&i"], 9, 72, 28))>;
%<(SLibCGCallSubFcn("Walking01_withElmos_eml_li_find", ["iHigh", "tmp_data_1", "&c_previousEvent"], 9, 72, 29))>;
for (ihi = 0; ihi < i; ihi++) {
    weight_data[ihi] = weight[tmp_data_0[ihi] - 1] + %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 10, ".AbsMaxTick", -1, "tmp_data_1[ihi] + 7", 0)))>;
}
for (ihi = 0; ihi < i; ihi++) {
    weight[tmp_data[ihi] - 1] = weight_data[ihi];
}
Walking01_withElmos_B.VectorConcatenate_m[8] = weight[0];
Walking01_withElmos_B.VectorConcatenate_m[9] = weight[1];
/*  Calibrate absolute encoders */
/* 'calibrateEncoders2:14' AbsAngle = Calibration.AbsCalAngle + Calibration.AbsCalConst.*(AbsEncoders - Calibration.AbsCalTick); */
for (ihi = 0; ihi < 10; ihi++) {
    Walking01_withElmos_B.VectorConcatenate_m[ihi] = (Walking01_withElmos_B.VectorConcatenate_m[ihi] - %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 10, ".AbsCalTick", -1, "ihi", 0)))>) * %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 10, ".AbsCalConst", -1, "ihi", 0)))> + %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 10, ".AbsCalAngle", -1, "ihi", 0)))>;
}
/*  Calibration and rollover count for incremental encoders */
/* 'calibrateEncoders2:17' if Reset */
if (Walking01_withElmos_B.LogicalOperator1) {
    /* 'calibrateEncoders2:18' Rollover = 0*RolloverIn; */
    for (i = 0; i < 9; i++) {
        Walking01_withElmos_B.Rollover[i] = 0.0 * Walking01_withElmos_DW.UnitDelay_DSTATE[i];
    }
    /* 'calibrateEncoders2:19' RefAngle = [AbsAngle(5:8)*50; AbsAngle(9:10)]; */
    RefAngle[0] = Walking01_withElmos_B.VectorConcatenate_m[4] * 50.0;
    RefAngle[1] = Walking01_withElmos_B.VectorConcatenate_m[5] * 50.0;
    RefAngle[2] = Walking01_withElmos_B.VectorConcatenate_m[6] * 50.0;
    RefAngle[3] = Walking01_withElmos_B.VectorConcatenate_m[7] * 50.0;
    RefAngle[4] = Walking01_withElmos_B.VectorConcatenate_m[8];
    RefAngle[5] = Walking01_withElmos_B.VectorConcatenate_m[9];
    /* 'calibrateEncoders2:20' [IncCalTick, Rollover(1:6)] = getIncCalTick(Calibration.IncCalConst, Calibration.IncMaxTick, RefAngle, IncEncoders(1:6)); */
    /*  Compute the calibration tick count corresponding to 0 degrees */
    /* 'calibrateEncoders2:36' IncCalTick = mod(IncTick - AbsAngle./IncCalConst, IncMaxTick); */
    for (i = 0; i < 6; i++) {
        L2fh[i] = rtb_TmpSignalConversionAtSFu_mr[i] - RefAngle[i] / %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 6, ".IncCalConst", -1, "i", 0)))>;
        Walking01_withElmos_B.IncCalTick[i] = 0.0;
    }
    for (i = 0; i < 6; i++) {
        if (%<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 6, ".IncMaxTick", -1, "i", 0)))> == 0.0) {
            Walking01_withElmos_Y.r = L2fh[i];
        } else if (%<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 6, ".IncMaxTick", -1, "i", 0)))> == floor(%<(SLibCGIR_PV(106, 0, 39, 6, ".IncMaxTick", -1, "i", 0))>)) {
            Walking01_withElmos_Y.r = L2fh[i] - floor(L2fh[i] / %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 6, ".IncMaxTick", -1, "i", 0)))>) * %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 6, ".IncMaxTick", -1, "i", 0)))>;
        } else {
            Walking01_withElmos_Y.r = L2fh[i] / %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 6, ".IncMaxTick", -1, "i", 0)))>;
%if SLibCG_FcnCallArgAccessed(9,72,32,0)
%<SLibCG_TrackEO(11)>
%endif

            if (fabs(Walking01_withElmos_Y.r - %<(SLibCGCallSubFcn("rt_roundd_snf", ["Walking01_withElmos_Y.r"], 9, 72, 32))>) <= 2.2204460492503131E-16 * fabs(Walking01_withElmos_Y.r)) {
                Walking01_withElmos_Y.r = 0.0;
            } else {
                Walking01_withElmos_Y.r = (Walking01_withElmos_Y.r - floor(Walking01_withElmos_Y.r)) * %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 6, ".IncMaxTick", -1, "i", 0)))>;
            }
        }
        Walking01_withElmos_B.IncCalTick[i] = Walking01_withElmos_Y.r;
    }
    /* Rollover = floor((IncCalTick-IncTick)./IncMaxTick); */
    /* 'calibrateEncoders2:38' Rollover = floor((AbsAngle./IncCalConst-IncTick+IncCalTick)./IncMaxTick); */
    for (ihi = 0; ihi < 6; ihi++) {
        HalfMaxTicks_idx_0 = floor(((RefAngle[ihi] / %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 6, ".IncCalConst", -1, "ihi", 0)))> - rtb_TmpSignalConversionAtSFu_mr[ihi]) + Walking01_withElmos_B.IncCalTick[ihi]) / %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 6, ".IncMaxTick", -1, "ihi", 0)))>);
        Walking01_withElmos_B.Rollover[ihi] = HalfMaxTicks_idx_0;
        RefAngle[ihi] = HalfMaxTicks_idx_0;
    }
} else {
    /* 'calibrateEncoders2:21' else */
    /* 'calibrateEncoders2:23' Rollover   = RolloverIn + getRollover(Calibration.MaxTick, IncEncoders, IncEncodersPrev); */
    /*  Determine if a rollover has occurred on any incremental encoder */
    /*  The determination is made by assuming the encoder shaft has rotated */
    /*  less than half of a revolution since the previous time step. If a */
    /*  rollover is detected on a particular encoder, the corresponding */
    /*  element of Rollover is either +1 or -1, depending on the direction of */
    /*  the rollover */
    /*  */
    /*  To compute the rollover, ticks are normalized by the maximum tick */
    /*  number. This maps all (NormalizedCountPrev, NormalizedCount) pairs */
    /*  into the region [0,1]X[0,1] in the plane. The upper left hand corner */
    /*  corresponds to negative rollover, and the lower right hand corner */
    /*  corresponds to positive rollover. */
    /* 'calibrateEncoders2:55' NormalizedCountPrev = IncEncodersPrev./MaxTick; */
    /* 'calibrateEncoders2:56' NormalizedCount     = IncEncoders./MaxTick; */
    /* 'calibrateEncoders2:58' Rollover = zeros(9,1); */
    /* 'calibrateEncoders2:59' Rollover(NormalizedCountPrev<0.5 & NormalizedCount > (NormalizedCountPrev+0.5)) = -1; */
    for (i = 0; i < 9; i++) {
        HalfMaxTicks_idx_0 = Walking01_withElmos_DW.UnitDelay1_DSTATE[i] / %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 9, ".MaxTick", -1, "i", 0)))>;
        HalfMaxTicks_idx_1 = rtb_TmpSignalConversionAtSFu_mr[i] / %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 9, ".MaxTick", -1, "i", 0)))>;
        Walking01_withElmos_B.Rollover[i] = 0.0;
        NormalizedCountPrev_0[i] = ((HalfMaxTicks_idx_0 < 0.5) && (HalfMaxTicks_idx_1 > HalfMaxTicks_idx_0 + 0.5));
        NormalizedCountPrev[i] = HalfMaxTicks_idx_0;
        NormalizedCount[i] = HalfMaxTicks_idx_1;
    }
    %<(SLibCGCallSubFcn("Walking01_withElm_eml_li_find_k", ["NormalizedCountPrev_0", "d_data", "&c_previousEvent"], 9, 72, 30))>;
    for (ihi = 0; ihi < c_previousEvent; ihi++) {
        Walking01_withElmos_B.Rollover[d_data[ihi] - 1] = -1.0;
    }
    /* 'calibrateEncoders2:60' Rollover(NormalizedCountPrev>0.5 & NormalizedCount < (NormalizedCountPrev-0.5)) = 1; */
    for (ihi = 0; ihi < 9; ihi++) {
        NormalizedCountPrev_0[ihi] = ((NormalizedCountPrev[ihi] > 0.5) && (NormalizedCount[ihi] < NormalizedCountPrev[ihi] - 0.5));
    }
    %<(SLibCGCallSubFcn("Walking01_withElm_eml_li_find_k", ["NormalizedCountPrev_0", "d_data", "&c_previousEvent"], 9, 72, 31))>;
    for (ihi = 0; ihi < c_previousEvent; ihi++) {
        Walking01_withElmos_B.Rollover[d_data[ihi] - 1] = 1.0;
    }
    for (ihi = 0; ihi < 9; ihi++) {
        Walking01_withElmos_B.Rollover[ihi] += Walking01_withElmos_DW.UnitDelay_DSTATE[ihi];
    }
    /* 'calibrateEncoders2:24' IncCalTick = IncCalTickIn; */
    for (i = 0; i < 6; i++) {
        Walking01_withElmos_B.IncCalTick[i] = Walking01_withElmos_DW.UnitDelay2_DSTATE[i];
    }
}
/*  Calibrate incremental encoders */
/* 'calibrateEncoders2:28' IncCalTickB = [IncCalTick; Calibration.BoomCalTick]; */
/* 'calibrateEncoders2:29' IncCalAngle = [zeros(6,1); Calibration.BoomCalAngle]; */
/* 'calibrateEncoders2:30' IncTick     = IncEncoders + Calibration.MaxTick.*Rollover; */
/* 'calibrateEncoders2:31' IncAngle    = IncCalAngle + [Calibration.IncCalConst; Calibration.BoomCalConst].*(IncTick - IncCalTickB); */
for (i = 0; i < 6; i++) {
    Walking01_withElmos_B.VectorConcatenate_m[i + 10] = ((%<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 9, ".MaxTick", -1, "i", 0)))> * Walking01_withElmos_B.Rollover[i] + rtb_TmpSignalConversionAtSFu_mr[i]) - Walking01_withElmos_B.IncCalTick[i]) * %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 6, ".IncCalConst", -1, "i", 0)))>;
}
Walking01_withElmos_B.VectorConcatenate_m[16] = ((%<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 9, ".MaxTick", -1, "", 6)))> * Walking01_withElmos_B.Rollover[6] + Walking01_withElmos_ConstB.DataTypeConversion141[0]) - %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 3, ".BoomCalTick", -1, "", 0)))>) * %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 3, ".BoomCalConst", -1, "", 0)))> + %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 3, ".BoomCalAngle", -1, "", 0)))>;
Walking01_withElmos_B.VectorConcatenate_m[17] = ((%<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 9, ".MaxTick", -1, "", 7)))> * Walking01_withElmos_B.Rollover[7] + Walking01_withElmos_ConstB.DataTypeConversion141[1]) - %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 3, ".BoomCalTick", -1, "", 1)))>) * %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 3, ".BoomCalConst", -1, "", 1)))> + %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 3, ".BoomCalAngle", -1, "", 1)))>;
Walking01_withElmos_B.VectorConcatenate_m[18] = ((%<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 9, ".MaxTick", -1, "", 8)))> * Walking01_withElmos_B.Rollover[8] + Walking01_withElmos_ConstB.DataTypeConversion141[2]) - %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 3, ".BoomCalTick", -1, "", 2)))>) * %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 3, ".BoomCalConst", -1, "", 2)))> + %<(SLibCG_SE(SLibCGIR_PV(106, 0, 39, 3, ".BoomCalAngle", -1, "", 2)))>;
%<tlcOutputsFcnOfS39B21>\
%<tlcOutputsFcnOfS39B22>\
%<tlcOutputsFcnOfS39B23>\
%<tlcOutputsFcnOfS39B24>\
%<tlcOutputsFcnOfS39B25>\
%<tlcOutputsFcnOfS39B26>\
%<tlcOutputsFcnOfS39B27>\
/* SignalConversion: '<S13>/TmpSignal ConversionAtEncoderFiltersInport5' incorporates:
 *  DataTypeConversion: '<S19>/Data Type Conversion107'
 *  DataTypeConversion: '<S19>/Data Type Conversion122'
 *  DataTypeConversion: '<S19>/Data Type Conversion18'
 *  DataTypeConversion: '<S19>/Data Type Conversion31'
 *  DataTypeConversion: '<S19>/Data Type Conversion55'
 *  DataTypeConversion: '<S19>/Data Type Conversion7'
 *  DataTypeConversion: '<S19>/Data Type Conversion79'
 */
Walking01_withElmos_B.TmpSignalConversionAtEncoderFil[0] = Walking01_withElmos_B.EtherCATRxVar18;
Walking01_withElmos_B.TmpSignalConversionAtEncoderFil[1] = Walking01_withElmos_B.EtherCATRxVar18_c;
Walking01_withElmos_B.TmpSignalConversionAtEncoderFil[2] = Walking01_withElmos_B.EtherCATRxVar18_i;
Walking01_withElmos_B.TmpSignalConversionAtEncoderFil[3] = Walking01_withElmos_B.EtherCATRxVar18_f;
Walking01_withElmos_B.TmpSignalConversionAtEncoderFil[4] = Walking01_withElmos_B.EtherCATRxVar18;
Walking01_withElmos_B.TmpSignalConversionAtEncoderFil[5] = Walking01_withElmos_B.EtherCATRxVar18_c;
Walking01_withElmos_B.TmpSignalConversionAtEncoderFil[6] = Walking01_withElmos_B.EtherCATRxVar18_i;
Walking01_withElmos_B.TmpSignalConversionAtEncoderFil[7] = Walking01_withElmos_B.EtherCATRxVar18_f;
Walking01_withElmos_B.TmpSignalConversionAtEncoderFil[8] = Walking01_withElmos_B.EtherCATRxVar15_b;
Walking01_withElmos_B.TmpSignalConversionAtEncoderFil[9] = Walking01_withElmos_B.EtherCATRxVar15_g;
Walking01_withElmos_B.TmpSignalConversionAtEncoderFil[10] = Walking01_withElmos_B.EtherCATRxVar18;
Walking01_withElmos_B.TmpSignalConversionAtEncoderFil[11] = Walking01_withElmos_B.EtherCATRxVar18_c;
Walking01_withElmos_B.TmpSignalConversionAtEncoderFil[12] = Walking01_withElmos_B.EtherCATRxVar18_i;
Walking01_withElmos_B.TmpSignalConversionAtEncoderFil[13] = Walking01_withElmos_B.EtherCATRxVar18_f;
Walking01_withElmos_B.TmpSignalConversionAtEncoderFil[14] = Walking01_withElmos_B.EtherCATRxVar15_b;
Walking01_withElmos_B.TmpSignalConversionAtEncoderFil[15] = Walking01_withElmos_B.EtherCATRxVar15_g;
Walking01_withElmos_B.TmpSignalConversionAtEncoderFil[16] = Walking01_withElmos_B.EtherCATRxVar17_c;
Walking01_withElmos_B.TmpSignalConversionAtEncoderFil[17] = Walking01_withElmos_B.EtherCATRxVar17_c;
Walking01_withElmos_B.TmpSignalConversionAtEncoderFil[18] = Walking01_withElmos_B.EtherCATRxVar17_c;
/* Outputs for Iterator SubSystem: '<S13>/EncoderFilters' incorporates:
 *  ForEach: '<S18>/For Each'
 */
for (ForEach_itr_n = 0; ForEach_itr_n < 19; ForEach_itr_n++) {
    /* ForEachSliceSelector: '<S18>/ImpSel_InsertedFor_q_at_outport_0' */
    rtb_ImpSel_InsertedFor_q_at_o_g = Walking01_withElmos_B.VectorConcatenate_m[ForEach_itr_n];
    /* ForEachSliceSelector: '<S18>/ImpSel_InsertedFor_Counter_at_outport_0' */
    rtb_ImpSel_InsertedFor_Counter_ = Walking01_withElmos_B.TmpSignalConversionAtEncoderFil[ForEach_itr_n];
    /* ForEachSliceSelector: '<S18>/ImpSel_InsertedFor_q_limits_at_outport_0' incorporates:
 *  Constant: '<S13>/EncoderAngleLimits'
 */
    rtb_ImpSel_InsertedFor_q_limi_h[0] = %<(SLibCG_SE(SLibCGIR_PV(101, 0, 39, 38, "", -1, "ForEach_itr_n", 0)))>;
    rtb_ImpSel_InsertedFor_q_limi_h[1] = %<(SLibCG_SE(SLibCGIR_PV(101, 0, 39, 38, "", -1, "ForEach_itr_n + 19", 0)))>;
    /* ForEachSliceSelector: '<S18>/ImpSel_InsertedFor_Threshold_at_outport_0' incorporates:
 *  Constant: '<S13>/EncoderThreshold'
 */
    rtb_ImpSel_InsertedFor_Threshol = %<(SLibCG_SE(SLibCGIR_PV(237, 0, 39, 19, "", -1, "ForEach_itr_n", 0)))>;
    /* UnitDelay: '<S24>/Unit Delay' */
    Walking01_withElmos_B.CoreSubsys[ForEach_itr_n].UnitDelay = Walking01_withElmos_DW.CoreSubsys[ForEach_itr_n].UnitDelay_DSTATE;
%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[3], "Output",0)
    /* Chart: '<S24>/AnomalyDetection' incorporates:
 *  Constant: '<S24>/Constant'
 */
%if SLibCG_SystemFcnArgAccessed("Walking01_with_AnomalyDetection",3,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif
%if SLibCG_SystemFcnArgAccessed("Walking01_with_AnomalyDetection",3,1)
%<SLibCGIRAccessLocalVar(161, 0)> %% rtb_ImpSel_InsertedFor_q_at_o_g
%endif
%if SLibCG_SystemFcnArgAccessed("Walking01_with_AnomalyDetection",3,2)
%<SLibCGIRAccessLocalDWork(337, 0)> %% ForEach_itr_n
%endif
%if SLibCG_SystemFcnArgAccessed("Walking01_with_AnomalyDetection",3,3)
%<SLibCGIRAccessLocalVar(162, 0)> %% rtb_ImpSel_InsertedFor_Counter_
%endif
%if SLibCG_SystemFcnArgAccessed("Walking01_with_AnomalyDetection",3,4)
%<SLibCGIRAccessLocalVar(163, 0)> %% rtb_ImpSel_InsertedFor_q_limi_h
%endif
%if SLibCG_SystemFcnArgAccessed("Walking01_with_AnomalyDetection",3,5)
%<SLibCGIRAccessLocalVar(164, 0)> %% rtb_ImpSel_InsertedFor_Threshol
%endif
%if SLibCG_SystemFcnArgAccessed("Walking01_with_AnomalyDetection",3,8)
%<SLibCGIRAccessLocalDWork(337, 0)> %% ForEach_itr_n
%endif
%if SLibCG_SystemFcnArgAccessed("Walking01_with_AnomalyDetection",3,9)
%<SLibCGIRAccessLocalDWork(337, 0)> %% ForEach_itr_n
%endif

%<SLibCGIRGenReusableSysCall("Walking01_with_AnomalyDetection", ["%<_modelSS>", "rtb_ImpSel_InsertedFor_q_at_o_g", "Walking01_withElmos_B.CoreSubsys[ForEach_itr_n].UnitDelay", "rtb_ImpSel_InsertedFor_Counter_", "rtb_ImpSel_InsertedFor_q_limi_h", "rtb_ImpSel_InsertedFor_Threshol", "Walking01_withElmos_B.LogicalOperator1", "%<(SLibCGIR_PV(115, 0, 39, 1, "", -1, "", 0))>", "&Walking01_withElmos_B.CoreSubsys[ForEach_itr_n].sf_AnomalyDetection", "&Walking01_withElmos_DW.CoreSubsys[ForEach_itr_n].sf_AnomalyDetection"], 3, 0, 3, 0, 3, 39)>\
%endif
%<tlcOutputsFcnOfS4B2>\
    /* ForEachSliceAssignment: '<S18>/ImpAsg_InsertedFor_q_clean_at_inport_0' */
    rtb_ImpAsg_InsertedFor_q_clea_k[ForEach_itr_n] = Walking01_withElmos_B.CoreSubsys[ForEach_itr_n].sf_AnomalyDetection.q_clean;
    /* ForEachSliceAssignment: '<S18>/ImpAsg_InsertedFor_dq_clean_at_inport_0' */
    rtb_ImpAsg_InsertedFor_dq_cle_i[ForEach_itr_n] = Walking01_withElmos_B.CoreSubsys[ForEach_itr_n].DiscreteStateSpace;
    /* ForEachSliceAssignment: '<S18>/ImpAsg_InsertedFor_ErrorCount_at_inport_0' */
    rtb_ImpAsg_InsertedFor_ErrorC_g[ForEach_itr_n] = Walking01_withElmos_B.CoreSubsys[ForEach_itr_n].sf_AnomalyDetection.ErrorCount;
}
/* End of Outputs for SubSystem: '<S13>/EncoderFilters' */

/* RateTransition: '<S5>/Rate Transition2' */
if (%<(LibIsSpecialSampleHit(1, 0))>) {
    Walking01_withElmos_B.RateTransition2[0] = Walking01_withElmos_DW.RateTransition2_Buffer0[0];
    Walking01_withElmos_B.RateTransition2[1] = Walking01_withElmos_DW.RateTransition2_Buffer0[1];
    Walking01_withElmos_B.RateTransition2[2] = Walking01_withElmos_DW.RateTransition2_Buffer0[2];
}
/* End of RateTransition: '<S5>/Rate Transition2' */
%<tlcOutputsFcnOfS39B30>\
%<tlcOutputsFcnOfS39B31>\
%<tlcOutputsFcnOfS39B32>\
%<tlcOutputsFcnOfS39B33>\
%<tlcOutputsFcnOfS39B34>\
%<tlcOutputsFcnOfS39B35>\
%<tlcOutputsFcnOfS39B36>\
%<tlcOutputsFcnOfS39B37>\
%<tlcOutputsFcnOfS39B38>\
/* SignalConversion: '<S42>/TmpSignal ConversionAt SFunction Inport1' incorporates:
 *  MATLAB Function: '<S33>/TypecastAndCast'
 */
rtb_TmpSignalConversionAtSFun_o[0] = Walking01_withElmos_B.EtherCATRxVar6;
rtb_TmpSignalConversionAtSFun_o[1] = Walking01_withElmos_B.EtherCATRxVar1;
rtb_TmpSignalConversionAtSFun_o[2] = Walking01_withElmos_B.EtherCATRxVar2;
rtb_TmpSignalConversionAtSFun_o[3] = Walking01_withElmos_B.EtherCATRxVar5;
rtb_TmpSignalConversionAtSFun_o[4] = Walking01_withElmos_B.EtherCATRxVar3;
rtb_TmpSignalConversionAtSFun_o[5] = Walking01_withElmos_B.EtherCATRxVar4_ph;
rtb_TmpSignalConversionAtSFun_o[6] = Walking01_withElmos_B.EtherCATRxVar19;
rtb_TmpSignalConversionAtSFun_o[7] = Walking01_withElmos_B.EtherCATRxVar7;
rtb_TmpSignalConversionAtSFun_o[8] = Walking01_withElmos_B.EtherCATRxVar8_m;
/* MATLAB Function: '<S33>/TypecastAndCast' incorporates:
 *  Gain: '<S13>/Gain'
 */
/* MATLAB Function 'DAQ_WITH_SAFETY_IMU/DAQ/EtherCATNetwork/EtherCATRobotMicrostrain/IMU_Medulla/TypecastAndCast': '<S42>:1' */
/* '<S42>:1:3' ys = typecast(u, 'single'); */
memcpy(&ys[0], &rtb_TmpSignalConversionAtSFun_o[0], (size_t)9 * sizeof(real32_T));
/* '<S42>:1:4' y  = double(ys); */
for (ihi = 0; ihi < 9; ihi++) {
    NormalizedCountPrev[ihi] = ys[ihi];
}
/* Gain: '<S13>/Gain' */
for (ihi = 0; ihi < 3; ihi++) {
    for (c_previousEvent = 0; c_previousEvent < 3; c_previousEvent++) {
        rtb_Gain[ihi + 3 * c_previousEvent] = 0.0;
        rtb_Gain[ihi + 3 * c_previousEvent] += NormalizedCountPrev[3 * c_previousEvent] * %<(SLibCG_SE(SLibCGIR_PV(303, 0, 39, 9, "", -1, "ihi", 0)))>;
        rtb_Gain[ihi + 3 * c_previousEvent] += NormalizedCountPrev[3 * c_previousEvent + 1] * %<(SLibCG_SE(SLibCGIR_PV(303, 0, 39, 9, "", -1, "ihi + 3", 0)))>;
        rtb_Gain[ihi + 3 * c_previousEvent] += NormalizedCountPrev[3 * c_previousEvent + 2] * %<(SLibCG_SE(SLibCGIR_PV(303, 0, 39, 9, "", -1, "ihi + 6", 0)))>;
    }
}
%<tlcOutputsFcnOfS39B40>\
%<tlcOutputsFcnOfS39B41>\
%<tlcOutputsFcnOfS39B42>\
%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[12], "Output",0)
/* MATLAB Function: '<S33>/TypecastAndCast2' */
%if SLibCG_SystemFcnArgAccessed("Walking01_with_TypecastAndCast1",12,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("Walking01_with_TypecastAndCast1", ["%<_modelSS>", "Walking01_withElmos_B.EtherCATRxVar10", "Walking01_withElmos_B.EtherCATRxVar14", "Walking01_withElmos_B.EtherCATRxVar13", "&Walking01_withElmos_B.sf_TypecastAndCast2"], 12, 1, 3, 0, 3, 39)>\

%endif
/* Logic: '<S13>/Logical Operator' incorporates:
 *  Constant: '<S5>/ResetYaw'
 */
rtb_LogicalOperator = (Walking01_withElmos_B.LogicalOperator1 || Walking01_withElmos_P.ResetYaw);
/* UnitDelay: '<S13>/Unit Delay4' */
memcpy(&rtb_UnitDelay4[0], &Walking01_withElmos_DW.UnitDelay4_DSTATE[0], 9U * sizeof(real_T));
/* UnitDelay: '<S13>/Unit Delay3' */
rtb_UnitDelay3[0] = Walking01_withElmos_DW.UnitDelay3_DSTATE[0];
rtb_UnitDelay3[1] = Walking01_withElmos_DW.UnitDelay3_DSTATE[1];
%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[2], "Output",0)
/* MATLAB Function: '<S13>/ComputeEulerAngles' incorporates:
 *  Constant: '<S13>/MisalignmentMatrixParams'
 */
%if SLibCG_SystemFcnArgAccessed("Walking01_wi_ComputeEulerAngles",2,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif
%if SLibCG_SystemFcnArgAccessed("Walking01_wi_ComputeEulerAngles",2,1)
%<SLibCGIRAccessLocalVar(28, 0)> %% rtb_Gain
%endif
%if SLibCG_SystemFcnArgAccessed("Walking01_wi_ComputeEulerAngles",2,4)
%<SLibCGIRAccessLocalVar(242, 0)> %% rtb_LogicalOperator
%endif
%if SLibCG_SystemFcnArgAccessed("Walking01_wi_ComputeEulerAngles",2,5)
%<SLibCGIRAccessLocalVar(29, 0)> %% rtb_UnitDelay4
%endif
%if SLibCG_SystemFcnArgAccessed("Walking01_wi_ComputeEulerAngles",2,6)
%<SLibCGIRAccessLocalVar(30, 0)> %% rtb_UnitDelay3
%endif

%<SLibCGIRGenReusableSysCall("Walking01_wi_ComputeEulerAngles", ["%<_modelSS>", "rtb_Gain", "Walking01_withElmos_B.sf_TypecastAndCast2.y", "%<(SLibCGIR_PVAddr(316, 0, 39, 9, "", -1, "", 0))>", "rtb_LogicalOperator", "rtb_UnitDelay4", "rtb_UnitDelay3", "&Walking01_withElmos_B.sf_ComputeEulerAngles"], 2, 0, 3, 0, 3, 39)>\

%endif
/* Outputs for Iterator SubSystem: '<S13>/IMUFilters' incorporates:
 *  ForEach: '<S20>/For Each'
 */
for (ForEach_itr = 0; ForEach_itr < 3; ForEach_itr++) {
    /* ForEachSliceSelector: '<S20>/ImpSel_InsertedFor_q_at_outport_0' */
    HalfMaxTicks_idx_0 = Walking01_withElmos_B.sf_ComputeEulerAngles.ZYX[ForEach_itr];
    /* ForEachSliceSelector: '<S20>/ImpSel_InsertedFor_IMURate_at_outport_0' */
    HalfMaxTicks_idx_1 = Walking01_withElmos_B.sf_ComputeEulerAngles.dZYX[ForEach_itr];
    /* RateTransition: '<S117>/Rate Transition' incorporates:
 *  RateTransition: '<S117>/Rate Transition3'
 */
    if (%<(LibIsSpecialSampleHit(2, 0))>) {
        Walking01_withElmos_B.CoreSubsys_p[ForEach_itr].RateTransition = HalfMaxTicks_idx_0;
        /* RateTransition: '<S117>/Rate Transition7' */
        Walking01_withElmos_B.CoreSubsys_p[ForEach_itr].RateTransition7 = Walking01_withElmos_B.LogicalOperator1;
        Walking01_withElmos_B.CoreSubsys_p[ForEach_itr].RateTransition3 = HalfMaxTicks_idx_1;
        /* RateTransition: '<S117>/Rate Transition4' incorporates:
 *  Constant: '<S13>/UseIMURates'
 */
        Walking01_withElmos_B.CoreSubsys_p[ForEach_itr].RateTransition4 = %<(SLibCG_SE(SLibCGIR_PV(110, 0, 39, 1, "", -1, "", 0)))>;
    }
    /* End of RateTransition: '<S117>/Rate Transition' */

    /* ForEachSliceAssignment: '<S20>/ImpAsg_InsertedFor_q_clean_at_inport_0' incorporates:
 *  RateTransition: '<S117>/Rate Transition1'
 */
    rtb_ImpAsg_InsertedFor_q_clean_[ForEach_itr] = Walking01_withElmos_DW.CoreSubsys_p[ForEach_itr].RateTransition1_Buffer[Walking01_withElmos_DW.CoreSubsys_p[ForEach_itr].RateTransition1_ActiveBufIdx];
    /* ForEachSliceAssignment: '<S20>/ImpAsg_InsertedFor_dq_clean_at_inport_0' incorporates:
 *  RateTransition: '<S117>/Rate Transition2'
 */
    rtb_ImpAsg_InsertedFor_dq_clean[ForEach_itr] = Walking01_withElmos_DW.CoreSubsys_p[ForEach_itr].RateTransition2_Buffer[Walking01_withElmos_DW.CoreSubsys_p[ForEach_itr].RateTransition2_ActiveBufIdx];
    /* ForEachSliceAssignment: '<S20>/ImpAsg_InsertedFor_ErrorCount_at_inport_0' incorporates:
 *  RateTransition: '<S117>/Rate Transition8'
 */
    rtb_ImpAsg_InsertedFor_ErrorCou[ForEach_itr] = Walking01_withElmos_DW.CoreSubsys_p[ForEach_itr].RateTransition8_Buffer[Walking01_withElmos_DW.CoreSubsys_p[ForEach_itr].RateTransition8_ActiveBufIdx];
}
/* End of Outputs for SubSystem: '<S13>/IMUFilters' */

/* RateTransition: '<S5>/Rate Transition1' */
if (%<(LibIsSpecialSampleHit(1, 0))>) {
    Walking01_withElmos_B.RateTransition1[0] = Walking01_withElmos_DW.RateTransition1_Buffer0[0];
    Walking01_withElmos_B.RateTransition1[1] = Walking01_withElmos_DW.RateTransition1_Buffer0[1];
    Walking01_withElmos_B.RateTransition1[2] = Walking01_withElmos_DW.RateTransition1_Buffer0[2];
}
/* End of RateTransition: '<S5>/Rate Transition1' */

/* Switch: '<S16>/Switch1' incorporates:
 *  Constant: '<S16>/UseKVH'
 */
if (%<(SLibCG_SE(SLibCGIR_PV(266, 0, 39, 1, "", -1, "", 0)))> > %<(SLibCG_SE(SLibCGIR_PV(110, 0, 39, 1, "", -1, "", 0)))>) {
    CalOffset_idx_1 = Walking01_withElmos_B.RateTransition1[0];
    rtb_Switch1_idx_1 = Walking01_withElmos_B.RateTransition1[1];
    rtb_Switch1_idx_2 = Walking01_withElmos_B.RateTransition1[2];
} else {
    CalOffset_idx_1 = rtb_ImpAsg_InsertedFor_dq_clean[0];
    rtb_Switch1_idx_1 = rtb_ImpAsg_InsertedFor_dq_clean[1];
    rtb_Switch1_idx_2 = rtb_ImpAsg_InsertedFor_dq_clean[2];
}
/* End of Switch: '<S16>/Switch1' */

/* MATLAB Function: '<S16>/GeneralizedCoordinates' incorporates:
 *  Constant: '<S16>/UseIMU'
 *  Constant: '<S16>/UseMotorIncEncoders'
 *  Constant: '<S5>/GearOffset'
 *  Constant: '<S5>/IMUTorsoOffset'
 */
/* MATLAB Function 'DAQ_WITH_SAFETY_IMU/DAQ/StateEstimator/GeneralizedCoordinates': '<S197>:1' */
/*  q_clean = */
/*   [qzT; qyT; qxT; q1R; q2R; q1L; q2L; qgr1R; qgr2R; q3R; qgr1L; qgr2L; q3L]; */
/*  */
/*  EncoderAngles =  */
/*   [Leg1R; Leg2R; Leg1L; Leg2L; Motor1R; Motor2R; Motor1L; Motor2L; Hip3R; Hip3L; ...   %<"\% ABSOLUTE ENCODERS"> */
/*    Inc1R; Inc2R; Inc1L; Inc2L; Inc3R; Inc3L; Boom; Boom; Boom]                         %<"\% INCREMENTAL ENCODERS"> */
/* '<S197>:1:11' if (Reset) */
if (Walking01_withElmos_B.LogicalOperator1) {
    /* '<S197>:1:12' q_clean  = zeros(13,1); */
    /* '<S197>:1:13' dq_clean = zeros(13,1); */
    for (i = 0; i < 13; i++) {
        rtb_q_clean[i] = 0.0;
        Walking01_withElmos_B.dq_clean[i] = 0.0;
    }
} else {
    /* '<S197>:1:14' else */
    /* '<S197>:1:15' q_clean  = EncoderAngles([17:19 1:6 15 7:8 16]); */
    /* '<S197>:1:16' dq_clean = EncoderVelocities([17:19 1:6 15 7:8 16]); */
    for (ihi = 0; ihi < 13; ihi++) {
        rtb_q_clean[ihi] = rtb_ImpAsg_InsertedFor_q_clea_k[c[ihi]];
        Walking01_withElmos_B.dq_clean[ihi] = rtb_ImpAsg_InsertedFor_dq_cle_i[c[ihi]];
    }
    /* '<S197>:1:18' if (UseMotorIncEncoders) */
    if (%<(SLibCG_SE(SLibCGIR_PV(110, 0, 39, 1, "", -1, "", 0)))> != 0.0) {
        /* '<S197>:1:19' if 0 */
        /* '<S197>:1:31' else */
        /*  BGB 2015-02-05 */
        /*  Perhaps the harmonic drive is bad? We are seeing drift in */
        /*  the 2L incremental motor encoder. */
        /* '<S197>:1:35' q_clean(8:9)  = EncoderAngles(11:12)/50; */
        rtb_q_clean[7] = rtb_ImpAsg_InsertedFor_q_clea_k[10] / 50.0;
        rtb_q_clean[8] = rtb_ImpAsg_InsertedFor_q_clea_k[11] / 50.0;
        /* '<S197>:1:36' dq_clean(8:9) = EncoderVelocities(11:12)/50; */
        Walking01_withElmos_B.dq_clean[7] = rtb_ImpAsg_InsertedFor_dq_cle_i[10] / 50.0;
        Walking01_withElmos_B.dq_clean[8] = rtb_ImpAsg_InsertedFor_dq_cle_i[11] / 50.0;
    }
    /*  Add offset to gear angles to allow zeroing of spring deflections. */
    /* '<S197>:1:41' q_clean([8:9 11:12]) = q_clean([8:9 11:12]) + GearOffset*pi/180; */
    HalfMaxTicks_idx_0 = Walking01_withElmos_P.GearOffsets[1] * 3.1415926535897931 / 180.0 + rtb_q_clean[8];
    HalfMaxTicks_idx_1 = Walking01_withElmos_P.GearOffsets[2] * 3.1415926535897931 / 180.0 + rtb_q_clean[10];
    CalOffset_idx_0 = Walking01_withElmos_P.GearOffsets[3] * 3.1415926535897931 / 180.0 + rtb_q_clean[11];
    rtb_q_clean[7] += Walking01_withElmos_P.GearOffsets[0] * 3.1415926535897931 / 180.0;
    rtb_q_clean[8] = HalfMaxTicks_idx_0;
    rtb_q_clean[10] = HalfMaxTicks_idx_1;
    rtb_q_clean[11] = CalOffset_idx_0;
    /* '<S197>:1:43' if (UseIMU) */
    if (%<(SLibCG_SE(SLibCGIR_PV(266, 0, 39, 1, "", -1, "", 0)))> != 0.0) {
        /* Switch: '<S16>/Switch' incorporates:
 *  Constant: '<S16>/UseKVH'
 */
        /* '<S197>:1:44' q_clean(1:3)  = IMUAngles + [0; IMUTorsoOffset]*pi/180; */
        if (%<(SLibCG_SE(SLibCGIR_PV(266, 0, 39, 1, "", -1, "", 0)))> > %<(SLibCG_SE(SLibCGIR_PV(110, 0, 39, 1, "", -1, "", 0)))>) {
            rtb_q_clean[0] = Walking01_withElmos_B.RateTransition2[0];
            HalfMaxTicks_idx_1 = Walking01_withElmos_B.RateTransition2[1];
        } else {
            rtb_q_clean[0] = rtb_ImpAsg_InsertedFor_q_clean_[0];
            HalfMaxTicks_idx_1 = rtb_ImpAsg_InsertedFor_q_clean_[1];
        }
        rtb_q_clean[1] = Walking01_withElmos_P.IMUTorsoOffsets[0] * 3.1415926535897931 / 180.0 + HalfMaxTicks_idx_1;
        /* Switch: '<S16>/Switch' incorporates:
 *  Constant: '<S16>/UseKVH'
 *  Constant: '<S5>/IMUTorsoOffset'
 */
        if (%<(SLibCG_SE(SLibCGIR_PV(266, 0, 39, 1, "", -1, "", 0)))> > %<(SLibCG_SE(SLibCGIR_PV(110, 0, 39, 1, "", -1, "", 0)))>) {
            HalfMaxTicks_idx_1 = Walking01_withElmos_B.RateTransition2[2];
        } else {
            HalfMaxTicks_idx_1 = rtb_ImpAsg_InsertedFor_q_clean_[2];
        }
        rtb_q_clean[2] = Walking01_withElmos_P.IMUTorsoOffsets[1] * 3.1415926535897931 / 180.0 + HalfMaxTicks_idx_1;
        /* '<S197>:1:45' dq_clean(1:3) = IMUVelocities; */
        Walking01_withElmos_B.dq_clean[0] = CalOffset_idx_1;
        Walking01_withElmos_B.dq_clean[1] = rtb_Switch1_idx_1;
        Walking01_withElmos_B.dq_clean[2] = rtb_Switch1_idx_2;
    }
}
/* End of MATLAB Function: '<S16>/GeneralizedCoordinates' */

/* MATLAB Function: '<S1>/AdjustForCOMOffset' incorporates:
 *  Constant: '<S1>/TorsoCOMOffsets'
 */
/* MATLAB Function 'DAQ_WITH_SAFETY_IMU/AdjustForCOMOffset': '<S3>:1' */
/* '<S3>:1:4' TorsoCOMRollOffset  = TorsoCOMOffsets(1)*pi/180; */
HalfMaxTicks_idx_0 = Walking01_withElmos_P.TorsoCOMOffsets[0] * 3.1415926535897931 / 180.0;
/* '<S3>:1:5' TorsoCOMPitchOffset = TorsoCOMOffsets(2)*pi/180; */
HalfMaxTicks_idx_1 = Walking01_withElmos_P.TorsoCOMOffsets[1] * 3.1415926535897931 / 180.0;
/* '<S3>:1:7' q = q_in; */
memcpy(&Walking01_withElmos_B.q[0], &rtb_q_clean[0], 13U * sizeof(real_T));
/* '<S3>:1:8' q(2)  = q(2)  + TorsoCOMRollOffset; */
Walking01_withElmos_B.q[1] = rtb_q_clean[1] + HalfMaxTicks_idx_0;
/* '<S3>:1:9' q(10) = q(10) - TorsoCOMRollOffset; */
Walking01_withElmos_B.q[9] -= HalfMaxTicks_idx_0;
/* '<S3>:1:10' q(13) = q(13) + TorsoCOMRollOffset; */
Walking01_withElmos_B.q[12] += HalfMaxTicks_idx_0;
/* '<S3>:1:12' q(3) = q(3) + TorsoCOMPitchOffset; */
Walking01_withElmos_B.q[2] += HalfMaxTicks_idx_1;
/* '<S3>:1:13' q([4:9 11:12]) = q([4:9 11:12]) - TorsoCOMPitchOffset; */
for (ihi = 0; ihi < 8; ihi++) {
    tmp_1[ihi] = Walking01_withElmos_B.q[b[ihi]] - HalfMaxTicks_idx_1;
}
for (ihi = 0; ihi < 8; ihi++) {
    Walking01_withElmos_B.q[b[ihi]] = tmp_1[ihi];
}
for (i = 0; i < 13; i++) {
    /* Outport: '<Root>/q' */
    Walking01_withElmos_Y.q[i] = Walking01_withElmos_B.q[i];
    /* Outport: '<Root>/dq' */
    Walking01_withElmos_Y.dq[i] = Walking01_withElmos_B.dq_clean[i];
}
/* End of MATLAB Function: '<S1>/AdjustForCOMOffset' */

/* Gain: '<S204>/Gain1' incorporates:
 *  Constant: '<S204>/LegHipTorqueSat'
 */
for (ihi = 0; ihi < 6; ihi++) {
    rtb_Switch2[ihi] = 0.0;
    rtb_Switch2[ihi] += %<(SLibCG_SE(SLibCGIR_PV(318, 0, 39, 12, "", -1, "ihi", 0)))> * Walking01_withElmos_P.LegHipTorqueLimit[0];
    rtb_Switch2[ihi] += %<(SLibCG_SE(SLibCGIR_PV(318, 0, 39, 12, "", -1, "ihi + 6", 0)))> * Walking01_withElmos_P.LegHipTorqueLimit[1];
}
/* End of Gain: '<S204>/Gain1' */
%<tlcOutputsFcnOfS39B61>\
/* Gain: '<S214>/TKA' */
for (ihi = 0; ihi < 2; ihi++) {
    Walking01_withElmos_B.TKA[ihi] = 0.0;
    for (c_previousEvent = 0; c_previousEvent < 13; c_previousEvent++) {
        Walking01_withElmos_B.TKA[ihi] += %<(SLibCG_SE(SLibCGIR_PV(319, 0, 39, 26, "", -1, "(c_previousEvent << 1) + ihi", 0)))> * Walking01_withElmos_B.q[c_previousEvent];
    }
}
/* End of Gain: '<S214>/TKA' */
%<tlcOutputsFcnOfS39B62>\
%<tlcOutputsFcnOfS39B63>\
/* S-Function (sdspmultiportsel): '<S201>/Multiport Selector2' incorporates:
 *  Constant: '<S201>/swap_params'
 */
rtb_DigitalClock_a = Walking01_withElmos_P.swap_params[%<(SLibCG_SE(SLibCGIR_PV(943, 0, 39, 7, "", -1, "", 6)))>];
/* BusAssignment: '<S201>/Bus Assignment3' incorporates:
 *  Constant: '<S201>/OutputPosing'
 */
rtb_Output_k = %<(SLibCG_SE(SLibCGIR_PV(102, 0, 39, 1, "", -1, "", 0)))>;
/* Gain: '<S201>/Gain' incorporates:
 *  Constant: '<S201>/hd_posing'
 */
for (ihi = 0; ihi < 6; ihi++) {
    for (c_previousEvent = 0; c_previousEvent < 6; c_previousEvent++) {
        HAlpha[ihi + 6 * c_previousEvent] = Walking01_withElmos_P.hd_posing[ihi] * %<(SLibCG_SE(SLibCGIR_PV(323, 0, 39, 6, "", -1, "c_previousEvent", 0)))>;
    }
}
/* BusAssignment: '<S201>/Bus Assignment3' incorporates:
 *  Constant: '<S201>/HAlphaStarPosing'
 *  Gain: '<S201>/Gain'
 */
for (ihi = 0; ihi < 36; ihi++) {
    rtb_Output_k.HAlpha[ihi] = HAlpha[ihi];
    rtb_Output_k.HAlphaStar[ihi] = Walking01_withElmos_P.HAlphaStarPosing[ihi];
}
/* BusCreator: '<S202>/BusConversion_InsertedFor_StateLogic_at_inport_3' incorporates:
 *  BusAssignment: '<S201>/Bus Assignment'
 *  BusAssignment: '<S201>/Bus Assignment1'
 *  BusAssignment: '<S201>/Bus Assignment3'
 *  BusAssignment: '<S201>/Bus Assignment9'
 *  BusCreator: '<S202>/BusConversion_InsertedFor_StateLogic_at_inport_3'
 *  Constant: '<S201>/AllowDoubleSupport'
 *  Constant: '<S201>/ControllerModeInit'
 *  Constant: '<S201>/DecouplingMode'
 *  Constant: '<S201>/DefaultDiscreteParams'
 *  Constant: '<S201>/DefaultFeedbackParams'
 *  Constant: '<S201>/DefaultSupervisoryParams'
 *  Constant: '<S201>/DesiredYawOffset'
 *  Constant: '<S201>/EnableFeedforwardOnStep'
 *  Constant: '<S201>/EnableVelocityBasedUpdate'
 *  Constant: '<S201>/EnergyControlGain'
 *  Constant: '<S201>/EnergyControlPhi0'
 *  Constant: '<S201>/ErrorVelZeroFactor'
 *  Constant: '<S201>/ErrorZeroFactor'
 *  Constant: '<S201>/FeedforwardGain'
 *  Constant: '<S201>/HAlphaStarPosing'
 *  Constant: '<S201>/K1MidStanceUpdate'
 *  Constant: '<S201>/K2MidStanceUpdate'
 *  Constant: '<S201>/KASaturationEarly'
 *  Constant: '<S201>/KASaturationMax'
 *  Constant: '<S201>/KASaturationS1'
 *  Constant: '<S201>/KASaturationS2'
 *  Constant: '<S201>/KThetaMinus'
 *  Constant: '<S201>/KThetaPlus'
 *  Constant: '<S201>/MaxError'
 *  Constant: '<S201>/MaxErrorVel'
 *  Constant: '<S201>/MinDeltaTheta'
 *  Constant: '<S201>/MinDeltaThetaTransition'
 *  Constant: '<S201>/RIO'
 *  Constant: '<S201>/RollPhaseVelocityThresh'
 *  Constant: '<S201>/RunMode'
 *  Constant: '<S201>/SelectFeedforward'
 *  Constant: '<S201>/StanceLegInit'
 *  Constant: '<S201>/StartSecondGaitOnStep'
 *  Constant: '<S201>/TMaxUpdate'
 *  Constant: '<S201>/TPosing'
 *  Constant: '<S201>/Theta0'
 *  Constant: '<S201>/TorsoBackAngle'
 *  Constant: '<S201>/TorsoBackOnStep'
 *  Constant: '<S201>/UseKASaturation'
 *  Constant: '<S201>/UsePosingControl'
 *  Constant: '<S201>/VBLAOptions'
 *  Constant: '<S201>/VelocityBasedUpdateDTheta0'
 *  Constant: '<S201>/VelocityBasedUpdateK1'
 *  Constant: '<S201>/VelocityBasedUpdateK2'
 *  Constant: '<S201>/VelocityBasedUpdateLimits'
 *  Constant: '<S201>/VelocityControlTorsoGain'
 *  Constant: '<S201>/VelocityControlTorsoMax'
 *  Constant: '<S201>/VelocityControlTorsoMin'
 *  Constant: '<S201>/VelocityControlTorsoV0'
 *  Constant: '<S201>/balanceParams'
 *  Constant: '<S201>/epsilon'
 *  Constant: '<S201>/ff_params'
 *  Constant: '<S201>/k_precomp'
 *  Constant: '<S201>/kd'
 *  Constant: '<S201>/kd_2dof'
 *  Constant: '<S201>/kd_torso'
 *  Constant: '<S201>/kp'
 *  Constant: '<S201>/kp_2dof'
 *  Constant: '<S201>/lat_bias'
 *  Constant: '<S201>/lat_bias2'
 *  Constant: '<S201>/lateralParams'
 *  Constant: '<S201>/linkFeedback'
 *  Constant: '<S201>/optimal_sat_weights'
 *  Constant: '<S201>/step_params'
 *  Constant: '<S201>/swap_params'
 *  Constant: '<S201>/tStepInitial'
 *  Constant: '<S201>/transitionParams'
 *  Constant: '<S201>/u_ff'
 *  Constant: '<S201>/use2DOFHipControl'
 *  Constant: '<S201>/useOptimalSaturation'
 *  Constant: '<S201>/w_torso_lat'
 *  S-Function (sdspmultiportsel): '<S201>/Multiport Selector2'
 */
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.EnableSwapOnKAAccel = Walking01_withElmos_P.swap_params[%<(SLibCG_SE(SLibCGIR_PV(943, 0, 39, 7, "", -1, "", 0)))>];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.EnableSwapOnKASpring = Walking01_withElmos_P.swap_params[%<(SLibCG_SE(SLibCGIR_PV(943, 0, 39, 7, "", -1, "", 1)))>];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.EnableBackwardSwap = Walking01_withElmos_P.swap_params[%<(SLibCG_SE(SLibCGIR_PV(943, 0, 39, 7, "", -1, "", 2)))>];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.ImpactThresholdKAAccel = Walking01_withElmos_P.swap_params[%<(SLibCG_SE(SLibCGIR_PV(943, 0, 39, 7, "", -1, "", 3)))>];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.ImpactThresholdKASpringAbs = Walking01_withElmos_P.swap_params[%<(SLibCG_SE(SLibCGIR_PV(943, 0, 39, 7, "", -1, "", 4)))>];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.ImpactThresholdKASpringRel = Walking01_withElmos_P.swap_params[%<(SLibCG_SE(SLibCGIR_PV(943, 0, 39, 7, "", -1, "", 5)))>];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.SwapThresholdS = rtb_DigitalClock_a;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.AllowDoubleSupport = Walking01_withElmos_P.AllowDoubleSupport;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.UseGaitTransition = Walking01_withElmos_P.transitionParams[0];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.NumTransitionSteps = Walking01_withElmos_P.transitionParams[4];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.TransitionThresholdTorsoVel = Walking01_withElmos_P.transitionParams[3];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.KAInjection[0] = Walking01_withElmos_P.transitionParams[1];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.KAInjection[1] = Walking01_withElmos_P.transitionParams[2];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.MinDeltaThetaTransition = Walking01_withElmos_P.MinDeltaThetaTransition;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.StartSecondGaitOnStep = Walking01_withElmos_P.StartSecondGaitOnStep;
for (i = 0; i < 6; i++) {
    Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.VBLAParams[i] = %<(SLibCG_SE(SLibCGIR_PV(320, 0, 39, 6, "", -1, "i", 0)))>;
}
for (i = 0; i < 13; i++) {
    Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.BalanceParams[i] = %<(SLibCG_SE(SLibCGIR_PV(321, 0, 39, 13, "", -1, "i", 0)))>;
}
for (i = 0; i < 5; i++) {
    Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.GaitTweaks[i] = Walking01_withElmos_P.step_params[i];
}
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.TStepInitial = Walking01_withElmos_P.tStepInitial;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.TMaxUpdate = Walking01_withElmos_P.TMaxUpdate;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.RunMode = Walking01_withElmos_P.RunMode;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.UseAbsoluteSwingLA = %<(SLibCG_SE(SLibCGIR_PV(105, 0, 39, 1, ".UseAbsoluteSwingLA", -1, "", 0)))>;
for (i = 0; i < 6; i++) {
    Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.ErrorZeroFactor[i] = Walking01_withElmos_P.ErrorZeroFactor[i];
    Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.ErrorVelZeroFactor[i] = Walking01_withElmos_P.ErrorVelZeroFactor[i];
}
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.StanceLegInit = Walking01_withElmos_P.StanceLegInit;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.ControllerModeInit = Walking01_withElmos_P.ControllerModeInit;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.UsePosingControl = Walking01_withElmos_P.UsePosingControl;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.TPosing = Walking01_withElmos_P.TPosing;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.TorsoBackAngle = Walking01_withElmos_P.TorsoBackAngle;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.TorsoBackOnStep = Walking01_withElmos_P.TorsoBackOnStep;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.EnergyControlGain = %<(SLibCG_SE(SLibCGIR_PV(110, 0, 39, 1, "", -1, "", 0)))>;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.EnergyControlPhi0 = %<(SLibCG_SE(SLibCGIR_PV(322, 0, 39, 1, "", -1, "", 0)))>;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.VelocityControlTorsoMax = Walking01_withElmos_P.VelocityControlTorsoMax;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.VelocityControlTorsoMin = Walking01_withElmos_P.VelocityControlTorsoMin;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.VelocityControlTorsoGain = Walking01_withElmos_P.VelocityControlTorsoGain;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.VelocityControlTorsoV0 = Walking01_withElmos_P.VelocityControlTorsoV0;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.MinDeltaTheta = Walking01_withElmos_P.MinDeltaTheta;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.Theta0 = Walking01_withElmos_P.Theta0;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.KThetaPlus = Walking01_withElmos_P.KThetaPlus;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.KThetaMinus = Walking01_withElmos_P.KThetaMinus;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.RollPhaseVelocityThresh = Walking01_withElmos_P.RollPhaseVelocityThresh;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.RollPhaseSThresh = %<(SLibCG_SE(SLibCGIR_PV(105, 0, 39, 1, ".RollPhaseSThresh", -1, "", 0)))>;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.MaxError = Walking01_withElmos_P.MaxError;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.MaxErrorVel = Walking01_withElmos_P.MaxErrorVel;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.MaxErrorCount = %<(SLibCG_SE(SLibCGIR_PV(105, 0, 39, 1, ".MaxErrorCount", -1, "", 0)))>;
for (i = 0; i < 6; i++) {
    Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.K1MidStanceUpdate[i] = Walking01_withElmos_P.K1MidStanceUpdate[i];
    Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.K2MidStanceUpdate[i] = Walking01_withElmos_P.K2MidStanceUpdate[i];
}
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.EnableVelocityBasedUpdate = Walking01_withElmos_P.EnableVelocityBasedUpdate;
for (i = 0; i < 6; i++) {
    Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.VelocityBasedUpdateK1[i] = Walking01_withElmos_P.VelocityBasedUpdateK1[i];
    Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.VelocityBasedUpdateK2[i] = Walking01_withElmos_P.VelocityBasedUpdateK2[i];
}
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.VelocityBasedUpdateDTheta0 = Walking01_withElmos_P.VelocityBasedUpdateDTheta0;
for (i = 0; i < 12; i++) {
    Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.VelocityBasedUpdateLimits[i] = Walking01_withElmos_P.VelocityBasedUpdateLimits[i];
}
Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory.DesiredYawOffset = Walking01_withElmos_P.DesiredYawOffset;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Discrete = %<(SLibCG_SE(SLibCGIR_PV(108, 0, 39, 1, "", -1, "", 0)))>;
for (i = 0; i < 78; i++) {
    Walking01_withElmos_B.BusConversion_InsertedFor_State.Output.H0[i] = rtb_Output_k.H0[i];
}
for (i = 0; i < 36; i++) {
    Walking01_withElmos_B.BusConversion_InsertedFor_State.Output.HAlpha[i] = rtb_Output_k.HAlpha[i];
}
Walking01_withElmos_B.BusConversion_InsertedFor_State.Output.ThetaLimits[0] = rtb_Output_k.ThetaLimits[0];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Output.ThetaLimits[1] = rtb_Output_k.ThetaLimits[1];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Output.Theta = rtb_Output_k.Theta;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Output.SaturateS = rtb_Output_k.SaturateS;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Output.SLimits[0] = rtb_Output_k.SLimits[0];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Output.SLimits[1] = rtb_Output_k.SLimits[1];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Output.EnforceIncreasingS = rtb_Output_k.EnforceIncreasingS;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Output.UseCorrection = rtb_Output_k.UseCorrection;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Output.SMaxCorrection = rtb_Output_k.SMaxCorrection;
for (i = 0; i < 30; i++) {
    Walking01_withElmos_B.BusConversion_InsertedFor_State.Output.HAlphaCorrection[i] = rtb_Output_k.HAlphaCorrection[i];
}
Walking01_withElmos_B.BusConversion_InsertedFor_State.Output.Phi = rtb_Output_k.Phi;
for (i = 0; i < 20; i++) {
    Walking01_withElmos_B.BusConversion_InsertedFor_State.Output.PhiAlpha[i] = rtb_Output_k.PhiAlpha[i];
}
Walking01_withElmos_B.BusConversion_InsertedFor_State.Output.SaturateR = rtb_Output_k.SaturateR;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Output.RLimits[0] = rtb_Output_k.RLimits[0];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Output.RLimits[1] = rtb_Output_k.RLimits[1];
for (i = 0; i < 30; i++) {
    Walking01_withElmos_B.BusConversion_InsertedFor_State.Output.HBarAlpha[i] = rtb_Output_k.HBarAlpha[i];
}
for (i = 0; i < 12; i++) {
    Walking01_withElmos_B.BusConversion_InsertedFor_State.Output.HBarLimits[i] = rtb_Output_k.HBarLimits[i];
}
for (i = 0; i < 36; i++) {
    Walking01_withElmos_B.BusConversion_InsertedFor_State.Output.HAlphaStar[i] = Walking01_withElmos_P.HAlphaStarPosing[i];
}
Walking01_withElmos_B.BusConversion_InsertedFor_State.Output.YawLimit = rtb_Output_k.YawLimit;
for (i = 0; i < 6; i++) {
    Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.kp[i] = Walking01_withElmos_P.kp[i];
    Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.kd[i] = Walking01_withElmos_P.kd[i];
}
Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.epsilon[0] = Walking01_withElmos_P.epsilon[0];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.epsilon[1] = Walking01_withElmos_P.epsilon[1];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.kff_grav[0] = Walking01_withElmos_P.ff_params[1];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.kff_grav[1] = Walking01_withElmos_P.ff_params[2];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.delta_grav = Walking01_withElmos_P.ff_params[3];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.kff_decoup[0] = Walking01_withElmos_P.ff_params[0];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.kff_decoup[1] = Walking01_withElmos_P.ff_params[4];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.kd_torso[0] = Walking01_withElmos_P.kd_torso[0];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.kd_torso[1] = Walking01_withElmos_P.kd_torso[1];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.kp_2dof = Walking01_withElmos_P.kp_2dof;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.kd_2dof = Walking01_withElmos_P.kd_2dof;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.kpre_2dof = Walking01_withElmos_P.k_precomp;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.kp_lat = Walking01_withElmos_P.lateralParams[1];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.kd_lat = Walking01_withElmos_P.lateralParams[2];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.q3d_min_lat = Walking01_withElmos_P.lateralParams[3];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.q3d_max_lat = Walking01_withElmos_P.lateralParams[4];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.w_torso_lat = Walking01_withElmos_P.w_torso_lat;
for (i = 0; i < 6; i++) {
    Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.u_ff[i] = Walking01_withElmos_P.u_ff[i];
}
Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.LateralControlMode = Walking01_withElmos_P.lateralParams[0];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.DecouplingMode = Walking01_withElmos_P.DecouplingMode;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.Use2DOF = Walking01_withElmos_P.use2DOFHipControl;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.UseDSGravComp = %<(SLibCG_SE(SLibCGIR_PV(107, 0, 39, 1, ".UseDSGravComp", -1, "", 0)))>;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.lat_bias = Walking01_withElmos_P.lat_bias;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.lat_bias2 = Walking01_withElmos_P.lat_bias2;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.linkFeedback = Walking01_withElmos_P.linkFeedback;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.RIO = %<(SLibCG_SE(SLibCGIR_PV(110, 0, 39, 1, "", -1, "", 0)))>;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.SelectFeedforward = Walking01_withElmos_P.SelectFeedforward;
for (i = 0; i < 6; i++) {
    Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.FeedforwardGain[i] = Walking01_withElmos_P.FeedforwardGain[i];
}
Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback.EnableFeedforwardOnStep = Walking01_withElmos_P.EnableFeedforwardOnStep;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Saturation.UseQPSaturation = Walking01_withElmos_P.useOptimalSaturation;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Saturation.QPWeight[0] = Walking01_withElmos_P.optimal_sat_weights[0];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Saturation.QPWeight[1] = Walking01_withElmos_P.optimal_sat_weights[1];
Walking01_withElmos_B.BusConversion_InsertedFor_State.Saturation.UseKASaturation = Walking01_withElmos_P.UseKASaturation;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Saturation.KASaturationS1 = Walking01_withElmos_P.KASaturationS1;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Saturation.KASaturationS2 = Walking01_withElmos_P.KASaturationS2;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Saturation.KASaturationEarly = Walking01_withElmos_P.KASaturationEarly;
Walking01_withElmos_B.BusConversion_InsertedFor_State.Saturation.KASaturationMax = Walking01_withElmos_P.KASaturationMax;
/* End of BusCreator: '<S202>/BusConversion_InsertedFor_StateLogic_at_inport_3' */

/* BusAssignment: '<S201>/Bus Assignment6' incorporates:
 *  Constant: '<S201>/HAlphaStarInjection'
 *  Constant: '<S201>/OutputInjection'
 */
rtb_Output_p = %<(SLibCG_SE(SLibCGIR_PV(103, 0, 39, 1, "", -1, "", 0)))>;
for (i = 0; i < 36; i++) {
    rtb_Output_p.HAlphaStar[i] = Walking01_withElmos_P.HAlphaStarInjection[i];
}
/* End of BusAssignment: '<S201>/Bus Assignment6' */

/* BusAssignment: '<S201>/Bus Assignment5' incorporates:
 *  Constant: '<S201>/H0Transition'
 *  Constant: '<S201>/HAlphaStarTransition'
 *  Constant: '<S201>/HAlphaTransition'
 *  Constant: '<S201>/HBarAlphaTransition'
 *  Constant: '<S201>/HBarLimitsTransition'
 *  Constant: '<S201>/OutputTransition'
 *  Constant: '<S201>/PhiOffset'
 *  Constant: '<S201>/RLimits'
 *  Constant: '<S201>/ThetaLimitsTransition'
 */
rtb_BusAssignment5 = %<(SLibCG_SE(SLibCGIR_PV(104, 0, 39, 1, "", -1, "", 0)))>;
for (i = 0; i < 78; i++) {
    rtb_BusAssignment5.H0[i] = Walking01_withElmos_P.H0Transition[i];
}
for (i = 0; i < 36; i++) {
    rtb_BusAssignment5.HAlpha[i] = Walking01_withElmos_P.HAlphaTransition[i];
}
rtb_BusAssignment5.ThetaLimits[0] = Walking01_withElmos_P.ThetaLimitsTransition[0];
rtb_BusAssignment5.ThetaLimits[1] = Walking01_withElmos_P.ThetaLimitsTransition[1];
for (i = 0; i < 30; i++) {
    rtb_BusAssignment5.HBarAlpha[i] = Walking01_withElmos_P.HBarAlphaTransition[i];
}
for (i = 0; i < 12; i++) {
    rtb_BusAssignment5.HBarLimits[i] = Walking01_withElmos_P.HBarLimitsTransition[i];
}
for (i = 0; i < 36; i++) {
    rtb_BusAssignment5.HAlphaStar[i] = Walking01_withElmos_P.HAlphaStarTransition[i];
}
rtb_BusAssignment5.Phi.c0 = Walking01_withElmos_P.PhiOffset;
rtb_BusAssignment5.RLimits[0] = Walking01_withElmos_P.RLimits[0];
rtb_BusAssignment5.RLimits[1] = Walking01_withElmos_P.RLimits[1];
/* End of BusAssignment: '<S201>/Bus Assignment5' */

/* BusAssignment: '<S201>/Bus Assignment2' incorporates:
 *  Constant: '<S201>/H0WalkingSingle'
 *  Constant: '<S201>/HAlphaStarSingle'
 *  Constant: '<S201>/HAlphaWalkingSingle'
 *  Constant: '<S201>/HBarAlphaWalkingSingle'
 *  Constant: '<S201>/HBarLimitsWalkingSingle'
 *  Constant: '<S201>/OutputWalkingSingle'
 *  Constant: '<S201>/PhiOffset'
 *  Constant: '<S201>/RLimits'
 *  Constant: '<S201>/ThetaLimitsWalkingSingle'
 *  Constant: '<S201>/YawLimit'
 */
rtb_BusAssignment2 = %<(SLibCG_SE(SLibCGIR_PV(104, 0, 39, 1, "", -1, "", 0)))>;
for (i = 0; i < 78; i++) {
    rtb_BusAssignment2.H0[i] = Walking01_withElmos_P.H0WalkingSingle[i];
}
for (i = 0; i < 36; i++) {
    rtb_BusAssignment2.HAlpha[i] = Walking01_withElmos_P.HAlphaWalkingSingle[i];
}
rtb_BusAssignment2.ThetaLimits[0] = Walking01_withElmos_P.ThetaLimitsWalkingSingle[0];
rtb_BusAssignment2.ThetaLimits[1] = Walking01_withElmos_P.ThetaLimitsWalkingSingle[1];
for (i = 0; i < 30; i++) {
    rtb_BusAssignment2.HBarAlpha[i] = Walking01_withElmos_P.HBarAlphaWalkingSingle[i];
}
for (i = 0; i < 12; i++) {
    rtb_BusAssignment2.HBarLimits[i] = Walking01_withElmos_P.HBarLimitsWalkingSingle[i];
}
for (i = 0; i < 36; i++) {
    rtb_BusAssignment2.HAlphaStar[i] = Walking01_withElmos_P.HAlphaStarWalkingSingle[i];
}
rtb_BusAssignment2.YawLimit = Walking01_withElmos_P.YawLimit;
rtb_BusAssignment2.Phi.c0 = Walking01_withElmos_P.PhiOffset;
rtb_BusAssignment2.RLimits[0] = Walking01_withElmos_P.RLimits[0];
rtb_BusAssignment2.RLimits[1] = Walking01_withElmos_P.RLimits[1];
/* End of BusAssignment: '<S201>/Bus Assignment2' */

/* BusAssignment: '<S201>/Bus Assignment4' incorporates:
 *  Constant: '<S201>/H0WalkingDouble'
 *  Constant: '<S201>/HAlphaStarDouble'
 *  Constant: '<S201>/HAlphaWalkingDouble'
 *  Constant: '<S201>/HBarAlphaWalkingDouble'
 *  Constant: '<S201>/HBarLimitsWalkingDouble'
 *  Constant: '<S201>/OutputWalkingDouble'
 *  Constant: '<S201>/PhiOffset'
 *  Constant: '<S201>/RLimits'
 *  Constant: '<S201>/ThetaLimitsWalkingDouble'
 *  Constant: '<S201>/YawLimit'
 */
rtb_BusAssignment4 = %<(SLibCG_SE(SLibCGIR_PV(104, 0, 39, 1, "", -1, "", 0)))>;
for (i = 0; i < 78; i++) {
    rtb_BusAssignment4.H0[i] = Walking01_withElmos_P.H0WalkingDouble[i];
}
for (i = 0; i < 36; i++) {
    rtb_BusAssignment4.HAlpha[i] = Walking01_withElmos_P.HAlphaWalkingDouble[i];
}
rtb_BusAssignment4.ThetaLimits[0] = Walking01_withElmos_P.ThetaLimitsWalkingDouble[0];
rtb_BusAssignment4.ThetaLimits[1] = Walking01_withElmos_P.ThetaLimitsWalkingDouble[1];
for (i = 0; i < 30; i++) {
    rtb_BusAssignment4.HBarAlpha[i] = Walking01_withElmos_P.HBarAlphaWalkingDouble[i];
}
for (i = 0; i < 12; i++) {
    rtb_BusAssignment4.HBarLimits[i] = Walking01_withElmos_P.HBarLimitsWalkingDouble[i];
}
for (i = 0; i < 36; i++) {
    rtb_BusAssignment4.HAlphaStar[i] = Walking01_withElmos_P.HAlphaStarWalkingDouble[i];
}
rtb_BusAssignment4.YawLimit = Walking01_withElmos_P.YawLimit;
rtb_BusAssignment4.Phi.c0 = Walking01_withElmos_P.PhiOffset;
rtb_BusAssignment4.RLimits[0] = Walking01_withElmos_P.RLimits[0];
rtb_BusAssignment4.RLimits[1] = Walking01_withElmos_P.RLimits[1];
/* End of BusAssignment: '<S201>/Bus Assignment4' */

/* Concatenate: '<S201>/Vector Concatenate' */
Walking01_withElmos_B.VectorConcatenate[0] = rtb_Output_k;
Walking01_withElmos_B.VectorConcatenate[1] = rtb_Output_p;
Walking01_withElmos_B.VectorConcatenate[2] = rtb_BusAssignment5;
Walking01_withElmos_B.VectorConcatenate[3] = rtb_BusAssignment2;
Walking01_withElmos_B.VectorConcatenate[4] = rtb_BusAssignment4;
/* Constant: '<S202>/EnableTransition' */
Walking01_withElmos_B.EnableTransition = Walking01_withElmos_P.EnableTransition;
/* RelationalOperator: '<S216>/Compare' incorporates:
 *  Constant: '<S202>/ManualSwap'
 *  Constant: '<S216>/Constant'
 */
Walking01_withElmos_B.Compare = (uint8_T)(Walking01_withElmos_P.ManualSwap > %<(SLibCG_SE(SLibCGIR_PV(110, 0, 39, 1, "", -1, "", 0)))>);
/* DataTypeConversion: '<S202>/Data Type Conversion1' incorporates:
 *  RelationalOperator: '<S212>/FixPt Relational Operator'
 *  UnitDelay: '<S212>/Delay Input1'
 */
Walking01_withElmos_B.DataTypeConversion1 = (Walking01_withElmos_B.Compare > Walking01_withElmos_DW.DelayInput1_DSTATE);
/* Constant: '<S202>/ResetControl' */
Walking01_withElmos_B.ResetControl = Walking01_withElmos_P.ResetControl;
/* RelationalOperator: '<S217>/Compare' incorporates:
 *  Constant: '<S202>/CommandSerialize'
 *  Constant: '<S217>/Constant'
 */
Walking01_withElmos_B.Compare_l = (Walking01_withElmos_P.CommandSerialize > %<(SLibCG_SE(SLibCGIR_PV(110, 0, 39, 1, "", -1, "", 0)))>);
/* RelationalOperator: '<S213>/FixPt Relational Operator' incorporates:
 *  UnitDelay: '<S213>/Delay Input1'
 */
Walking01_withElmos_B.FixPtRelationalOperator = ((int32_T)Walking01_withElmos_B.Compare_l > (int32_T)Walking01_withElmos_DW.DelayInput1_DSTATE_c);
/* Chart: '<S202>/StateLogic' */
if (Walking01_withElmos_DW.temporalCounter_i1 < MAX_uint32_T) {
    Walking01_withElmos_DW.temporalCounter_i1++;
}
if (Walking01_withElmos_DW.temporalCounter_i2 < MAX_uint32_T) {
    Walking01_withElmos_DW.temporalCounter_i2++;
}
/* Gateway: Walking/Discrete/StateLogic */
Walking01_withElmos_DW.sfEvent = -1;
/* During: Walking/Discrete/StateLogic */
if (Walking01_withElmos_DW.is_active_c22_LibWalking == 0U) {
    /* Entry: Walking/Discrete/StateLogic */
    Walking01_withElmos_DW.is_active_c22_LibWalking = 1U;
    /* Entry Internal: Walking/Discrete/StateLogic */
    Walking01_withElmos_DW.is_active_Main = 1U;
    /* Entry Internal 'Main': '<S215>:163' */
    /* Transition: '<S215>:134' */
    if (Walking01_withElmos_DW.is_Main != Walking01_withElmos_IN_Reset) {
        Walking01_withElmos_DW.is_Main = Walking01_withElmos_IN_Reset;
        /* Entry 'Reset': '<S215>:28' */
        Walking01_withElmos_B.ControlState.ControllerMode = 0.0;
        Walking01_withElmos_B.ControlState.SupportState = 0.0;
        Walking01_withElmos_B.ControlState.StanceLeg = 0.0;
        Walking01_withElmos_B.ControlState.InDoubleSupport = 0.0;
        Walking01_withElmos_B.ControlState.Error = 0.0;
    }
    Walking01_withElmos_DW.is_active_Serialize = 1U;
    /* Entry Internal 'Serialize': '<S215>:235' */
    Walking01_withElmos_DW.is_active_ControlStatus = 1U;
    /* Entry Internal 'ControlStatus': '<S215>:236' */
    /* Transition: '<S215>:237' */
    Walking01_withElmos_DW.is_ControlStatus = Walking01_withElmos_IN_Changed;
    Walking01_withElmos_DW.is_active_SerialState = 1U;
    /* Entry Internal 'SerialState': '<S215>:243' */
    /* Transition: '<S215>:246' */
    if (Walking01_withElmos_DW.is_SerialState != Walking01_withElmo_IN_Running_e) {
        Walking01_withElmos_DW.is_SerialState = Walking01_withElmo_IN_Running_e;
        /* Entry 'Running': '<S215>:252' */
        %<(SLibCGCallSubFcn("Walking01_withElmos_initSerial", ["%<RTMGetTaskTimeForTID(0)>"], 9, 72, 12))>;
        %<(SLibCGCallSubFcn("Walking01_withElmos_sendSerial", ["%<RTMGetTaskTimeForTID(0)>"], 9, 72, 13))>;
    }
} else {
    if (Walking01_withElmos_DW.is_active_Main != 0U) {
        /* During 'Main': '<S215>:163' */
        switch (Walking01_withElmos_DW.is_Main) {
          case Walking01_withElmos_IN_Error_a:
            /* During 'Error': '<S215>:192' */
            if (Walking01_withElmos_B.ResetControl > 0.0) {
                /* Transition: '<S215>:193' */
                Walking01_withElmos_DW.is_Main = Walking01_withElmos_IN_Reset;
                /* Entry 'Reset': '<S215>:28' */
                Walking01_withElmos_B.ControlState.ControllerMode = 0.0;
                Walking01_withElmos_B.ControlState.SupportState = 0.0;
                Walking01_withElmos_B.ControlState.StanceLeg = 0.0;
                Walking01_withElmos_B.ControlState.InDoubleSupport = 0.0;
                Walking01_withElmos_B.ControlState.Error = 0.0;
            }
            break;
          case Walking01_withElmos_IN_Reset:
            /* During 'Reset': '<S215>:28' */
            if (Walking01_withElmos_B.ResetControl == 0.0) {
                /* Transition: '<S215>:30' */
                Walking01_withElmos_DW.is_Main = Walking01_withElmos_IN_Run_k;
                /* Entry 'Run': '<S215>:27' */
                Walking01_withElmos_B.ControlParams = Walking01_withElmos_B.BusConversion_InsertedFor_State;
                Walking01_withElmos_B.ControlParams.Supervisory = Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory;
                Walking01_withElmos_B.ControlParams.Feedback = Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback;
                Walking01_withElmos_B.ControlParams.Saturation = Walking01_withElmos_B.BusConversion_InsertedFor_State.Saturation;
                Walking01_withElmos_DW.ControlParamsPrev = Walking01_withElmos_B.ControlParams;
                Walking01_withElmos_DW.ControlStatePrev = Walking01_withElmos_B.ControlState;
                %<(SLibCGCallSubFcn("Walking01_withElmos_updateS", ["%<RTMGetTaskTimeForTID(0)>"], 9, 72, 2))>;
                /* Entry Internal 'Run': '<S215>:27' */
                Walking01_withElmos_DW.is_active_Support = 1U;
                /* Entry Internal 'Support': '<S215>:31' */
                if (Walking01_withElmos_B.ControlParams.Supervisory.StanceLegInit == 0.0) {
                    /* Transition: '<S215>:62' */
                    if (Walking01_withElmos_DW.is_Support != Walking01_withEl_IN_RightSingle) {
                        Walking01_withElmos_DW.is_Support = Walking01_withEl_IN_RightSingle;
                        Walking01_withElmos_DW.temporalCounter_i1 = 0U;
                        %<(SLibCGCallSubFcn("Walkin_enter_atomic_RightSingle", [], 9, 72, 4))>;
                    }
                } else {
                    /* Transition: '<S215>:69' */
                    if (Walking01_withElmos_DW.is_Support != Walking01_withElm_IN_LeftSingle) {
                        Walking01_withElmos_DW.is_Support = Walking01_withElm_IN_LeftSingle;
                        Walking01_withElmos_DW.temporalCounter_i1 = 0U;
                        %<(SLibCGCallSubFcn("Walking_enter_atomic_LeftSingle", [], 9, 72, 3))>;
                    }
                }
                if (Walking01_withElmos_DW.is_active_Support != 0U) {
                    Walking01_withElmos_DW.is_active_ControllerMode = 1U;
                    /* Entry Internal 'ControllerMode': '<S215>:71' */
                    /* Transition: '<S215>:76' */
                    if (Walking01_withElmos_B.ControlParams.Supervisory.ControllerModeInit == 4.0) {
                        /* Transition: '<S215>:87' */
                        if (Walking01_withElmos_DW.is_ControllerMode != Walking01_withElmos_IN_Walking) {
                            Walking01_withElmos_DW.is_ControllerMode = Walking01_withElmos_IN_Walking;
                            /* Entry 'Walking': '<S215>:81' */
                            Walking01_withElmos_B.ControlState.ControllerMode = 4.0;
                            %<(SLibCGCallSubFcn("Walking01_withElm_updateControl", ["%<RTMGetTaskTimeForTID(0)>"], 9, 72, 8))>;
                            c_previousEvent = Walking01_withElmos_DW.sfEvent;
                            Walking01_withElmos_DW.sfEvent = Walking01_w_event_ControlUpdate;
                            if (Walking01_withElmos_DW.is_active_Serialize != 0U) {
                                %<(SLibCGCallSubFcn("Walking01_withElmos_Serialize", [], 9, 72, 9))>;
                            }
                            Walking01_withElmos_DW.sfEvent = c_previousEvent;
                        }
                    } else {
                        /* Transition: '<S215>:77' */
                        if (Walking01_withElmos_B.ControlParams.Supervisory.ControllerModeInit == 2.0) {
                            /* Transition: '<S215>:84' */
                            if (Walking01_withElmos_DW.is_ControllerMode != Walking01_withElmo_IN_Injection) {
                                Walking01_withElmos_DW.is_ControllerMode = Walking01_withElmo_IN_Injection;
                                Walking01_withElmos_DW.temporalCounter_i2 = 0U;
                                /* Entry 'Injection': '<S215>:79' */
                                Walking01_withElmos_B.ControlState.ControllerMode = 2.0;
                                %<(SLibCGCallSubFcn("Walking01_withElm_updateControl", ["%<RTMGetTaskTimeForTID(0)>"], 9, 72, 6))>;
                                i = Walking01_withElmos_DW.sfEvent;
                                Walking01_withElmos_DW.sfEvent = Walking01_w_event_ControlUpdate;
                                if (Walking01_withElmos_DW.is_active_Serialize != 0U) {
                                    %<(SLibCGCallSubFcn("Walking01_withElmos_Serialize", [], 9, 72, 7))>;
                                }
                                Walking01_withElmos_DW.sfEvent = i;
                            }
                        } else {
                            /* Transition: '<S215>:78' */
                            /* Transition: '<S215>:83' */
                            /* {send(ControlUpdate, Serialize);} */
                            if (Walking01_withElmos_DW.is_ControllerMode != Walking01_withElmos_IN_Posing) {
                                Walking01_withElmos_DW.is_ControllerMode = Walking01_withElmos_IN_Posing;
                                Walking01_withElmos_DW.temporalCounter_i2 = 0U;
                                /* Entry 'Posing': '<S215>:72' */
                                Walking01_withElmos_B.ControlState.ControllerMode = 1.0;
                                %<(SLibCGCallSubFcn("Walking01_withElm_updateControl", ["%<RTMGetTaskTimeForTID(0)>"], 9, 72, 5))>;
                            }
                        }
                    }
                    Walking01_withElmos_DW.is_active_Stage = 1U;
                    /* Entry Internal 'Stage': '<S215>:114' */
                    /* Transition: '<S215>:121' */
                    if (Walking01_withElmos_DW.is_Stage != Walking01_withElmos_IN_Early) {
                        Walking01_withElmos_DW.is_Stage = Walking01_withElmos_IN_Early;
                        /* Entry 'Early': '<S215>:115' */
                        Walking01_withElmos_B.ControlState.RollPhase = 1.0;
                    }
                }
            }
            break;
          case Walking01_withElmos_IN_Run_k:
            %<(SLibCGCallSubFcn("Walking01_withElmos_Run", [], 9, 72, 10))>;
            break;
          default:
            Walking01_withElmos_DW.is_Main = Walking01__IN_NO_ACTIVE_CHILD_j;
            break;
        }
    }
    if (Walking01_withElmos_DW.is_active_Serialize != 0U) {
        %<(SLibCGCallSubFcn("Walking01_withElmos_Serialize", [], 9, 72, 11))>;
    }
}
/* End of Chart: '<S202>/StateLogic' */

/* Sum: '<S198>/Add' */
rtb_VectorConcatenate[0] = Walking01_withElmos_B.q[0] - Walking01_withElmos_B.ControlParams.Supervisory.DesiredYawOffset;
/* SignalConversion: '<S198>/ConcatBufferAtVector ConcatenateIn2' */
memcpy(&rtb_VectorConcatenate[1], &Walking01_withElmos_B.q[1], 12U * sizeof(real_T));
/* MATLAB Function: '<S200>/controller1' incorporates:
 *  UnitDelay: '<S200>/Unit Delay'
 */
rtb_Output_k = Walking01_withElmos_B.ControlParams.Output;
CalOffset_idx_1 = Walking01_withElmos_B.ControlParams.Feedback.Use2DOF;
/* MATLAB Function 'Walking/Continuous/controller1': '<S206>:1' */
/*     %<"\%\% Set options and parameters for each ControllerMode"> */
/* '<S206>:1:7' HAlpha = ControlParams.Output.HAlpha; */
for (ihi = 0; ihi < 36; ihi++) {
    HAlpha[ihi] = Walking01_withElmos_B.ControlParams.Output.HAlpha[ihi];
}
/* '<S206>:1:9' switch (ControlState.ControllerMode) */
switch ((int32_T)Walking01_withElmos_B.ControlState.ControllerMode) {
  case 0:
    /* '<S206>:1:10' case 0 */
    /*  RESET */
    /* '<S206>:1:12' u             = zeros(6,1); */
    /* '<S206>:1:13' y             = zeros(6,1); */
    /* '<S206>:1:14' dy            = zeros(6,1); */
    /* '<S206>:1:15' hd            = zeros(6,1); */
    /* '<S206>:1:16' s             = zeros(size(ControlParams.Output.Theta.c0)); */
    b_s = 0.0;
    /* '<S206>:1:17' s_unsaturated = zeros(size(ControlParams.Output.Theta.c0)); */
    b_s_unsaturated = 0.0;
    /* '<S206>:1:18' ds            = zeros(size(ControlParams.Output.Theta.c0)); */
    b_ds = 0.0;
    /* '<S206>:1:19' theta         = zeros(size(ControlParams.Output.Theta.c0)); */
    b_theta = 0.0;
    /* '<S206>:1:20' phi           = 0; */
    b_phi = 0.0;
    /* '<S206>:1:21' r             = 0; */
    b_r = 0.0;
    /* '<S206>:1:22' hdbar         = zeros(6,1); */
    /* '<S206>:1:23' u_star        = zeros(6,1); */
    /* '<S206>:1:24' u_pd          = zeros(6,1); */
    for (i = 0; i < 6; i++) {
        rtb_u[i] = 0.0;
        rtb_y[i] = 0.0;
        rtb_dy[i] = 0.0;
        rtb_hd[i] = 0.0;
        rtb_hdbar[i] = 0.0;
        rtb_u_star[i] = 0.0;
        rtb_u_pd[i] = 0.0;
    }
    break;
  case 1:
    /* '<S206>:1:27' case 1 */
    /*  POSING */
    /* '<S206>:1:29' ControlParams.Output.SaturateS    = 1; */
    rtb_Output_k.SaturateS = 1.0;
    /*  ControlParams.Feedback.Use2DOF    = 0; */
    /* '<S206>:1:31' ControlParams.Feedback.kff_grav   = [0; 0]; */
    /* '<S206>:1:32' ControlParams.Feedback.kff_decoup = [0; 0]; */
    guard1 = true;
    break;
  case 2:
    /* '<S206>:1:34' case 2 */
    /*  INJECTION */
    /* '<S206>:1:36' ControlParams.Output.SaturateS    = 1; */
    rtb_Output_k.SaturateS = 1.0;
    /* '<S206>:1:37' ControlParams.Feedback.Use2DOF    = 0; */
    CalOffset_idx_1 = 0.0;
    /* '<S206>:1:38' ControlParams.Feedback.kff_grav   = [0; 0]; */
    /* '<S206>:1:39' ControlParams.Feedback.kff_decoup = [0; 0]; */
    guard1 = true;
    break;
  case 3:
    /* '<S206>:1:41' case 3 */
    /*  TRANSITION */
    /* '<S206>:1:43' ControlParams.Feedback.Use2DOF    = 0; */
    CalOffset_idx_1 = 0.0;
    /* '<S206>:1:44' ControlParams.Feedback.kff_grav   = [0; 0]; */
    /* [u_ff, HAlpha] = computeLateralControl(q, dq, ControlState.StanceLeg, u_ff, HAlpha, ControlParams.Feedback); */
    guard1 = true;
    break;
  case 4:
    /* '<S206>:1:48' case 4 */
    /*  REGULAR WALKING */
    /* '<S206>:1:50' if (~ControlState.InDoubleSupport) */
    if (!(Walking01_withElmos_B.ControlState.InDoubleSupport != 0.0)) {
        /* '<S206>:1:51' HAlpha = applyGaitTweaks2(ControlState, ControlParams); */
        %<(SLibCGCallSubFcn("Walking01_with_applyGaitTweaks2", ["Walking01_withElmos_B.ControlState.ControllerMode", "Walking01_withElmos_B.ControlParams.Supervisory.GaitTweaks", "Walking01_withElmos_B.ControlParams.Output.H0", "Walking01_withElmos_B.ControlParams.Output.HAlpha", "HAlpha"], 9, 72, 14))>;
    }
    guard1 = true;
    break;
  default:
    guard1 = true;
    break;
}
if (guard1) {
    /* '<S206>:1:55' ControlParams.Output.HAlpha = HAlpha; */
    for (ihi = 0; ihi < 36; ihi++) {
        rtb_Output_k.HAlpha[ihi] = HAlpha[ihi];
    }
    /*     %<"\%\% Additional model terms"> */
    /* '<S206>:1:58' H = zeros(13,1); */
    /* '<S206>:1:59' B = [zeros(7,6); diag([50 50 26.7 50 50 26.7])]; */
    /*     %<"\%\% Compute control"> */
    /* [u,y,dy,hd,s,s_unsaturated,ds,theta,~,~,~,~,phi,r,hdbar]=ATRIAS3D_ZD_Control05(t, q, dq, D, H, G, B, ControlState, ControlParams, sprev); */
    /* '<S206>:1:63' [u,y,dy,hd,s,s_unsaturated,ds,theta,u_star,u_pd,phi,r,hdbar,condDecoup] = ATRIAS3D_ZD_Control06(t, q, dq, D, H, G, B, ControlState, ControlParams, sprev); */
    /*  Updated to handle the case of ControlParams.Feedback.linkFeedback, */
    /*  which is the case when feedback is based on link errors as opposed to */
    /*  HZD based output errors. kp and kd should be tuned differently for */
    /*  this case. */
    /*  April 3rd, 2014. BAG. */
    /*     %<"\%\% Output"> */
    /* 'ATRIAS3D_ZD_Control06:10' [s,ds,h0,y,dy,jacob_h0,jacob_h,s_unsaturated,theta,dtheta,delta_theta,dsdq,jacob_jacobhdqdq,phi,r,dr,hdbar] = ATRIAS3D_ZD_Output03(t, q, dq, ControlState, ControlParams, sprev); */
%if SLibCG_FcnCallArgAccessed(9,72,20,0)
%<SLibCGIRAccessLocalVar(33, 0)> %% rtb_DigitalClock
%endif

    %<(SLibCGCallSubFcn("Walking01__ATRIAS3D_ZD_Output03", ["rtb_DigitalClock", "rtb_VectorConcatenate", "Walking01_withElmos_B.dq_clean", "Walking01_withElmos_B.ControlState.StanceLeg", "&rtb_Output_k", "Walking01_withElmos_DW.UnitDelay_DSTATE_d", "&b_s", "&b_ds", "rtb_hd", "rtb_y", "rtb_dy", "jacob_h0", "jacob_h_D_inv", "&b_s_unsaturated", "&b_theta", "&HalfMaxTicks_idx_0", "&HalfMaxTicks_idx_1", "dsdq", "RefAngle", "&b_phi", "&b_r", "&CalOffset_idx_0", "rtb_hdbar"], 9, 72, 20))>;
    /* 'ATRIAS3D_ZD_Control06:11' hd = h0-y; */
    for (ihi = 0; ihi < 6; ihi++) {
        rtb_hd[ihi] -= rtb_y[ihi];
    }
    /*     %<"\%\% Mapping Matrices"> */
    /*  Define matrix to convert between motor and standard actuated coordinates */
    /*  [uLAst; uLAsw; uKAst; uKAsw; u3st; u3sw] = T0*[u1R; u2R; u3R; u1L; u2L; u3L] */
    /* 'ATRIAS3D_ZD_Control06:17' T0 = [0.5 0.5 0 0 0 0; 0 0 0 0.5 0.5 0; -1 1 0 0 0 0; 0 0 0 -1 1 0; 0 0 1 0 0 0; 0 0 0 0 0 1]; */
    memcpy(&HAlpha[0], &T0[0], 36U * sizeof(real_T));
    /* 'ATRIAS3D_ZD_Control06:18' if ControlState.StanceLeg==1 */
    if (Walking01_withElmos_B.ControlState.StanceLeg == 1.0) {
        /* 'ATRIAS3D_ZD_Control06:19' T0 = T0([2 1 4 3 6 5],:); */
        memcpy(&HAlpha[0], &e[0], 36U * sizeof(real_T));
    }
    /*  Define matrix to map a two element vector [Leg; Hip] into the */
    /*  six-element vector [Leg; Leg; Hip; Leg; Leg; Hip] */
    /* 'ATRIAS3D_ZD_Control06:24' TLegHip = [1 0; 1 0; 0 1; 1 0; 1 0; 0 1]; */
    /*     %<"\%\% Decoupling Matrix and Feedforward    "> */
    /* 'ATRIAS3D_ZD_Control06:27' u_star = zeros(6,1); */
    /* 'ATRIAS3D_ZD_Control06:28' L2fh   = zeros(6,1); */
    for (i = 0; i < 6; i++) {
        rtb_u_star[i] = 0.0;
        L2fh[i] = 0.0;
    }
    /* 'ATRIAS3D_ZD_Control06:29' switch (ControlParams.Feedback.DecouplingMode) */
    switch ((int32_T)Walking01_withElmos_B.ControlParams.Feedback.DecouplingMode) {
      case 1:
        /* 'ATRIAS3D_ZD_Control06:30' case 1 */
        /*  CONSTANT DECOUPLING */
        /*  Note, this is default for linkFeedback. */
        /* 'ATRIAS3D_ZD_Control06:33' T = T0*B(8:13,:); */
        for (ihi = 0; ihi < 6; ihi++) {
            for (c_previousEvent = 0; c_previousEvent < 6; c_previousEvent++) {
                T[ihi + 6 * c_previousEvent] = 0.0;
                for (i = 0; i < 6; i++) {
                    T[ihi + 6 * c_previousEvent] += HAlpha[6 * i + ihi] * c_b[6 * c_previousEvent + i];
                }
            }
        }
        break;
      case 2:
        /* 'ATRIAS3D_ZD_Control06:34' case 2 */
        /*  CONSTANT DECOUPLING */
        /* 'ATRIAS3D_ZD_Control06:36' T = jacob_h0*B; */
        for (ihi = 0; ihi < 6; ihi++) {
            for (c_previousEvent = 0; c_previousEvent < 6; c_previousEvent++) {
                T[ihi + 6 * c_previousEvent] = 0.0;
                for (i = 0; i < 13; i++) {
                    T[ihi + 6 * c_previousEvent] += jacob_h0[6 * i + ihi] * b_b[13 * c_previousEvent + i];
                }
            }
        }
        break;
      default:
        /* 'ATRIAS3D_ZD_Control06:37' otherwise */
        /* case 3 */
        /*  THEORETICALLY CORRECT DECOUPLING */
        /* 'ATRIAS3D_ZD_Control06:39' jacob_h_D_inv = jacob_h/D; */
        for (ihi = 0; ihi < 78; ihi++) {
            jacob_h_D_inv[ihi] /= 0.0;
        }
        /* 'ATRIAS3D_ZD_Control06:40' T = jacob_h_D_inv*B; */
        for (ihi = 0; ihi < 6; ihi++) {
            for (c_previousEvent = 0; c_previousEvent < 6; c_previousEvent++) {
                T[ihi + 6 * c_previousEvent] = 0.0;
                for (i = 0; i < 13; i++) {
                    T[ihi + 6 * c_previousEvent] += jacob_h_D_inv[6 * i + ihi] * b_b[13 * c_previousEvent + i];
                }
            }
        }
        /*  LgLfh */
        /* 'ATRIAS3D_ZD_Control06:41' L2fh = -jacob_h_D_inv*H  + jacob_jacobhdqdq; */
        for (ihi = 0; ihi < 13; ihi++) {
            for (c_previousEvent = 0; c_previousEvent < 6; c_previousEvent++) {
                jacob_h_D_inv_0[c_previousEvent + 6 * ihi] = -jacob_h_D_inv[6 * ihi + c_previousEvent];
            }
        }
        for (ihi = 0; ihi < 6; ihi++) {
            HalfMaxTicks_idx_1 = 0.0;
            for (c_previousEvent = 0; c_previousEvent < 13; c_previousEvent++) {
                HalfMaxTicks_idx_1 += jacob_h_D_inv_0[6 * c_previousEvent + ihi] * 0.0;
            }
            L2fh[ihi] = HalfMaxTicks_idx_1 + RefAngle[ihi];
        }
        /*  L2fh */
        break;
    }
    /* 'ATRIAS3D_ZD_Control06:44' if (ControlState.StepCount >= ControlParams.Feedback.EnableFeedforwardOnStep) */
    if (Walking01_withElmos_B.ControlState.StepCount >= Walking01_withElmos_B.ControlParams.Feedback.EnableFeedforwardOnStep) {
        /* 'ATRIAS3D_ZD_Control06:45' if (ControlParams.Feedback.SelectFeedforward == 1) */
        if (Walking01_withElmos_B.ControlParams.Feedback.SelectFeedforward == 1.0) {
            /* 'ATRIAS3D_ZD_Control06:46' u_star = -T\L2fh; */
            for (i = 0; i < 6; i++) {
                rtb_u_star[i] = L2fh[i];
            }
            for (ihi = 0; ihi < 36; ihi++) {
                HAlpha[ihi] = -T[ihi];
            }
            %<(SLibCGCallSubFcn("Walking01_withElmos_mldivide_p", ["HAlpha", "rtb_u_star"], 9, 72, 15))>;
        } else {
            if (Walking01_withElmos_B.ControlParams.Feedback.SelectFeedforward == 2.0) {
                /* 'ATRIAS3D_ZD_Control06:47' elseif (ControlParams.Feedback.SelectFeedforward == 2) */
                /* 'ATRIAS3D_ZD_Control06:48' u_star = bezier(ControlParams.Output.HAlphaStar, s); */
                /* 'bezier:2' [n, m] = size(afra); */
                /* 'bezier:3' value=zeros(n,1); */
                /* 'bezier:4' M = m-1; */
                /* 'bezier:5' if M==3 */
                /* 'bezier:9' elseif M==5 */
                /* 'bezier:10' k=[1 5 10 10 5 1]; */
                /* %<"\%    "> */
                /* 'bezier:27' x = ones(1, M+1); */
                /* 'bezier:28' y = ones(1, M+1); */
                for (ihi = 0; ihi < 6; ihi++) {
                    rtb_u[ihi] = 1.0;
                    Walking01_withElmos_Y.y[ihi] = 1.0;
                }
                /* 'bezier:29' for i=1:M */
                for (i = 0; i < 5; i++) {
                    /* 'bezier:30' x(i+1)=s*x(i); */
                    rtb_u[1 + i] = b_s * rtb_u[i];
                    /* 'bezier:31' y(i+1)=(1-s)*y(i); */
                    Walking01_withElmos_Y.y[1 + i] = (1.0 - b_s) * Walking01_withElmos_Y.y[i];
                }
                /* 'bezier:33' for i=1:n */
                for (i = 0; i < 6; i++) {
                    /* 'bezier:34' value(i) = 0; */
                    rtb_u_star[i] = 0.0;
                    /* 'bezier:35' for j=1:M+1 */
                    for (c_previousEvent = 0; c_previousEvent < 6; c_previousEvent++) {
                        /* 'bezier:36' value(i) = value(i) + afra(i, j)*k(j)*x(j)*y(M+2-j); */
                        rtb_u_star[i] += Walking01_withElmos_B.ControlParams.Output.HAlphaStar[6 * c_previousEvent + i] * (real_T)b_0[c_previousEvent] * rtb_u[c_previousEvent] * Walking01_withElmos_Y.y[5 - c_previousEvent];
                    }
                }
                /* 'ATRIAS3D_ZD_Control06:49' if (ControlState.StanceLeg == 1) */
                if (Walking01_withElmos_B.ControlState.StanceLeg == 1.0) {
                    /* 'ATRIAS3D_ZD_Control06:50' u_star = u_star([4 5 6 1 2 3]); */
                    for (ihi = 0; ihi < 6; ihi++) {
                        rtb_u[ihi] = rtb_u_star[d[ihi]];
                    }
                    for (ihi = 0; ihi < 6; ihi++) {
                        rtb_u_star[ihi] = rtb_u[ihi];
                    }
                }
            }
        }
        /* 'ATRIAS3D_ZD_Control06:53' u_star = ControlParams.Feedback.FeedforwardGain .* u_star; */
        for (ihi = 0; ihi < 6; ihi++) {
            rtb_u_star[ihi] *= Walking01_withElmos_B.ControlParams.Feedback.FeedforwardGain[ihi];
        }
    }
    /* 'ATRIAS3D_ZD_Control06:56' if coder.target('MATLAB') */
    /* 'ATRIAS3D_ZD_Control06:59' else */
    /* 'ATRIAS3D_ZD_Control06:60' condDecoup = 0; */
    /* 'ATRIAS3D_ZD_Control06:63' if 0 */
    /* 'ATRIAS3D_ZD_Control06:90' else */
    /* u_grav = [0; 0; 0; 0; 0; 0]; */
    /*     %<"\%\% PD Control"> */
    /* 'ATRIAS3D_ZD_Control06:95' epsilon = ControlParams.Feedback.epsilon; */
    /* 'ATRIAS3D_ZD_Control06:96' kp = ControlParams.Feedback.kp ./ [epsilon; epsilon; epsilon].^2; */
    RefAngle[0] = Walking01_withElmos_B.ControlParams.Feedback.epsilon[0];
    RefAngle[1] = Walking01_withElmos_B.ControlParams.Feedback.epsilon[1];
    RefAngle[2] = Walking01_withElmos_B.ControlParams.Feedback.epsilon[0];
    RefAngle[3] = Walking01_withElmos_B.ControlParams.Feedback.epsilon[1];
    RefAngle[4] = Walking01_withElmos_B.ControlParams.Feedback.epsilon[0];
    RefAngle[5] = Walking01_withElmos_B.ControlParams.Feedback.epsilon[1];
    for (i = 0; i < 6; i++) {
        rtb_u_pd[i] = Walking01_withElmos_B.ControlParams.Feedback.kp[i] / (RefAngle[i] * RefAngle[i]);
    }
    /* 'ATRIAS3D_ZD_Control06:97' kd = ControlParams.Feedback.kd ./ [epsilon; epsilon; epsilon]; */
    RefAngle[0] = Walking01_withElmos_B.ControlParams.Feedback.kd[0] / Walking01_withElmos_B.ControlParams.Feedback.epsilon[0];
    RefAngle[1] = Walking01_withElmos_B.ControlParams.Feedback.kd[1] / Walking01_withElmos_B.ControlParams.Feedback.epsilon[1];
    RefAngle[2] = Walking01_withElmos_B.ControlParams.Feedback.kd[2] / Walking01_withElmos_B.ControlParams.Feedback.epsilon[0];
    RefAngle[3] = Walking01_withElmos_B.ControlParams.Feedback.kd[3] / Walking01_withElmos_B.ControlParams.Feedback.epsilon[1];
    RefAngle[4] = Walking01_withElmos_B.ControlParams.Feedback.kd[4] / Walking01_withElmos_B.ControlParams.Feedback.epsilon[0];
    RefAngle[5] = Walking01_withElmos_B.ControlParams.Feedback.kd[5] / Walking01_withElmos_B.ControlParams.Feedback.epsilon[1];
    /*  Allow choice between feedback based on HZD outputs or link positions. */
    /* 'ATRIAS3D_ZD_Control06:100' if ~(ControlParams.Feedback.linkFeedback) */
    if (!(Walking01_withElmos_B.ControlParams.Feedback.linkFeedback != 0.0)) {
        /* 'ATRIAS3D_ZD_Control06:101' pd = kp.*y + kd.*dy; */
        /* 'ATRIAS3D_ZD_Control06:102' u_pd = -T\pd; */
        for (ihi = 0; ihi < 6; ihi++) {
            rtb_u_pd[ihi] = rtb_u_pd[ihi] * rtb_y[ihi] + RefAngle[ihi] * rtb_dy[ihi];
        }
        for (ihi = 0; ihi < 36; ihi++) {
            HAlpha[ihi] = -T[ihi];
        }
        %<(SLibCGCallSubFcn("Walking01_withElmos_mldivide_p", ["HAlpha", "rtb_u_pd"], 9, 72, 18))>;
        /*  PD control */
    } else {
        /* 'ATRIAS3D_ZD_Control06:103' else */
        /*  THEORETICALLY CORRECT DECOUPLING (updated 20141106BAG) */
        /* 'ATRIAS3D_ZD_Control06:105' Ttemp = T; */
        /*  Use T decided by case statements above. */
        /*          jacob_h_D_inv = jacob_h/D; */
        /*          Ttemp = jacob_h_D_inv*B;  %<"\%\%LgLfh"> */
        /* 'ATRIAS3D_ZD_Control06:108' kp = kp([1 3 5 2 4 6]); */
        for (ihi = 0; ihi < 6; ihi++) {
            rtb_u[ihi] = rtb_u_pd[c_0[ihi]];
        }
        /* 'ATRIAS3D_ZD_Control06:109' kd = kd([1 3 5 2 4 6]); */
        for (ihi = 0; ihi < 6; ihi++) {
            rtb_u_pd[ihi] = rtb_u[ihi];
            RefAngle_1[ihi] = RefAngle[c_0[ihi]];
        }
        /* 'ATRIAS3D_ZD_Control06:110' u_pd = -kp.*(Ttemp\y) -kd.*(Ttemp\dy); */
        for (ihi = 0; ihi < 6; ihi++) {
            RefAngle[ihi] = RefAngle_1[ihi];
            L2fh[ihi] = rtb_y[ihi];
        }
        %<(SLibCGCallSubFcn("Walking01_withElmos_mldivide_p", ["T", "L2fh"], 9, 72, 16))>;
        for (i = 0; i < 6; i++) {
            rtb_u[i] = rtb_dy[i];
        }
        %<(SLibCGCallSubFcn("Walking01_withElmos_mldivide_p", ["T", "rtb_u"], 9, 72, 17))>;
        for (ihi = 0; ihi < 6; ihi++) {
            rtb_u_pd[ihi] = -rtb_u_pd[ihi] * L2fh[ihi] - RefAngle[ihi] * rtb_u[ihi];
        }
    }
    /*     %<"\%\% 2DOF Hip Control"> */
    /* 'ATRIAS3D_ZD_Control06:115' if (ControlParams.Feedback.Use2DOF) */
    if (CalOffset_idx_1 != 0.0) {
        /* 'ATRIAS3D_ZD_Control06:116' kp_2dof = ControlParams.Feedback.kp_2dof; */
        /* 'ATRIAS3D_ZD_Control06:117' kd_2dof = ControlParams.Feedback.kd_2dof; */
        /* 'ATRIAS3D_ZD_Control06:118' kpre_2dof = ControlParams.Feedback.kpre_2dof; */
        /* 'ATRIAS3D_ZD_Control06:120' q3_swing  = jacob_h0(6,:)*q; */
        /* 'ATRIAS3D_ZD_Control06:121' dq3_swing = jacob_h0(6,:)*dq; */
        /* 'ATRIAS3D_ZD_Control06:122' e_swing   = kpre_2dof*hd(6) - q3_swing; */
        /* 'ATRIAS3D_ZD_Control06:123' u3_swing  = kp_2dof*e_swing - kd_2dof*dq3_swing; */
        HalfMaxTicks_idx_1 = 0.0;
        HalfMaxTicks_idx_0 = 0.0;
        for (ihi = 0; ihi < 13; ihi++) {
            HalfMaxTicks_idx_1 += jacob_h0[6 * ihi + 5] * rtb_VectorConcatenate[ihi];
            HalfMaxTicks_idx_0 += jacob_h0[6 * ihi + 5] * Walking01_withElmos_B.dq_clean[ihi];
        }
        HalfMaxTicks_idx_0 = (Walking01_withElmos_B.ControlParams.Feedback.kpre_2dof * rtb_hd[5] - HalfMaxTicks_idx_1) * Walking01_withElmos_B.ControlParams.Feedback.kp_2dof - Walking01_withElmos_B.ControlParams.Feedback.kd_2dof * HalfMaxTicks_idx_0;
        /* 'ATRIAS3D_ZD_Control06:125' if ControlState.StanceLeg==0 */
        if (Walking01_withElmos_B.ControlState.StanceLeg == 0.0) {
            /* 'ATRIAS3D_ZD_Control06:126' u_pd(6) = u3_swing; */
            rtb_u_pd[5] = HalfMaxTicks_idx_0;
        } else {
            /* 'ATRIAS3D_ZD_Control06:127' else */
            /* 'ATRIAS3D_ZD_Control06:128' u_pd(3) = u3_swing; */
            rtb_u_pd[2] = HalfMaxTicks_idx_0;
        }
    }
    /* 'ATRIAS3D_ZD_Control06:132' if 0 */
    /*  Constant feedforward toque */
    /* u0_ff = ControlParams.Feedback.u_ff; */
    /*  Torques in LA/KA/Hip coordinates */
    /* u0 = u0_ff + u0_decoupling + u0_torso_damping; */
    /*  Torque command in motor coordinates [u1R; u2R; u3R; u1L; u2L; u3L] */
    /* 'ATRIAS3D_ZD_Control06:157' u  = u_pd + u_star; */
    /*  + u_grav + T0\u0; */
    for (i = 0; i < 6; i++) {
        rtb_u[i] = rtb_u_pd[i] + rtb_u_star[i];
    }
}
Walking01_withElmos_B.s = b_s;
/* MATLAB Function: '<S204>/SmartSaturation' incorporates:
 *  Constant: '<S204>/LegHipTorqueSat'
 */
/* MATLAB Function 'Walking/Continuous/Saturation/SmartSaturation': '<S208>:1' */
/* '<S208>:1:4' u_sat = u; */
for (i = 0; i < 6; i++) {
    rtb_u_sat[i] = rtb_u[i];
}
/* '<S208>:1:6' if (ControlParams.Saturation.UseQPSaturation) */
if (Walking01_withElmos_B.ControlParams.Saturation.UseQPSaturation != 0.0) {
    /* '<S208>:1:7' if (ControlState.StanceLeg==0) */
    if (Walking01_withElmos_B.ControlState.StanceLeg == 0.0) {
        /* '<S208>:1:8' weight = ControlParams.Saturation.QPWeight; */
        weight[0] = Walking01_withElmos_B.ControlParams.Saturation.QPWeight[0];
        weight[1] = Walking01_withElmos_B.ControlParams.Saturation.QPWeight[1];
    } else {
        /* '<S208>:1:9' else */
        /* '<S208>:1:10' weight = [0 1; 1 0]*ControlParams.Saturation.QPWeight; */
        weight[0] = 0.0 * Walking01_withElmos_B.ControlParams.Saturation.QPWeight[0] + Walking01_withElmos_B.ControlParams.Saturation.QPWeight[1];
        weight[1] = 0.0 * Walking01_withElmos_B.ControlParams.Saturation.QPWeight[1] + Walking01_withElmos_B.ControlParams.Saturation.QPWeight[0];
    }
    /* '<S208>:1:13' u_LA_R = (u(1)+u(2))/2; */
    /* '<S208>:1:14' u_LS_R = u(2)-u(1); */
    /* '<S208>:1:15' u_LA_L =(u(4)+u(5))/2; */
    /* '<S208>:1:16' u_LS_L = u(5)-u(4); */
    /* '<S208>:1:18' uR = LA_LS_Revised_Saturation(u_LS_R,u_LA_R,weight(1),-sat(1),sat(1),-sat(2),sat(2)); */
    /* '<S208>:1:19' uL = LA_LS_Revised_Saturation(u_LS_L,u_LA_L,weight(2),-sat(1),sat(1),-sat(2),sat(2)); */
    /* '<S208>:1:20' u_sat = [uR; u(3); uL; u(6)]; */
    %<(SLibCGCallSubFcn("Walkin_LA_LS_Revised_Saturation", ["rtb_u[1] - rtb_u[0]", "(rtb_u[0] + rtb_u[1]) / 2.0", "weight[0]", "-Walking01_withElmos_P.LegHipTorqueLimit[0]", "Walking01_withElmos_P.LegHipTorqueLimit[0]", "-Walking01_withElmos_P.LegHipTorqueLimit[1]", "Walking01_withElmos_P.LegHipTorqueLimit[1]", "weight_data"], 9, 72, 22))>;
    %<(SLibCGCallSubFcn("Walkin_LA_LS_Revised_Saturation", ["rtb_u[4] - rtb_u[3]", "(rtb_u[3] + rtb_u[4]) / 2.0", "weight[1]", "-Walking01_withElmos_P.LegHipTorqueLimit[0]", "Walking01_withElmos_P.LegHipTorqueLimit[0]", "-Walking01_withElmos_P.LegHipTorqueLimit[1]", "Walking01_withElmos_P.LegHipTorqueLimit[1]", "tmp_0"], 9, 72, 23))>;
    rtb_u_sat[0] = weight_data[0];
    rtb_u_sat[1] = weight_data[1];
    rtb_u_sat[2] = rtb_u[2];
    rtb_u_sat[3] = tmp_0[0];
    rtb_u_sat[4] = tmp_0[1];
    rtb_u_sat[5] = rtb_u[5];
}
/* '<S208>:1:23' if (ControlState.ControllerMode>=3  && ControlParams.Saturation.UseKASaturation) */
if ((Walking01_withElmos_B.ControlState.ControllerMode >= 3.0) && (Walking01_withElmos_B.ControlParams.Saturation.UseKASaturation != 0.0)) {
    /*  Define matrix to convert between motor and standard actuated coordinates */
    /*  [uLAst; uLAsw; uKAst; uKAsw; u3st; u3sw] = T0*[u1R; u2R; u3R; u1L; u2L; u3L] */
    /* '<S208>:1:26' T0 = [0.5 0.5 0 0 0 0; 0 0 0 0.5 0.5 0; -1 1 0 0 0 0; 0 0 0 -1 1 0; 0 0 1 0 0 0; 0 0 0 0 0 1]; */
    memcpy(&HAlpha[0], &b_T0[0], 36U * sizeof(real_T));
    /* '<S208>:1:27' if (ControlState.StanceLeg==1) */
    if (Walking01_withElmos_B.ControlState.StanceLeg == 1.0) {
        /* '<S208>:1:28' T0 = T0([2 1 4 3 6 5],:); */
        memcpy(&HAlpha[0], &b_1[0], 36U * sizeof(real_T));
    }
    /* '<S208>:1:31' u0 = T0*u_sat; */
    for (ihi = 0; ihi < 6; ihi++) {
        RefAngle[ihi] = 0.0;
        for (c_previousEvent = 0; c_previousEvent < 6; c_previousEvent++) {
            RefAngle[ihi] += HAlpha[6 * c_previousEvent + ihi] * rtb_u_sat[c_previousEvent];
        }
    }
    /* '<S208>:1:32' deltaS = (ControlParams.Saturation.KASaturationS2 - ControlParams.Saturation.KASaturationS1); */
    /* '<S208>:1:33' deltaS = min(deltaS, 1); */
    /* '<S208>:1:34' if (s < ControlParams.Saturation.KASaturationS1) */
    if (Walking01_withElmos_B.s < Walking01_withElmos_B.ControlParams.Saturation.KASaturationS1) {
        /* '<S208>:1:35' KASaturationLim = ControlParams.Saturation.KASaturationEarly; */
        HalfMaxTicks_idx_0 = Walking01_withElmos_B.ControlParams.Saturation.KASaturationEarly;
    } else if (Walking01_withElmos_B.s < Walking01_withElmos_B.ControlParams.Saturation.KASaturationS2) {
        /* '<S208>:1:36' elseif (s < ControlParams.Saturation.KASaturationS2) */
        /* '<S208>:1:37' KASaturationLim = [ControlParams.Saturation.KASaturationS2-s s-ControlParams.Saturation.KASaturationS1] ... */
        /* '<S208>:1:38'                 * [ControlParams.Saturation.KASaturationEarly; ControlParams.Saturation.KASaturationMax]/deltaS; */
        HalfMaxTicks_idx_0 = Walking01_withElmos_B.ControlParams.Saturation.KASaturationS2 - Walking01_withElmos_B.ControlParams.Saturation.KASaturationS1;
        if (!(HalfMaxTicks_idx_0 <= 1.0)) {
            HalfMaxTicks_idx_0 = 1.0;
        }
        HalfMaxTicks_idx_0 = ((Walking01_withElmos_B.ControlParams.Saturation.KASaturationS2 - Walking01_withElmos_B.s) * Walking01_withElmos_B.ControlParams.Saturation.KASaturationEarly + (Walking01_withElmos_B.s - Walking01_withElmos_B.ControlParams.Saturation.KASaturationS1) * Walking01_withElmos_B.ControlParams.Saturation.KASaturationMax) / HalfMaxTicks_idx_0;
    } else {
        /* '<S208>:1:39' else */
        /* '<S208>:1:40' KASaturationLim = ControlParams.Saturation.KASaturationMax; */
        HalfMaxTicks_idx_0 = Walking01_withElmos_B.ControlParams.Saturation.KASaturationMax;
    }
    /* '<S208>:1:42' u0(3) = max(-KASaturationLim, min(u0(3), KASaturationLim)); */
    if ((RefAngle[2] <= HalfMaxTicks_idx_0) || rtIsNaN(HalfMaxTicks_idx_0)) {
        HalfMaxTicks_idx_1 = RefAngle[2];
    } else {
        HalfMaxTicks_idx_1 = HalfMaxTicks_idx_0;
    }
    if ((-HalfMaxTicks_idx_0 >= HalfMaxTicks_idx_1) || rtIsNaN(HalfMaxTicks_idx_1)) {
        RefAngle[2] = -HalfMaxTicks_idx_0;
    } else {
        RefAngle[2] = HalfMaxTicks_idx_1;
    }
    /* '<S208>:1:43' u_sat = T0\u0; */
    for (i = 0; i < 6; i++) {
        rtb_u_sat[i] = RefAngle[i];
    }
%if SLibCG_FcnCallArgAccessed(9,72,19,1)
%<SLibCGIRAccessLocalVar(122, 0)> %% rtb_u_sat
%endif

    %<(SLibCGCallSubFcn("Walking01_withElmos_mldivide", ["HAlpha", "rtb_u_sat"], 9, 72, 19))>;
}
/* End of MATLAB Function: '<S204>/SmartSaturation' */

/* Outport: '<Root>/s' */
Walking01_withElmos_Y.s = Walking01_withElmos_B.s;
/* Outport: '<Root>/s_unsaturated' incorporates:
 *  MATLAB Function: '<S200>/controller1'
 */
Walking01_withElmos_Y.s_unsaturated = b_s_unsaturated;
/* Outport: '<Root>/ds' incorporates:
 *  MATLAB Function: '<S200>/controller1'
 */
Walking01_withElmos_Y.ds = b_ds;
/* Outport: '<Root>/theta' incorporates:
 *  MATLAB Function: '<S200>/controller1'
 */
Walking01_withElmos_Y.theta = b_theta;
/* Outport: '<Root>/phi' incorporates:
 *  MATLAB Function: '<S200>/controller1'
 */
Walking01_withElmos_Y.phi = b_phi;
/* Outport: '<Root>/r' incorporates:
 *  MATLAB Function: '<S200>/controller1'
 */
Walking01_withElmos_Y.r = b_r;
for (i = 0; i < 6; i++) {
    /* Gain: '<S204>/Gain' */
    rtb_Switch_o[i] = %<(SLibCG_SE(SLibCGIR_PV(324, 0, 39, 1, "", -1, "", 0)))> * rtb_Switch2[i];
    /* Switch: '<S207>/Switch' incorporates:
 *  RelationalOperator: '<S207>/UpperRelop'
 */
    if (!(rtb_u_sat[i] < rtb_Switch_o[i])) {
        rtb_Switch_o[i] = rtb_u_sat[i];
    }
    /* End of Switch: '<S207>/Switch' */

    /* Switch: '<S207>/Switch2' incorporates:
 *  RelationalOperator: '<S207>/LowerRelop1'
 */
    if (!(rtb_u_sat[i] > rtb_Switch2[i])) {
        rtb_Switch2[i] = rtb_Switch_o[i];
    }
    /* End of Switch: '<S207>/Switch2' */

    /* Outport: '<Root>/u' incorporates:
 *  DataTypeConversion: '<S204>/Data Type Conversion1'
 */
    Walking01_withElmos_Y.u[i] = rtb_Switch2[i];
    /* Outport: '<Root>/y' */
    Walking01_withElmos_Y.y[i] = rtb_y[i];
    /* Outport: '<Root>/dy' */
    Walking01_withElmos_Y.dy[i] = rtb_dy[i];
    /* Outport: '<Root>/hd' */
    Walking01_withElmos_Y.hd[i] = rtb_hd[i];
    /* Outport: '<Root>/hdbar' */
    Walking01_withElmos_Y.hdbar[i] = rtb_hdbar[i];
}
/* SignalConversion: '<S2>/ConcatBufferAtControlStateVecIn1' */
rtb_ControlStateVec[0] = Walking01_withElmos_B.ControlState.ControllerMode;
/* SignalConversion: '<S2>/ConcatBufferAtControlStateVecIn2' */
rtb_ControlStateVec[1] = Walking01_withElmos_B.ControlState.SupportState;
/* SignalConversion: '<S2>/ConcatBufferAtControlStateVecIn3' */
rtb_ControlStateVec[2] = Walking01_withElmos_B.ControlState.StanceLeg;
/* SignalConversion: '<S2>/ConcatBufferAtControlStateVecIn4' */
rtb_ControlStateVec[3] = Walking01_withElmos_B.ControlState.InDoubleSupport;
/* SignalConversion: '<S2>/ConcatBufferAtControlStateVecIn5' */
rtb_ControlStateVec[4] = Walking01_withElmos_B.ControlState.RollPhase;
/* SignalConversion: '<S2>/ConcatBufferAtControlStateVecIn6' */
rtb_ControlStateVec[5] = Walking01_withElmos_B.ControlState.StepCount;
/* SignalConversion: '<S2>/ConcatBufferAtControlStateVecIn7' */
rtb_ControlStateVec[6] = Walking01_withElmos_B.ControlState.Error;
/* Outport: '<Root>/ControlState' */
for (i = 0; i < 7; i++) {
    Walking01_withElmos_Y.ControlState[i] = rtb_ControlStateVec[i];
}
/* End of Outport: '<Root>/ControlState' */

/* Outport: '<Root>/SerialOut' */
for (i = 0; i < 5; i++) {
    Walking01_withElmos_Y.SerialOut[i] = Walking01_withElmos_B.SerialOut[i];
}
/* End of Outport: '<Root>/SerialOut' */
%<tlcOutputsFcnOfS39B186>\
%<tlcOutputsFcnOfS39B187>\
%<tlcOutputsFcnOfS39B188>\
%<tlcOutputsFcnOfS39B189>\
%<tlcOutputsFcnOfS39B190>\
%<tlcOutputsFcnOfS39B191>\
/* Outport: '<Root>/Switches' incorporates:
 *  DataTypeConversion: '<S19>/Data Type Conversion112'
 *  DataTypeConversion: '<S19>/Data Type Conversion157'
 *  DataTypeConversion: '<S19>/Data Type Conversion28'
 *  DataTypeConversion: '<S19>/Data Type Conversion4'
 *  DataTypeConversion: '<S19>/Data Type Conversion52'
 *  DataTypeConversion: '<S19>/Data Type Conversion76'
 *  MATLAB Function: '<S19>/EncodeSwitches'
 */
/* MATLAB Function 'DAQ_WITH_SAFETY_IMU/DAQ/EtherCATNetwork/EtherCATRobotMicrostrain/EncodeSwitches': '<S30>:1' */
/* '<S30>:1:2' LimitSwitchesVec     = uint32(Switches); */
/* '<S30>:1:3' LimitSwitchesEncoded = double(EncodeSwitches(LimitSwitchesVec)); */
/*  From OSU code: */
/*  (See atrias/software/atrias_medulla_drivers/src/LegMedulla.cpp and */
/*  http://code.google.com/p/atrias/wiki/LimitSwitches; note error in Leg */
/*  A bits 4 and 5.) */
/*  */
/*  Hip */
/*  0 	Inside limit (relaxed position) */
/*  1 	Outside limit (fully extended) */
/*  */
/*  Leg A */
/*  0 	Negative motor limit */
/*  1 	Positive motor limit */
/*  2 	Negative spring deflection limit */
/*  3 	Positive spring deflection limit */
/*  4 	Leg extension limit */
/*  5 	Leg retraction limit */
/*  */
/*  Leg B */
/*  0 	Negative motor limit */
/*  1 	Positive motor limit */
/*  2 	Negative spring deflection limit */
/*  3 	Positive spring deflection limit */
/*  4 	Motor retraction limit */
/*  LimitSwitches is an integer which encodes the state of all of the limit switches */
/*  The bit encoding is as follows: */
/*    Right Shin (A) */
/*      LSB 0:	Negative motor limit */
/*          1: 	Positive motor limit */
/*          2: 	Negative spring deflection limit */
/*          3: 	Positive spring deflection limit */
/*          4: 	Leg retraction limit */
/*          5: 	Leg extension limit */
/*    Right Thigh (B) */
/*    	  6: 	Negative motor limit */
/*    	  7:	Positive motor limit */
/*    	  8:	Negative spring deflection limit */
/*    	  9:	Positive spring deflection limit */
/*    	 10:	Motor retraction limit */
/*    Right Hip */
/*    	 11:	Inside limit (relaxed position) */
/*    	 12:    Outside limit (fully extended) */
/*    Left Shin (A) */
/*         16:	Negative motor limit */
/*         17: 	Positive motor limit */
/*         18: 	Negative spring deflection limit */
/*         19: 	Positive spring deflection limit */
/*         20: 	Leg retraction limit */
/*         21: 	Leg extension limit */
/*    Left Thigh (B) */
/*    	 22: 	Negative motor limit */
/*    	 23:	Positive motor limit */
/*    	 24:	Negative spring deflection limit */
/*    	 25:	Positive spring deflection limit */
/*    	 26:	Motor retraction limit */
/*    Left Hip */
/*    	 27:	Inside limit (relaxed position) */
/*    	 28:	Outside limit (fully extended) */
/* 'EncodeSwitches:61' LimitSwitchesEncoded  = uint32(0); */
/* 'EncodeSwitches:62' LimitSwitchesEncoded  = bitor(LimitSwitchesEncoded, bitshift(LimitSwitchesVec(1), 0)); */
/*  Right Shin (A) */
/* 'EncodeSwitches:63' LimitSwitchesEncoded  = bitor(LimitSwitchesEncoded, bitshift(LimitSwitchesVec(2), 6)); */
/*  Right Thigh (B) */
/* 'EncodeSwitches:64' LimitSwitchesEncoded  = bitor(LimitSwitchesEncoded, bitshift(LimitSwitchesVec(3), 11)); */
/*  Right Hip */
/* 'EncodeSwitches:65' LimitSwitchesEncoded  = bitor(LimitSwitchesEncoded, bitshift(LimitSwitchesVec(4), 16)); */
/*  Left Shin (A) */
/* 'EncodeSwitches:66' LimitSwitchesEncoded  = bitor(LimitSwitchesEncoded, bitshift(LimitSwitchesVec(5), 22)); */
/*  Left Thigh (B) */
/* 'EncodeSwitches:67' LimitSwitchesEncoded  = bitor(LimitSwitchesEncoded, bitshift(LimitSwitchesVec(6), 27)); */
/*  Left Hip */
Walking01_withElmos_Y.Switches = (uint32_T)Walking01_withElmos_B.EtherCATRxVar21_b << 6U | Walking01_withElmos_B.EtherCATRxVar21 | (uint32_T)Walking01_withElmos_B.EtherCATRxVar18_j << 11U | (uint32_T)Walking01_withElmos_B.EtherCATRxVar21_o << 16U | (uint32_T)Walking01_withElmos_B.EtherCATRxVar21_m << 22U | (uint32_T)Walking01_withElmos_B.EtherCATRxVar18_h << 27U;
%<tlcOutputsFcnOfS39B194>\
/* DataTypeConversion: '<S19>/Data Type Conversion54' */
rtb_DigitalClock_a = Walking01_withElmos_B.EtherCATRxVar22;
%<tlcOutputsFcnOfS39B195>\
%<tlcOutputsFcnOfS39B196>\
%<tlcOutputsFcnOfS39B197>\
%<tlcOutputsFcnOfS39B198>\
%<tlcOutputsFcnOfS39B199>\
%<tlcOutputsFcnOfS39B200>\
/* Outport: '<Root>/MedullaState' incorporates:
 *  DataTypeConversion: '<S19>/Data Type Conversion105'
 *  DataTypeConversion: '<S19>/Data Type Conversion120'
 *  DataTypeConversion: '<S19>/Data Type Conversion17'
 *  DataTypeConversion: '<S19>/Data Type Conversion30'
 *  DataTypeConversion: '<S19>/Data Type Conversion6'
 *  DataTypeConversion: '<S19>/Data Type Conversion78'
 */
Walking01_withElmos_Y.MedullaState[0] = rtb_DigitalClock_a;
Walking01_withElmos_Y.MedullaState[1] = Walking01_withElmos_B.EtherCATRxVar22_o;
Walking01_withElmos_Y.MedullaState[2] = Walking01_withElmos_B.EtherCATRxVar19_o;
Walking01_withElmos_Y.MedullaState[3] = Walking01_withElmos_B.EtherCATRxVar22_g;
Walking01_withElmos_Y.MedullaState[4] = Walking01_withElmos_B.EtherCATRxVar22_a;
Walking01_withElmos_Y.MedullaState[5] = Walking01_withElmos_B.EtherCATRxVar19_i;
Walking01_withElmos_Y.MedullaState[6] = Walking01_withElmos_B.EtherCATRxVar18_k;
%<tlcOutputsFcnOfS39B202>\
/* DataTypeConversion: '<S19>/Data Type Conversion56' */
rtb_DigitalClock_a = Walking01_withElmos_B.EtherCATRxVar19_c;
%<tlcOutputsFcnOfS39B203>\
%<tlcOutputsFcnOfS39B204>\
%<tlcOutputsFcnOfS39B205>\
%<tlcOutputsFcnOfS39B206>\
%<tlcOutputsFcnOfS39B207>\
%<tlcOutputsFcnOfS39B208>\
/* Outport: '<Root>/ErrorFlags' incorporates:
 *  DataTypeConversion: '<S19>/Data Type Conversion106'
 *  DataTypeConversion: '<S19>/Data Type Conversion121'
 *  DataTypeConversion: '<S19>/Data Type Conversion19'
 *  DataTypeConversion: '<S19>/Data Type Conversion32'
 *  DataTypeConversion: '<S19>/Data Type Conversion8'
 *  DataTypeConversion: '<S19>/Data Type Conversion80'
 */
Walking01_withElmos_Y.ErrorFlags[0] = rtb_DigitalClock_a;
Walking01_withElmos_Y.ErrorFlags[1] = Walking01_withElmos_B.EtherCATRxVar19_m;
Walking01_withElmos_Y.ErrorFlags[2] = Walking01_withElmos_B.EtherCATRxVar16_bt;
Walking01_withElmos_Y.ErrorFlags[3] = Walking01_withElmos_B.EtherCATRxVar19_e;
Walking01_withElmos_Y.ErrorFlags[4] = Walking01_withElmos_B.EtherCATRxVar19_d;
Walking01_withElmos_Y.ErrorFlags[5] = Walking01_withElmos_B.EtherCATRxVar16_d;
Walking01_withElmos_Y.ErrorFlags[6] = Walking01_withElmos_B.EtherCATRxVar15_d;
/* Outport: '<Root>/Counters' incorporates:
 *  DataTypeConversion: '<S19>/Data Type Conversion107'
 *  DataTypeConversion: '<S19>/Data Type Conversion122'
 *  DataTypeConversion: '<S19>/Data Type Conversion18'
 *  DataTypeConversion: '<S19>/Data Type Conversion31'
 *  DataTypeConversion: '<S19>/Data Type Conversion55'
 *  DataTypeConversion: '<S19>/Data Type Conversion7'
 *  DataTypeConversion: '<S19>/Data Type Conversion79'
 */
Walking01_withElmos_Y.Counters[0] = Walking01_withElmos_B.EtherCATRxVar18;
Walking01_withElmos_Y.Counters[1] = Walking01_withElmos_B.EtherCATRxVar18_c;
Walking01_withElmos_Y.Counters[2] = Walking01_withElmos_B.EtherCATRxVar15_b;
Walking01_withElmos_Y.Counters[3] = Walking01_withElmos_B.EtherCATRxVar18_i;
Walking01_withElmos_Y.Counters[4] = Walking01_withElmos_B.EtherCATRxVar18_f;
Walking01_withElmos_Y.Counters[5] = Walking01_withElmos_B.EtherCATRxVar15_g;
Walking01_withElmos_Y.Counters[6] = Walking01_withElmos_B.EtherCATRxVar17_c;
%<tlcOutputsFcnOfS39B211>\
for (i = 0; i < 6; i++) {
    /* Outport: '<Root>/u_star' */
    Walking01_withElmos_Y.u_star[i] = rtb_u_star[i];
    /* Outport: '<Root>/u_pd' */
    Walking01_withElmos_Y.u_pd[i] = rtb_u_pd[i];
    /* DataTypeConversion: '<S19>/Data Type Conversion97' */
    Walking01_withElmos_B.DataTypeConversion97[i] = Walking01_withElmos_B.EtherCATInit[i];
    /* Outport: '<Root>/EtherCATStatus' */
    Walking01_withElmos_Y.EtherCATStatus[i] = Walking01_withElmos_B.DataTypeConversion97[i];
}
/* RateTransition: '<S5>/Rate Transition3' */
if (%<(LibIsSpecialSampleHit(1, 0))>) {
    Walking01_withElmos_B.RateTransition3 = Walking01_withElmos_B.LogicalOperator1;
}
/* End of RateTransition: '<S5>/Rate Transition3' */

/* Outport: '<Root>/AnomalyCounts' */
memcpy(&Walking01_withElmos_Y.AnomalyCounts[0], &rtb_ImpAsg_InsertedFor_ErrorC_g[0], 19U * sizeof(real_T));
Walking01_withElmos_Y.AnomalyCounts[19] = rtb_ImpAsg_InsertedFor_ErrorCou[0];
Walking01_withElmos_Y.AnomalyCounts[20] = rtb_ImpAsg_InsertedFor_ErrorCou[1];
Walking01_withElmos_Y.AnomalyCounts[21] = rtb_ImpAsg_InsertedFor_ErrorCou[2];
/* Outport: '<Root>/MicrostrainEulerAnglesClean' */
Walking01_withElmos_Y.MicrostrainEulerAnglesClean[0] = rtb_ImpAsg_InsertedFor_q_clean_[0];
Walking01_withElmos_Y.MicrostrainEulerAnglesClean[1] = rtb_ImpAsg_InsertedFor_q_clean_[1];
Walking01_withElmos_Y.MicrostrainEulerAnglesClean[2] = rtb_ImpAsg_InsertedFor_q_clean_[2];
/* Outport: '<Root>/MicrostrainEulerAngleDerivsClean' */
Walking01_withElmos_Y.MicrostrainEulerAngleDerivsClea[0] = rtb_ImpAsg_InsertedFor_dq_clean[0];
Walking01_withElmos_Y.MicrostrainEulerAngleDerivsClea[1] = rtb_ImpAsg_InsertedFor_dq_clean[1];
Walking01_withElmos_Y.MicrostrainEulerAngleDerivsClea[2] = rtb_ImpAsg_InsertedFor_dq_clean[2];
for (i = 0; i < 6; i++) {
    /* Gain: '<S1>/TorqueToCurrent' incorporates:
 *  DataTypeConversion: '<S204>/Data Type Conversion1'
 */
    rtb_current_unsat[i] = %<(SLibCG_SE(SLibCGIR_PV(406, 0, 39, 6, "", -1, "i", 0)))> * rtb_Switch2[i];
    /* Switch: '<S7>/Switch' incorporates:
 *  RelationalOperator: '<S7>/UpperRelop'
 */
    if (rtb_current_unsat[i] < Walking01_withElmos_ConstB.Gain) {
        rtb_Switch_n[i] = Walking01_withElmos_ConstB.Gain;
    } else {
        rtb_Switch_n[i] = rtb_current_unsat[i];
    }
    /* End of Switch: '<S7>/Switch' */

    /* Switch: '<S7>/Switch2' incorporates:
 *  Constant: '<S1>/CurrentSaturation'
 *  RelationalOperator: '<S7>/LowerRelop1'
 */
    if (rtb_current_unsat[i] > %<(SLibCG_SE(SLibCGIR_PV(405, 0, 39, 1, "", -1, "", 0)))>) {
        rtb_Switch2_p[i] = %<(SLibCG_SE(SLibCGIR_PV(405, 0, 39, 1, "", -1, "", 0)))>;
    } else {
        rtb_Switch2_p[i] = rtb_Switch_n[i];
    }
    /* End of Switch: '<S7>/Switch2' */
}
/* MATLAB Function: '<S200>/CheckError' incorporates:
 *  Constant: '<S204>/LegHipTorqueSat'
 *  UnitDelay: '<S200>/Unit Delay1'
 */
/* MATLAB Function 'Walking/Continuous/CheckError': '<S203>:1' */
/* '<S203>:1:4' ErrorCount = 0; */
Walking01_withElmos_B.ErrorCount = 0.0;
/* '<S203>:1:6' if all(TorqueSaturationLimits > 1) ... */
/* '<S203>:1:7'             && (norm(y, inf) > ControlParams.Supervisory.MaxError * pi/180 ... */
/* '<S203>:1:8'             || norm(dy, inf) > ControlParams.Supervisory.MaxErrorVel  * pi/180) */
guard1 = true;
i = 0;
exitg3 = false;
while ((!exitg3) && (i < 2)) {
    if ((Walking01_withElmos_P.LegHipTorqueLimit[i] > 1.0) == 0) {
        guard1 = false;
        exitg3 = true;
    } else {
        i++;
    }
}
if (guard1) {
    HalfMaxTicks_idx_0 = 0.0;
    i = 0;
    exitg3 = false;
    while ((!exitg3) && (i < 6)) {
        HalfMaxTicks_idx_1 = fabs(rtb_y[i]);
        if (rtIsNaN(HalfMaxTicks_idx_1)) {
            HalfMaxTicks_idx_0 = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
            exitg3 = true;
        } else {
            if (HalfMaxTicks_idx_1 > HalfMaxTicks_idx_0) {
                HalfMaxTicks_idx_0 = HalfMaxTicks_idx_1;
            }
            i++;
        }
    }
    if (HalfMaxTicks_idx_0 > Walking01_withElmos_B.ControlParams.Supervisory.MaxError * 3.1415926535897931 / 180.0) {
        rtb_Compare_pw = true;
    } else {
        HalfMaxTicks_idx_0 = 0.0;
        i = 0;
        guard1 = false;
        while ((!guard1) && (i < 6)) {
            HalfMaxTicks_idx_1 = fabs(rtb_dy[i]);
            if (rtIsNaN(HalfMaxTicks_idx_1)) {
                HalfMaxTicks_idx_0 = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
                guard1 = true;
            } else {
                if (HalfMaxTicks_idx_1 > HalfMaxTicks_idx_0) {
                    HalfMaxTicks_idx_0 = HalfMaxTicks_idx_1;
                }
                i++;
            }
        }
        if (HalfMaxTicks_idx_0 > Walking01_withElmos_B.ControlParams.Supervisory.MaxErrorVel * 3.1415926535897931 / 180.0) {
            rtb_Compare_pw = true;
        }
    }
    if (rtb_Compare_pw) {
        /* '<S203>:1:10' ErrorCount = ErrorCountIn + 1; */
        Walking01_withElmos_B.ErrorCount = Walking01_withElmos_DW.UnitDelay1_DSTATE_g + 1.0;
    }
}
/* '<S203>:1:12' Error = (ErrorCount > ControlParams.Supervisory.MaxErrorCount); */
%<tlcOutputsFcnOfS39B226>\
/* RelationalOperator: '<S9>/Compare' incorporates:
 *  Constant: '<S9>/Constant'
 */
rtb_Compare_pw = (Walking01_withElmos_B.TaskExecutionTime >= %<(SLibCG_SE(SLibCGIR_PV(407, 0, 39, 1, "", -1, "", 0)))>);
/* S-Function (sdspcount2): '<S21>/Counter' */
if (Walking01_withElmos_DW.Counter_Count_o < %<(SLibCG_SE(SLibCGIR_PV(963, 0, 39, 1, "", -1, "", 0)))>) {
    Walking01_withElmos_DW.Counter_Count_o++;
} else {
    Walking01_withElmos_DW.Counter_Count_o = 0U;
}
/* End of S-Function (sdspcount2): '<S21>/Counter' */
%<tlcOutputsFcnOfS39B228>\
%<tlcOutputsFcnOfS39B229>\
%<tlcOutputsFcnOfS39B230>\
%<tlcOutputsFcnOfS39B231>\
%<tlcOutputsFcnOfS39B232>\
%<tlcOutputsFcnOfS39B233>\
%<tlcOutputsFcnOfS39B234>\
%<tlcOutputsFcnOfS39B235>\
%<tlcOutputsFcnOfS39B236>\
%<tlcOutputsFcnOfS39B237>\
%<tlcOutputsFcnOfS39B238>\
%<tlcOutputsFcnOfS39B239>\
%<tlcOutputsFcnOfS39B240>\
%<tlcOutputsFcnOfS39B241>\
%<tlcOutputsFcnOfS39B242>\
%<tlcOutputsFcnOfS39B243>\
%<tlcOutputsFcnOfS39B244>\
%<tlcOutputsFcnOfS39B245>\
%<tlcOutputsFcnOfS39B246>\
%<tlcOutputsFcnOfS39B247>\
%<tlcOutputsFcnOfS39B248>\
%<tlcOutputsFcnOfS39B249>\
%<tlcOutputsFcnOfS39B250>\
%<tlcOutputsFcnOfS39B251>\
%<tlcOutputsFcnOfS39B252>\
%<tlcOutputsFcnOfS39B253>\
%<tlcOutputsFcnOfS39B254>\
%<tlcOutputsFcnOfS39B255>\
%<tlcOutputsFcnOfS39B256>\
%<tlcOutputsFcnOfS39B257>\
/* DiscreteFilter: '<S21>/Discrete Filter' */
/* MATLAB Function 'DAQ_WITH_SAFETY_IMU/DAQ/EtherCATNetwork/EtherCATRobotMicrostrain/ConvertThermistors': '<S29>:1' */
/* '<S29>:1:3' MEDULLA_ADC_MAX_VOLTS     = 2.70; */
/* '<S29>:1:4' MEDULLA_ADC_OFFSET_COUNTS = 172; */
/* '<S29>:1:6' processedADCValue = (adc_value - MEDULLA_ADC_OFFSET_COUNTS) * (MEDULLA_ADC_MAX_VOLTS/(4095.0)); */
/* '<S29>:1:7' Temperatures = zeros(30,1); */
/*  20141104 */
/*  Temperatures = (1.0./( (1.0/298.15) + (1.0/3988.0)*log(4700.0./((3.26./processedADCValue) - 1.0)/10000))) - 273.15; */
for (i = 0; i < 30; i++) {
    Walking01_withElmos_DW.DiscreteFilter_tmp[i] = (0.0 - %<(SLibCG_SE(SLibCGIR_PV(529, 0, 39, 2, "", -1, "", 1)))> * Walking01_withElmos_DW.DiscreteFilter_states[i]) / %<(SLibCG_SE(SLibCGIR_PV(529, 0, 39, 2, "", -1, "", 0)))>;
}
/* End of DiscreteFilter: '<S21>/Discrete Filter' */

/* MATLAB Function: '<S1>/SAFETY' incorporates:
 *  Constant: '<S199>/Constant'
 *  Constant: '<S1>/MedullaCommand'
 *  Logic: '<S1>/Logical Operator'
 *  Logic: '<S2>/Logical Operator'
 *  MATLAB Function: '<S200>/CheckError'
 *  RelationalOperator: '<S199>/Compare'
 *  UnitDelay: '<S1>/Unit Delay'
 *  UnitDelay: '<S1>/Unit Delay1'
 */
/* MATLAB Function 'DAQ_WITH_SAFETY_IMU/SAFETY': '<S6>:1' */
/* '<S6>:1:2' IMUCommand = 1; */
/*  Legacy. */
/* '<S6>:1:3' LogicVoltage = []; */
/*  Not currently used. */
/* '<S6>:1:4' SelectBasicLimits = 2; */
/* '<S6>:1:5' [MotorCurrentCommandSafe, MedullaCommandSafe, IMUCommandSafe, SafetyState, SafetyCountOut] = MARLOSafety(MotorCurrentCommand, MedullaCommand, IMUCommand, q, dq, Switches, Thermistors, LogicVoltage, SafetyCountIn, RequestSoftStop, SelectBasicLimits, FaultDetected); */
/*  Checks DAQ inputs and outputs to ensure that the commands sent to the */
/*  robot and the state reported by the robot are okay. Any invalid */
/*  commands to the robot are discarded, and default (zero) commands are */
/*  send instead. The cause of the failure can be traced by logging the */
/*  SafetyStateOut output. */
/*  */
/*  SafetyState is a double with integer value in the range 0 to */
/*  2^52-1. The 52 bits of the significand represent different safety */
/*  checks. Corresponding bits are set when a safety violation is */
/*  detected. If SafetyState is nonzero for more than SSMAX time steps, */
/*  the requested commands (MotorCurrentCommand, MedullaCommand, */
/*  IMUCommand) are replaced with the safe commands specified below. This */
/*  should cause the torque to be zero and the Medullas to enter the HALT */
/*  or ERROR state. */
/* 'MARLOSafety:20' if (nargin < 11) */
/*  SAFE OUTPUTS */
/*  THESE OUTPUTS ARE USED IN A HARD SHUTDOWN, AND CAUSE ALL COMMANDED */
/*  CURRENTS TO BE ZEROED AND THE MEDULLAS TO ENTER THE HALT STATE. */
/* 'MARLOSafety:27' MotorCurrentCommandSafe   = [0; 0; 0; 0; 0; 0]; */
for (i = 0; i < 6; i++) {
    L2fh[i] = 0.0;
}
/* 'MARLOSafety:28' MedullaCommandSafe        = 4; */
Walking01_withElmos_B.MedullaCommandSafe = 4.0;
/*  4=HALT */
/* 'MARLOSafety:29' IMUCommandSafe            = 0; */
/* 'MARLOSafety:30' SafetyState               = 0; */
/*  HARD SAFETY PARAMETERS */
/*  THE FOLLOWING PARAMETERS SPECIFY LIMITS WHICH, WHEN EXCEEDED, CAUSE */
/*  THE SAFETY TO LOCK DOWN THE ROBOT BY SENDING THE DEFAULT SAFE OUTPUTS */
/*  ABOVE. */
/* MAX_MOTOR_TEMP         = 80; %<"\% C"> */
/* 'MARLOSafety:37' MAX_MOTOR_CURRENT      = 120; */
/*  Amps  */
/* 'MARLOSafety:38' VALID_MEDULLA_COMMANDS = [0 1 2 3 4 5 6 7]; */
/* VALID_IMU_COMMANDS     = [0 1 2]; %<"\% Meaningless for now"> */
/*  END (HARD SAFETY PARAMETERS) */
/*  SOFT SAFETY PARAMETERS */
/*  THE FOLLOWING PARAMETERS SPECIFY LIMITS WHICH DO NOT CAUSE THE SAFETY */
/*  TO LOCK DOWN THE WHOLE ROBOT. INSTEAD, APPROPRIATE CURRENTS ARE */
/*  LIMITED TO PREVENT DRIVING THE MOTORS IN A MANNER THAT MIGHT CAUSE */
/*  DAMAGE */
/* MAX_HIP_ANGLE_SOFT           = 7; %<"\% degrees; mechanical limit is reported to be 20 degrees"> */
/* MIN_HIP_ANGLE_SOFT           = -15; %<"\% degrees; mechanical limit is reported to be -10 degrees "> */
/* SOFT_LIMIT_WIDTH_HIP         = 4;  %<"\% degrees"> */
/* SOFT_LIMIT_UMAX_HIP          = 15; %<"\% Amps"> */
/*  END (SOFT SAFETY PARAMETERS) */
/*  SAFETY STATE DEFINITION */
/* SS_DYNAMIC_STATE_LIMIT     = 2.^(0:39).'; %<"\% bits 1:40"> */
/* 'MARLOSafety:58' SS_DYNAMIC_STATE_LIMIT     = 2.^(0:33).'; */
/*  bits 1:40 */
/* 'MARLOSafety:59' SS_INVALID_MOTOR_COMMAND   = 2^40; */
/*  bit 41 */
/* 'MARLOSafety:60' SS_INVALID_MEDULLA_COMMAND = 2^41; */
/*  bit 42 */
/* SSMASK_INVALID_IMU_COMMAND     = 2^42; %<"\% bit 43"> */
/* SSMASK_OVERTEMP                = 2^43; %<"\% bit 44"> */
/*  CHECK ROBOT CONFIGURATION AND VELOCITY (HARD SAFETY) */
/* 'MARLOSafety:66' switch SelectBasicLimits */
/* 'MARLOSafety:67' case 2 */
/* 'MARLOSafety:68' violation = MARLOBasicSafetyLimits2(q, dq); */
/* 'MARLOSafety:72' SafetyState = sum(SS_DYNAMIC_STATE_LIMIT .* violation); */
%<(SLibCGCallSubFcn("Walking_MARLOBasicSafetyLimits2", ["rtb_q_clean", "Walking01_withElmos_B.dq_clean", "tmp"], 9, 72, 21))>;
for (ihi = 0; ihi < 34; ihi++) {
    x[ihi] = SS_DYNAMIC_STATE_LIMIT[ihi] * (real_T)tmp[ihi];
}
Walking01_withElmos_Y.SafetyState = x[0];
for (i = 0; i < 33; i++) {
    Walking01_withElmos_Y.SafetyState += x[i + 1];
}
/*  VALIDATE MOTOR COMMAND */
/*                     %<"\% Check for NaN and +Inf and -Inf"> */
/* 'MARLOSafety:75' if any(~isfinite(MotorCurrentCommand)) ...                    %<"\% Check for NaN and +Inf and -Inf"> */
/* 'MARLOSafety:76'             || any(abs(MotorCurrentCommand) > MAX_MOTOR_CURRENT) */
for (ihi = 0; ihi < 6; ihi++) {
    RefAngle_0[ihi] = !((!rtIsInf(rtb_Switch2_p[ihi])) && (!rtIsNaN(rtb_Switch2_p[ihi])));
}
if (%<(SLibCGCallSubFcn("Walking01_withElmos_any", ["RefAngle_0"], 9, 72, 0))>) {
    guard1_0 = true;
} else {
    for (i = 0; i < 6; i++) {
        RefAngle_0[i] = (fabs(rtb_Switch2_p[i]) > 120.0);
    }
    if (%<(SLibCGCallSubFcn("Walking01_withElmos_any", ["RefAngle_0"], 9, 72, 1))>) {
        guard1_0 = true;
    }
}
if (guard1_0) {
    /*  Check for extremely large commands */
    /* 'MARLOSafety:77' SafetyState = SafetyState + SS_INVALID_MOTOR_COMMAND; */
    Walking01_withElmos_Y.SafetyState += 1.099511627776E+12;
}
/*  VALIDATE MEDULLA COMMAND */
/* 'MARLOSafety:81' if any(~ismember(MedullaCommand, VALID_MEDULLA_COMMANDS)) */
guard1 = false;
c_previousEvent = 0;
i = 1;
ihi = 8;
exitg3 = false;
while ((!exitg3) && (ihi >= i)) {
    imid = ((i >> 1) + (ihi >> 1)) - 1;
    if (((i & 1) == 1) && ((ihi & 1) == 1)) {
        imid++;
    }
    HalfMaxTicks_idx_0 = fabs((real_T)imid / 2.0);
    if (HalfMaxTicks_idx_0 <= 2.2250738585072014E-308) {
        HalfMaxTicks_idx_0 = 4.94065645841247E-324;
    } else {
        frexp(HalfMaxTicks_idx_0, &exponent);
        HalfMaxTicks_idx_0 = ldexp(1.0, exponent - 53);
    }
    if (fabs((real_T)imid - Walking01_withElmos_P.MedullaCommand) < HalfMaxTicks_idx_0) {
        c_previousEvent = imid + 1;
        exitg3 = true;
    } else if (Walking01_withElmos_P.MedullaCommand < imid) {
        ihi = imid;
    } else {
        i = imid + 2;
    }
}
if (c_previousEvent > 0) {
    exitg3 = false;
    while ((!exitg3) && (c_previousEvent - 1 > 0)) {
        HalfMaxTicks_idx_0 = (real_T)(c_previousEvent - 2) / 2.0;
        if (HalfMaxTicks_idx_0 <= 2.2250738585072014E-308) {
            b_r = 4.94065645841247E-324;
        } else {
            frexp(HalfMaxTicks_idx_0, &b_exponent);
            b_r = ldexp(1.0, b_exponent - 53);
        }
        if (fabs((real_T)(c_previousEvent - 2) - Walking01_withElmos_P.MedullaCommand) < b_r) {
            c_previousEvent--;
        } else {
            exitg3 = true;
        }
    }
}
if (c_previousEvent > 0) {
    guard1 = true;
}
if (!(!guard1 == 0)) {
    /* 'MARLOSafety:82' SafetyState = SafetyState + SS_INVALID_MEDULLA_COMMAND; */
    Walking01_withElmos_Y.SafetyState += 2.199023255552E+12;
}
/*  VALIDATE IMU COMMAND */
/* if any(~ismember(IMUCommand, VALID_IMU_COMMANDS)) */
/*     SafetyState = SafetyState + SS_INVALID_IMU_COMMAND; */
/* end     */
/*  CHECK THERMISTORS     */
/*  TODO */
/*  CHECK ROBOT CONFIGURATION (SOFT SAFETY) */
/*  THE FOLLOWING LIMITS, WHEN EXCEEDED, DO *NOT* CAUSE THE SAFETY TO */
/*  LOCK DOWN THE WHOLE ROBOT. INSTEAD, APPROPRIATE CURENTS ARE LIMITED */
/*  TO PREVENT DRIVING THE MOTORS IN A MANNER THAT MIGHT CAUSE DAMAGE */
/*     %<"\%{"> */
/*     %<"\% BGB 2014-05-21"> */
/*     q3R = q(10); */
/*     q3L = q(13); */
/*      */
/*     MotorCurrentCommand(3) = continuouslySaturate(MotorCurrentCommand(3), q3R, [MIN_HIP_ANGLE_SOFT MAX_HIP_ANGLE_SOFT]*pi/180, SOFT_LIMIT_WIDTH_HIP*pi/180, SOFT_LIMIT_UMAX_HIP); */
/*     MotorCurrentCommand(6) = continuouslySaturate(MotorCurrentCommand(6), q3L, [MIN_HIP_ANGLE_SOFT MAX_HIP_ANGLE_SOFT]*pi/180, SOFT_LIMIT_WIDTH_HIP*pi/180, SOFT_LIMIT_UMAX_HIP); */
/*     %<"\% END BGB 2014-05-21"> */
/*     %<"\%}"> */
/*  IF EVERYTHING LOOKS OKAY (SAFETYSTATE==0), THEN PASS THE COMMANDS TO THE DAQ */
/* 'MARLOSafety:112' if (SafetyState==0) */
if (Walking01_withElmos_Y.SafetyState == 0.0) {
    /* 'MARLOSafety:113' SafetyCountOut = max(0, SafetyCountIn-1); */
    if ((0.0 >= Walking01_withElmos_DW.UnitDelay_DSTATE_k - 1.0) || rtIsNaN(Walking01_withElmos_DW.UnitDelay_DSTATE_k - 1.0)) {
        Walking01_withElmos_B.SafetyCountOut = 0.0;
    } else {
        Walking01_withElmos_B.SafetyCountOut = Walking01_withElmos_DW.UnitDelay_DSTATE_k - 1.0;
    }
} else {
    /* 'MARLOSafety:114' else */
    /* 'MARLOSafety:115' SafetyCountOut = min(SafetyCountIn+1, 10); */
    if (Walking01_withElmos_DW.UnitDelay_DSTATE_k + 1.0 <= 10.0) {
        Walking01_withElmos_B.SafetyCountOut = Walking01_withElmos_DW.UnitDelay_DSTATE_k + 1.0;
    } else {
        Walking01_withElmos_B.SafetyCountOut = 10.0;
    }
}
/* 'MARLOSafety:118' if (SafetyCountOut < 4) && (RequestSoftStop == 0) && (max(FaultDetected) == 0) */
if ((Walking01_withElmos_B.SafetyCountOut < 4.0) && (((Walking01_withElmos_B.ErrorCount > Walking01_withElmos_B.ControlParams.Supervisory.MaxErrorCount) || (Walking01_withElmos_B.ControlState.Error != %<(SLibCG_SE(SLibCGIR_PV(110, 0, 39, 1, "", -1, "", 0)))>) || rtb_Compare_pw) == 0)) {
    c_previousEvent = 1;
    HalfMaxTicks_idx_0 = Walking01_withElmos_DW.UnitDelay1_DSTATE_h[0];
    if (rtIsNaN(Walking01_withElmos_DW.UnitDelay1_DSTATE_h[0])) {
        i = 2;
        guard1 = false;
        while ((!guard1) && (i < 5)) {
            c_previousEvent = i;
            if (!rtIsNaN(Walking01_withElmos_DW.UnitDelay1_DSTATE_h[i - 1])) {
                HalfMaxTicks_idx_0 = Walking01_withElmos_DW.UnitDelay1_DSTATE_h[i - 1];
                guard1 = true;
            } else {
                i++;
            }
        }
    }
    if (c_previousEvent < 4) {
        while (c_previousEvent + 1 < 5) {
            if (Walking01_withElmos_DW.UnitDelay1_DSTATE_h[c_previousEvent] > HalfMaxTicks_idx_0) {
                HalfMaxTicks_idx_0 = Walking01_withElmos_DW.UnitDelay1_DSTATE_h[c_previousEvent];
            }
            c_previousEvent++;
        }
    }
    if (HalfMaxTicks_idx_0 == 0.0) {
        /* 'MARLOSafety:119' MotorCurrentCommandSafe = MotorCurrentCommand; */
        for (i = 0; i < 6; i++) {
            L2fh[i] = rtb_Switch2_p[i];
        }
        /* 'MARLOSafety:120' MedullaCommandSafe = MedullaCommand; */
        Walking01_withElmos_B.MedullaCommandSafe = Walking01_withElmos_P.MedullaCommand;
        /* 'MARLOSafety:121' IMUCommandSafe = IMUCommand; */
    }
}
/* End of MATLAB Function: '<S1>/SAFETY' */

/* Outport: '<Root>/MotorCurrentSafe' */
for (i = 0; i < 6; i++) {
    Walking01_withElmos_Y.MotorCurrentSafe[i] = L2fh[i];
}
/* End of Outport: '<Root>/MotorCurrentSafe' */

/* DataTypeConversion: '<S1>/Data Type Conversion1' */
rtb_DigitalClock_a = rtb_Compare_pw;
/* Outport: '<Root>/CPUOverloadRegulator' */
Walking01_withElmos_Y.CPUOverloadRegulator = rtb_DigitalClock_a;
%<tlcOutputsFcnOfS39B263>\
/* RateTransition: '<S1>/Rate Transition1' */
if (%<(LibIsSpecialSampleHit(1, 0))>) {
    Walking01_withElmos_B.RateTransition1_p = Walking01_withElmos_DW.RateTransition1_Buffer0_i;
}
/* End of RateTransition: '<S1>/Rate Transition1' */

/* RateTransition: '<S1>/Rate Transition' */
if (%<(LibIsSpecialSampleHit(2, 0))>) {
    Walking01_withElmos_B.RateTransition = Walking01_withElmos_DW.RateTransition_Buffer0;
}
/* End of RateTransition: '<S1>/Rate Transition' */

/* Outport: '<Root>/CPUOverloadCounter' incorporates:
 *  DataTypeConversion: '<S1>/Data Type Conversion'
 */
Walking01_withElmos_Y.CPUOverloadCounter[0] = Walking01_withElmos_B.GetOverloadCounter;
Walking01_withElmos_Y.CPUOverloadCounter[1] = Walking01_withElmos_B.RateTransition1_p;
Walking01_withElmos_Y.CPUOverloadCounter[2] = Walking01_withElmos_B.RateTransition;
/* Outport: '<Root>/MedullaCommandSafe' */
Walking01_withElmos_Y.MedullaCommandSafe = Walking01_withElmos_B.MedullaCommandSafe;
/* Outport: '<Root>/EncoderAnglesDirty' */
memcpy(&Walking01_withElmos_Y.EncoderAnglesDirty[0], &Walking01_withElmos_B.VectorConcatenate_m[0], 19U * sizeof(real_T));
%<tlcOutputsFcnOfS39B269>\
/* Fcn: '<S71>/Fcn' incorporates:
 *  Constant: '<S35>/MaxRatedCurrent'
 *  DataTypeConversion: '<S35>/Data Type Conversion3'
 *  SignalConversion: '<S71>/ConcatBufferAtVector ConcatenateIn2'
 */
rtb_DigitalClock_a = (real_T)Walking01_withElmos_B.EtherCATPDOReceive * %<(SLibCG_SE(SLibCGIR_PV(535, 0, 39, 1, "", -1, "", 0)))> / 1000.0;
%<tlcOutputsFcnOfS39B271>\
%<tlcOutputsFcnOfS39B273>\
%<tlcOutputsFcnOfS39B275>\
/* Outport: '<Root>/CurrentActual' incorporates:
 *  Constant: '<S34>/MaxRatedCurrent'
 *  Constant: '<S36>/MaxRatedCurrent'
 *  Constant: '<S37>/MaxRatedCurrent'
 *  DataTypeConversion: '<S34>/Data Type Conversion2'
 *  DataTypeConversion: '<S36>/Data Type Conversion2'
 *  DataTypeConversion: '<S37>/Data Type Conversion2'
 *  Fcn: '<S107>/Fcn'
 *  Fcn: '<S53>/Fcn'
 *  Fcn: '<S89>/Fcn'
 *  SignalConversion: '<S107>/ConcatBufferAtVector ConcatenateIn2'
 *  SignalConversion: '<S53>/ConcatBufferAtVector ConcatenateIn2'
 *  SignalConversion: '<S89>/ConcatBufferAtVector ConcatenateIn2'
 */
Walking01_withElmos_Y.CurrentActual[0] = rtb_DigitalClock_a;
Walking01_withElmos_Y.CurrentActual[1] = (real_T)Walking01_withElmos_B.EtherCATPDOReceive_b * %<(SLibCG_SE(SLibCGIR_PV(535, 0, 39, 1, "", -1, "", 0)))> / 1000.0;
Walking01_withElmos_Y.CurrentActual[2] = (real_T)Walking01_withElmos_B.EtherCATPDOReceive_n * %<(SLibCG_SE(SLibCGIR_PV(535, 0, 39, 1, "", -1, "", 0)))> / 1000.0;
Walking01_withElmos_Y.CurrentActual[3] = (real_T)Walking01_withElmos_B.EtherCATPDOReceive_nq * %<(SLibCG_SE(SLibCGIR_PV(535, 0, 39, 1, "", -1, "", 0)))> / 1000.0;
%<tlcOutputsFcnOfS39B278>\
/* Fcn: '<S72>/Fcn' incorporates:
 *  Constant: '<S35>/MaxRatedCurrent'
 *  DataTypeConversion: '<S35>/Data Type Conversion2'
 *  SignalConversion: '<S72>/ConcatBufferAtVector ConcatenateIn2'
 */
rtb_DigitalClock_a = (real_T)Walking01_withElmos_B.EtherCATPDOReceive3 * %<(SLibCG_SE(SLibCGIR_PV(535, 0, 39, 1, "", -1, "", 0)))> / 1000.0;
%<tlcOutputsFcnOfS39B279>\
%<tlcOutputsFcnOfS39B280>\
%<tlcOutputsFcnOfS39B281>\
/* Outport: '<Root>/CurrentDemanded' incorporates:
 *  Constant: '<S34>/MaxRatedCurrent'
 *  Constant: '<S36>/MaxRatedCurrent'
 *  Constant: '<S37>/MaxRatedCurrent'
 *  DataTypeConversion: '<S34>/Data Type Conversion3'
 *  DataTypeConversion: '<S36>/Data Type Conversion3'
 *  DataTypeConversion: '<S37>/Data Type Conversion3'
 *  Fcn: '<S108>/Fcn'
 *  Fcn: '<S54>/Fcn'
 *  Fcn: '<S90>/Fcn'
 *  SignalConversion: '<S108>/ConcatBufferAtVector ConcatenateIn2'
 *  SignalConversion: '<S54>/ConcatBufferAtVector ConcatenateIn2'
 *  SignalConversion: '<S90>/ConcatBufferAtVector ConcatenateIn2'
 */
Walking01_withElmos_Y.CurrentDemanded[0] = rtb_DigitalClock_a;
Walking01_withElmos_Y.CurrentDemanded[1] = (real_T)Walking01_withElmos_B.EtherCATPDOReceive3_b * %<(SLibCG_SE(SLibCGIR_PV(535, 0, 39, 1, "", -1, "", 0)))> / 1000.0;
Walking01_withElmos_Y.CurrentDemanded[2] = (real_T)Walking01_withElmos_B.EtherCATPDOReceive3_j * %<(SLibCG_SE(SLibCGIR_PV(535, 0, 39, 1, "", -1, "", 0)))> / 1000.0;
Walking01_withElmos_Y.CurrentDemanded[3] = (real_T)Walking01_withElmos_B.EtherCATPDOReceive3_n * %<(SLibCG_SE(SLibCGIR_PV(535, 0, 39, 1, "", -1, "", 0)))> / 1000.0;
%<tlcOutputsFcnOfS39B283>\
/* DataTypeConversion: '<S35>/Data Type Conversion42' */
rtb_DigitalClock_a = Walking01_withElmos_B.EtherCATPDOReceive1;
%<tlcOutputsFcnOfS39B284>\
%<tlcOutputsFcnOfS39B285>\
%<tlcOutputsFcnOfS39B286>\
/* Outport: '<Root>/HallPosition' incorporates:
 *  DataTypeConversion: '<S34>/Data Type Conversion42'
 *  DataTypeConversion: '<S36>/Data Type Conversion42'
 *  DataTypeConversion: '<S37>/Data Type Conversion42'
 */
Walking01_withElmos_Y.HallPosition[0] = rtb_DigitalClock_a;
Walking01_withElmos_Y.HallPosition[1] = Walking01_withElmos_B.EtherCATPDOReceive1_f;
Walking01_withElmos_Y.HallPosition[2] = Walking01_withElmos_B.EtherCATPDOReceive1_n;
Walking01_withElmos_Y.HallPosition[3] = Walking01_withElmos_B.EtherCATPDOReceive1_i;
%<tlcOutputsFcnOfS39B288>\
/* DataTypeConversion: '<S35>/Data Type Conversion46' */
rtb_DigitalClock_a = Walking01_withElmos_B.EtherCATPDOReceive4;
%<tlcOutputsFcnOfS39B289>\
%<tlcOutputsFcnOfS39B290>\
%<tlcOutputsFcnOfS39B291>\
/* Outport: '<Root>/HallVelocity' incorporates:
 *  DataTypeConversion: '<S34>/Data Type Conversion46'
 *  DataTypeConversion: '<S36>/Data Type Conversion46'
 *  DataTypeConversion: '<S37>/Data Type Conversion46'
 */
Walking01_withElmos_Y.HallVelocity[0] = rtb_DigitalClock_a;
Walking01_withElmos_Y.HallVelocity[1] = Walking01_withElmos_B.EtherCATPDOReceive4_d;
Walking01_withElmos_Y.HallVelocity[2] = Walking01_withElmos_B.EtherCATPDOReceive4_b;
Walking01_withElmos_Y.HallVelocity[3] = Walking01_withElmos_B.EtherCATPDOReceive4_p;
%<tlcOutputsFcnOfS39B293>\
/* RelationalOperator: '<S77>/Compare' incorporates:
 *  Constant: '<S77>/Constant'
 *  S-Function (sfix_bitop): '<S67>/Bitwise Operator'
 */
Walking01_withElmos_B.Compare_n = ((Walking01_withElmos_B.EtherCATPDOReceive5 & %<(SLibCG_SE(SLibCGIR_PV(952, 0, 39, 1, "", -1, "", 0)))>) == %<(SLibCG_SE(SLibCGIR_PV(953, 0, 39, 1, "", -1, "", 0)))>);
/* RelationalOperator: '<S78>/Compare' incorporates:
 *  Constant: '<S78>/Constant'
 *  S-Function (sfix_bitop): '<S68>/Bitwise Operator'
 */
Walking01_withElmos_B.Compare_lw = ((Walking01_withElmos_B.EtherCATPDOReceive5 & %<(SLibCG_SE(SLibCGIR_PV(954, 0, 39, 1, "", -1, "", 0)))>) == %<(SLibCG_SE(SLibCGIR_PV(955, 0, 39, 1, "", -1, "", 0)))>);
/* RelationalOperator: '<S79>/Compare' incorporates:
 *  Constant: '<S79>/Constant'
 *  S-Function (sfix_bitop): '<S69>/Bitwise Operator'
 */
Walking01_withElmos_B.Compare_a = ((Walking01_withElmos_B.EtherCATPDOReceive5 & %<(SLibCG_SE(SLibCGIR_PV(954, 0, 39, 1, "", -1, "", 0)))>) == %<(SLibCG_SE(SLibCGIR_PV(956, 0, 39, 1, "", -1, "", 0)))>);
/* RelationalOperator: '<S80>/Compare' incorporates:
 *  Constant: '<S80>/Constant'
 *  S-Function (sfix_bitop): '<S70>/Bitwise Operator'
 */
Walking01_withElmos_B.Compare_e = ((Walking01_withElmos_B.EtherCATPDOReceive5 & %<(SLibCG_SE(SLibCGIR_PV(957, 0, 39, 1, "", -1, "", 0)))>) == %<(SLibCG_SE(SLibCGIR_PV(957, 0, 39, 1, "", -1, "", 0)))>);
%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[20], "Output",0)
/* Chart: '<S35>/Chart' */
%if SLibCG_SystemFcnArgAccessed("Walking01_withElmos_Chart",20,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("Walking01_withElmos_Chart", ["%<_modelSS>", "Walking01_withElmos_B.Compare_n", "Walking01_withElmos_B.Compare_a", "Walking01_withElmos_B.Compare_e", "Walking01_withElmos_B.MedullaCommandSafe", "&Walking01_withElmos_B.sf_Chart", "&Walking01_withElmos_DW.sf_Chart"], 20, 0, 3, 0, 3, 39)>\
%endif
%<tlcOutputsFcnOfS39B299>\
/* RelationalOperator: '<S113>/Compare' incorporates:
 *  Constant: '<S113>/Constant'
 *  S-Function (sfix_bitop): '<S103>/Bitwise Operator'
 */
Walking01_withElmos_B.Compare_p = ((Walking01_withElmos_B.EtherCATPDOReceive5_d & %<(SLibCG_SE(SLibCGIR_PV(952, 0, 39, 1, "", -1, "", 0)))>) == %<(SLibCG_SE(SLibCGIR_PV(953, 0, 39, 1, "", -1, "", 0)))>);
/* RelationalOperator: '<S114>/Compare' incorporates:
 *  Constant: '<S114>/Constant'
 *  S-Function (sfix_bitop): '<S104>/Bitwise Operator'
 */
Walking01_withElmos_B.Compare_i = ((Walking01_withElmos_B.EtherCATPDOReceive5_d & %<(SLibCG_SE(SLibCGIR_PV(954, 0, 39, 1, "", -1, "", 0)))>) == %<(SLibCG_SE(SLibCGIR_PV(955, 0, 39, 1, "", -1, "", 0)))>);
/* RelationalOperator: '<S115>/Compare' incorporates:
 *  Constant: '<S115>/Constant'
 *  S-Function (sfix_bitop): '<S105>/Bitwise Operator'
 */
Walking01_withElmos_B.Compare_j = ((Walking01_withElmos_B.EtherCATPDOReceive5_d & %<(SLibCG_SE(SLibCGIR_PV(954, 0, 39, 1, "", -1, "", 0)))>) == %<(SLibCG_SE(SLibCGIR_PV(956, 0, 39, 1, "", -1, "", 0)))>);
/* RelationalOperator: '<S116>/Compare' incorporates:
 *  Constant: '<S116>/Constant'
 *  S-Function (sfix_bitop): '<S106>/Bitwise Operator'
 */
Walking01_withElmos_B.Compare_c = ((Walking01_withElmos_B.EtherCATPDOReceive5_d & %<(SLibCG_SE(SLibCGIR_PV(957, 0, 39, 1, "", -1, "", 0)))>) == %<(SLibCG_SE(SLibCGIR_PV(957, 0, 39, 1, "", -1, "", 0)))>);
%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[20], "Output",0)
/* Chart: '<S37>/Chart' */
%if SLibCG_SystemFcnArgAccessed("Walking01_withElmos_Chart",20,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("Walking01_withElmos_Chart", ["%<_modelSS>", "Walking01_withElmos_B.Compare_p", "Walking01_withElmos_B.Compare_j", "Walking01_withElmos_B.Compare_c", "Walking01_withElmos_B.MedullaCommandSafe", "&Walking01_withElmos_B.sf_Chart_b", "&Walking01_withElmos_DW.sf_Chart_b"], 20, 1, 3, 0, 3, 39)>\
%endif
%<tlcOutputsFcnOfS39B305>\
/* RelationalOperator: '<S59>/Compare' incorporates:
 *  Constant: '<S59>/Constant'
 *  S-Function (sfix_bitop): '<S49>/Bitwise Operator'
 */
Walking01_withElmos_B.Compare_pz = ((Walking01_withElmos_B.EtherCATPDOReceive5_h & %<(SLibCG_SE(SLibCGIR_PV(952, 0, 39, 1, "", -1, "", 0)))>) == %<(SLibCG_SE(SLibCGIR_PV(953, 0, 39, 1, "", -1, "", 0)))>);
/* RelationalOperator: '<S60>/Compare' incorporates:
 *  Constant: '<S60>/Constant'
 *  S-Function (sfix_bitop): '<S50>/Bitwise Operator'
 */
Walking01_withElmos_B.Compare_h = ((Walking01_withElmos_B.EtherCATPDOReceive5_h & %<(SLibCG_SE(SLibCGIR_PV(954, 0, 39, 1, "", -1, "", 0)))>) == %<(SLibCG_SE(SLibCGIR_PV(955, 0, 39, 1, "", -1, "", 0)))>);
/* RelationalOperator: '<S61>/Compare' incorporates:
 *  Constant: '<S61>/Constant'
 *  S-Function (sfix_bitop): '<S51>/Bitwise Operator'
 */
Walking01_withElmos_B.Compare_e5 = ((Walking01_withElmos_B.EtherCATPDOReceive5_h & %<(SLibCG_SE(SLibCGIR_PV(954, 0, 39, 1, "", -1, "", 0)))>) == %<(SLibCG_SE(SLibCGIR_PV(956, 0, 39, 1, "", -1, "", 0)))>);
/* RelationalOperator: '<S62>/Compare' incorporates:
 *  Constant: '<S62>/Constant'
 *  S-Function (sfix_bitop): '<S52>/Bitwise Operator'
 */
Walking01_withElmos_B.Compare_g = ((Walking01_withElmos_B.EtherCATPDOReceive5_h & %<(SLibCG_SE(SLibCGIR_PV(957, 0, 39, 1, "", -1, "", 0)))>) == %<(SLibCG_SE(SLibCGIR_PV(957, 0, 39, 1, "", -1, "", 0)))>);
/* Chart: '<S34>/Chart' */
/* Gateway: DAQ_WITH_SAFETY_IMU/DAQ/EtherCATNetwork/EtherCATRobotMicrostrain/LegElmo_1L/Chart */
Walking01_withElmos_DW.sfEvent_a = -1;
/* During: DAQ_WITH_SAFETY_IMU/DAQ/EtherCATNetwork/EtherCATRobotMicrostrain/LegElmo_1L/Chart */
if (Walking01_withElmos_DW.is_active_c20_Walking01_withElm == 0U) {
    /* Entry: DAQ_WITH_SAFETY_IMU/DAQ/EtherCATNetwork/EtherCATRobotMicrostrain/LegElmo_1L/Chart */
    Walking01_withElmos_DW.is_active_c20_Walking01_withElm = 1U;
    /* Entry Internal: DAQ_WITH_SAFETY_IMU/DAQ/EtherCATNetwork/EtherCATRobotMicrostrain/LegElmo_1L/Chart */
    /* Transition: '<S45>:78' */
    Walking01_withElmos_DW.is_c20_Walking01_withElmos = Walking01_withElmos_IN_Start1_d;
    /* Entry 'Start1': '<S45>:79' */
    /* '<S45>:79:1' ControlWordIndex = 0; */
    Walking01_withElmos_B.ControlWordIndex_j = 0.0;
    /* '<S45>:79:1' EnableTargetTorque = 0; */
    Walking01_withElmos_B.EnableTargetTorque_f = 0.0;
    /* '<S45>:79:3' FaultDetected = 0; */
    Walking01_withElmos_B.FaultDetected_n = 0.0;
} else {
    switch (Walking01_withElmos_DW.is_c20_Walking01_withElmos) {
      case Walking01_wit_IN_FaultRunning_g:
        /* During 'FaultRunning': '<S45>:81' */
        break;
      case Walking01_w_IN_Initialization_e:
        /* During 'Initialization': '<S45>:87' */
        /* '<S45>:71:1' sf_internal_predicateOutput = ... */
        /* '<S45>:71:1' MedullaCommand == 4 || MedullaCommand == 5; */
        if ((Walking01_withElmos_B.MedullaCommandSafe == 4.0) || (Walking01_withElmos_B.MedullaCommandSafe == 5.0)) {
            /* Transition: '<S45>:71' */
            /* Exit Internal 'Initialization': '<S45>:87' */
            Walking01_withElmos_DW.is_Initialization_h = Walking01__IN_NO_ACTIVE_CHILD_j;
            Walking01_withElmos_DW.is_c20_Walking01_withElmos = Walking01_wit_IN_FaultRunning_g;
            /* Entry 'FaultRunning': '<S45>:81' */
            /* '<S45>:81:1' ControlWordIndex = 1; */
            Walking01_withElmos_B.ControlWordIndex_j = 1.0;
            /* '<S45>:81:1' EnableTargetTorque = 0; */
            Walking01_withElmos_B.EnableTargetTorque_f = 0.0;
            /* '<S45>:81:3' FaultDetected = 1; */
            Walking01_withElmos_B.FaultDetected_n = 1.0;
        } else {
            switch (Walking01_withElmos_DW.is_Initialization_h) {
              case Walking01_withElmos_IN_Fault_d:
                /* During 'Fault': '<S45>:72' */
                /* '<S45>:83:1' sf_internal_predicateOutput = ... */
                /* '<S45>:83:1' Timeout >=20; */
                if (Walking01_withElmos_DW.Timeout_i >= 20.0) {
                    /* Transition: '<S45>:83' */
                    Walking01_withElmos_DW.is_Initialization_h = Walking01_withElmos_IN_Fault_d;
                    /* Entry 'Fault': '<S45>:72' */
                    /* '<S45>:72:1' ControlWordIndex = 3; */
                    Walking01_withElmos_B.ControlWordIndex_j = 3.0;
                    /* '<S45>:72:1' EnableTargetTorque = 0; */
                    Walking01_withElmos_B.EnableTargetTorque_f = 0.0;
                    /* '<S45>:72:3' Timeout = 0; */
                    Walking01_withElmos_DW.Timeout_i = 0.0;
                } else {
                    /* '<S45>:92:1' sf_internal_predicateOutput = ... */
                    /* '<S45>:92:1' SwitchOnDisabledMode == 1; */
                    if (Walking01_withElmos_B.Compare_pz == 1) {
                        /* Transition: '<S45>:92' */
                        Walking01_withElmos_DW.is_Initialization_h = Walking01_IN_SwitchOnDisabled_e;
                        /* Entry 'SwitchOnDisabled': '<S45>:73' */
                        /* '<S45>:73:1' ControlWordIndex = 1; */
                        Walking01_withElmos_B.ControlWordIndex_j = 1.0;
                        /* '<S45>:73:1' Timeout = 0; */
                        Walking01_withElmos_DW.Timeout_i = 0.0;
                        /* '<S45>:73:3' EnableTargetTorque = 0; */
                        Walking01_withElmos_B.EnableTargetTorque_f = 0.0;
                    } else {
                        /* '<S45>:72:4' Timeout = Timeout + 1; */
                        Walking01_withElmos_DW.Timeout_i++;
                        /* '<S45>:72:5' ControlWordIndex = 0; */
                        Walking01_withElmos_B.ControlWordIndex_j = 0.0;
                    }
                }
                break;
              case Walking01__IN_ReadyToSwitchOn_n:
                /* During 'ReadyToSwitchOn': '<S45>:91' */
                /* '<S45>:90:1' sf_internal_predicateOutput = ... */
                /* '<S45>:90:1' FaultMode == 1; */
                if (Walking01_withElmos_B.Compare_g == 1) {
                    /* Transition: '<S45>:90' */
                    Walking01_withElmos_DW.is_Initialization_h = Walking01_withElmos_IN_Fault_d;
                    /* Entry 'Fault': '<S45>:72' */
                    /* '<S45>:72:1' ControlWordIndex = 3; */
                    Walking01_withElmos_B.ControlWordIndex_j = 3.0;
                    /* '<S45>:72:1' EnableTargetTorque = 0; */
                    Walking01_withElmos_B.EnableTargetTorque_f = 0.0;
                    /* '<S45>:72:3' Timeout = 0; */
                    Walking01_withElmos_DW.Timeout_i = 0.0;
                } else {
                    /* '<S45>:94:1' sf_internal_predicateOutput = ... */
                    /* '<S45>:94:1' SwitchOnDisabledMode == 1; */
                    if (Walking01_withElmos_B.Compare_pz == 1) {
                        /* Transition: '<S45>:94' */
                        Walking01_withElmos_DW.is_Initialization_h = Walking01_IN_SwitchOnDisabled_e;
                        /* Entry 'SwitchOnDisabled': '<S45>:73' */
                        /* '<S45>:73:1' ControlWordIndex = 1; */
                        Walking01_withElmos_B.ControlWordIndex_j = 1.0;
                        /* '<S45>:73:1' Timeout = 0; */
                        Walking01_withElmos_DW.Timeout_i = 0.0;
                        /* '<S45>:73:3' EnableTargetTorque = 0; */
                        Walking01_withElmos_B.EnableTargetTorque_f = 0.0;
                    } else {
                        /* Transition: '<S45>:74' */
                        Walking01_withElmos_DW.is_Initialization_h = Walking01__IN_NO_ACTIVE_CHILD_j;
                        Walking01_withElmos_DW.is_c20_Walking01_withElmos = Walking01_withElmo_IN_Running_j;
                        /* Entry 'Running': '<S45>:76' */
                        /* '<S45>:76:1' ControlWordIndex = 2; */
                        Walking01_withElmos_B.ControlWordIndex_j = 2.0;
                        /* '<S45>:76:1' EnableTargetTorque = 1; */
                        Walking01_withElmos_B.EnableTargetTorque_f = 1.0;
                    }
                }
                break;
              default:
                /* During 'SwitchOnDisabled': '<S45>:73' */
                /* '<S45>:75:1' sf_internal_predicateOutput = ... */
                /* '<S45>:75:1' ReadyToSwitchOnMode == 1; */
                if (Walking01_withElmos_B.Compare_e5 == 1) {
                    /* Transition: '<S45>:75' */
                    Walking01_withElmos_DW.is_Initialization_h = Walking01__IN_ReadyToSwitchOn_n;
                    /* Entry 'ReadyToSwitchOn': '<S45>:91' */
                    /* '<S45>:91:1' ControlWordIndex = 2; */
                    Walking01_withElmos_B.ControlWordIndex_j = 2.0;
                    /* '<S45>:91:1' Timeout = 0; */
                    Walking01_withElmos_DW.Timeout_i = 0.0;
                    /* '<S45>:91:3' EnableTargetTorque = 0; */
                    Walking01_withElmos_B.EnableTargetTorque_f = 0.0;
                } else {
                    /* '<S45>:86:1' sf_internal_predicateOutput = ... */
                    /* '<S45>:86:1' FaultMode == 1; */
                    if (Walking01_withElmos_B.Compare_g == 1) {
                        /* Transition: '<S45>:86' */
                        Walking01_withElmos_DW.is_Initialization_h = Walking01_withElmos_IN_Fault_d;
                        /* Entry 'Fault': '<S45>:72' */
                        /* '<S45>:72:1' ControlWordIndex = 3; */
                        Walking01_withElmos_B.ControlWordIndex_j = 3.0;
                        /* '<S45>:72:1' EnableTargetTorque = 0; */
                        Walking01_withElmos_B.EnableTargetTorque_f = 0.0;
                        /* '<S45>:72:3' Timeout = 0; */
                        Walking01_withElmos_DW.Timeout_i = 0.0;
                    } else {
                        /* '<S45>:73:3' Timeout = Timeout + 1; */
                        Walking01_withElmos_DW.Timeout_i++;
                    }
                }
                break;
            }
        }
        break;
      case Walking01_withElmo_IN_Running_j:
        /* During 'Running': '<S45>:76' */
        /* '<S45>:77:1' sf_internal_predicateOutput = ... */
        /* '<S45>:77:1' FaultMode == 1; */
        if (Walking01_withElmos_B.Compare_g == 1) {
            /* Transition: '<S45>:77' */
            Walking01_withElmos_DW.is_c20_Walking01_withElmos = Walking01_wit_IN_FaultRunning_g;
            /* Entry 'FaultRunning': '<S45>:81' */
            /* '<S45>:81:1' ControlWordIndex = 1; */
            Walking01_withElmos_B.ControlWordIndex_j = 1.0;
            /* '<S45>:81:1' EnableTargetTorque = 0; */
            Walking01_withElmos_B.EnableTargetTorque_f = 0.0;
            /* '<S45>:81:3' FaultDetected = 1; */
            Walking01_withElmos_B.FaultDetected_n = 1.0;
        } else {
            /* '<S45>:89:1' sf_internal_predicateOutput = ... */
            /* '<S45>:89:1' MedullaCommand == 4 || MedullaCommand == 5; */
            if ((Walking01_withElmos_B.MedullaCommandSafe == 4.0) || (Walking01_withElmos_B.MedullaCommandSafe == 5.0)) {
                /* Transition: '<S45>:89' */
                Walking01_withElmos_DW.is_c20_Walking01_withElmos = Walking01_wit_IN_FaultRunning_g;
                /* Entry 'FaultRunning': '<S45>:81' */
                /* '<S45>:81:1' ControlWordIndex = 1; */
                Walking01_withElmos_B.ControlWordIndex_j = 1.0;
                /* '<S45>:81:1' EnableTargetTorque = 0; */
                Walking01_withElmos_B.EnableTargetTorque_f = 0.0;
                /* '<S45>:81:3' FaultDetected = 1; */
                Walking01_withElmos_B.FaultDetected_n = 1.0;
            }
        }
        break;
      default:
        /* During 'Start1': '<S45>:79' */
        /* '<S45>:93:1' sf_internal_predicateOutput = ... */
        /* '<S45>:93:1' MedullaCommand == 4 || MedullaCommand == 5; */
        if ((Walking01_withElmos_B.MedullaCommandSafe == 4.0) || (Walking01_withElmos_B.MedullaCommandSafe == 5.0)) {
            /* Transition: '<S45>:93' */
            Walking01_withElmos_DW.is_c20_Walking01_withElmos = Walking01_wit_IN_FaultRunning_g;
            /* Entry 'FaultRunning': '<S45>:81' */
            /* '<S45>:81:1' ControlWordIndex = 1; */
            Walking01_withElmos_B.ControlWordIndex_j = 1.0;
            /* '<S45>:81:1' EnableTargetTorque = 0; */
            Walking01_withElmos_B.EnableTargetTorque_f = 0.0;
            /* '<S45>:81:3' FaultDetected = 1; */
            Walking01_withElmos_B.FaultDetected_n = 1.0;
        } else {
            /* '<S45>:85:1' sf_internal_predicateOutput = ... */
            /* '<S45>:85:1' MedullaCommand == 2; */
            if (Walking01_withElmos_B.MedullaCommandSafe == 2.0) {
                /* Transition: '<S45>:85' */
                Walking01_withElmos_DW.is_c20_Walking01_withElmos = Walking01_w_IN_Initialization_e;
                /* Entry Internal 'Initialization': '<S45>:87' */
                /* Transition: '<S45>:88' */
                Walking01_withElmos_DW.is_Initialization_h = Walking01_IN_SwitchOnDisabled_e;
                /* Entry 'SwitchOnDisabled': '<S45>:73' */
                /* '<S45>:73:1' ControlWordIndex = 1; */
                Walking01_withElmos_B.ControlWordIndex_j = 1.0;
                /* '<S45>:73:1' Timeout = 0; */
                Walking01_withElmos_DW.Timeout_i = 0.0;
                /* '<S45>:73:3' EnableTargetTorque = 0; */
                Walking01_withElmos_B.EnableTargetTorque_f = 0.0;
            }
        }
        break;
    }
}
/* End of Chart: '<S34>/Chart' */
%<tlcOutputsFcnOfS39B311>\
/* RelationalOperator: '<S95>/Compare' incorporates:
 *  Constant: '<S95>/Constant'
 *  S-Function (sfix_bitop): '<S85>/Bitwise Operator'
 */
Walking01_withElmos_B.Compare_n4 = ((Walking01_withElmos_B.EtherCATPDOReceive5_p & %<(SLibCG_SE(SLibCGIR_PV(952, 0, 39, 1, "", -1, "", 0)))>) == %<(SLibCG_SE(SLibCGIR_PV(953, 0, 39, 1, "", -1, "", 0)))>);
/* RelationalOperator: '<S96>/Compare' incorporates:
 *  Constant: '<S96>/Constant'
 *  S-Function (sfix_bitop): '<S86>/Bitwise Operator'
 */
Walking01_withElmos_B.Compare_f = ((Walking01_withElmos_B.EtherCATPDOReceive5_p & %<(SLibCG_SE(SLibCGIR_PV(954, 0, 39, 1, "", -1, "", 0)))>) == %<(SLibCG_SE(SLibCGIR_PV(955, 0, 39, 1, "", -1, "", 0)))>);
/* RelationalOperator: '<S97>/Compare' incorporates:
 *  Constant: '<S97>/Constant'
 *  S-Function (sfix_bitop): '<S87>/Bitwise Operator'
 */
Walking01_withElmos_B.Compare_co = ((Walking01_withElmos_B.EtherCATPDOReceive5_p & %<(SLibCG_SE(SLibCGIR_PV(954, 0, 39, 1, "", -1, "", 0)))>) == %<(SLibCG_SE(SLibCGIR_PV(956, 0, 39, 1, "", -1, "", 0)))>);
/* RelationalOperator: '<S98>/Compare' incorporates:
 *  Constant: '<S98>/Constant'
 *  S-Function (sfix_bitop): '<S88>/Bitwise Operator'
 */
Walking01_withElmos_B.Compare_ju = ((Walking01_withElmos_B.EtherCATPDOReceive5_p & %<(SLibCG_SE(SLibCGIR_PV(957, 0, 39, 1, "", -1, "", 0)))>) == %<(SLibCG_SE(SLibCGIR_PV(957, 0, 39, 1, "", -1, "", 0)))>);
/* Chart: '<S36>/Chart' */
/* Gateway: DAQ_WITH_SAFETY_IMU/DAQ/EtherCATNetwork/EtherCATRobotMicrostrain/LegElmo_2L/Chart */
Walking01_withElmos_DW.sfEvent_p = -1;
/* During: DAQ_WITH_SAFETY_IMU/DAQ/EtherCATNetwork/EtherCATRobotMicrostrain/LegElmo_2L/Chart */
if (Walking01_withElmos_DW.is_active_c23_Walking01_withElm == 0U) {
    /* Entry: DAQ_WITH_SAFETY_IMU/DAQ/EtherCATNetwork/EtherCATRobotMicrostrain/LegElmo_2L/Chart */
    Walking01_withElmos_DW.is_active_c23_Walking01_withElm = 1U;
    /* Entry Internal: DAQ_WITH_SAFETY_IMU/DAQ/EtherCATNetwork/EtherCATRobotMicrostrain/LegElmo_2L/Chart */
    /* Transition: '<S81>:86' */
    Walking01_withElmos_DW.is_c23_Walking01_withElmos = Walking01_withElmos_IN_Start1_d;
    /* Entry 'Start1': '<S81>:76' */
    /* '<S81>:76:1' ControlWordIndex = 0; */
    Walking01_withElmos_B.ControlWordIndex = 0.0;
    /* '<S81>:76:1' EnableTargetTorque = 0; */
    Walking01_withElmos_B.EnableTargetTorque = 0.0;
    /* '<S81>:76:3' FaultDetected = 0; */
    Walking01_withElmos_B.FaultDetected = 0.0;
} else {
    switch (Walking01_withElmos_DW.is_c23_Walking01_withElmos) {
      case Walking01_wit_IN_FaultRunning_g:
        /* During 'FaultRunning': '<S81>:88' */
        break;
      case Walking01_w_IN_Initialization_e:
        /* During 'Initialization': '<S81>:81' */
        /* '<S81>:73:1' sf_internal_predicateOutput = ... */
        /* '<S81>:73:1' MedullaCommand == 4 || MedullaCommand == 5; */
        if ((Walking01_withElmos_B.MedullaCommandSafe == 4.0) || (Walking01_withElmos_B.MedullaCommandSafe == 5.0)) {
            /* Transition: '<S81>:73' */
            /* Exit Internal 'Initialization': '<S81>:81' */
            Walking01_withElmos_DW.is_Initialization = Walking01__IN_NO_ACTIVE_CHILD_j;
            Walking01_withElmos_DW.is_c23_Walking01_withElmos = Walking01_wit_IN_FaultRunning_g;
            /* Entry 'FaultRunning': '<S81>:88' */
            /* '<S81>:88:1' ControlWordIndex = 1; */
            Walking01_withElmos_B.ControlWordIndex = 1.0;
            /* '<S81>:88:1' EnableTargetTorque = 0; */
            Walking01_withElmos_B.EnableTargetTorque = 0.0;
            /* '<S81>:88:3' FaultDetected = 1; */
            Walking01_withElmos_B.FaultDetected = 1.0;
        } else {
            switch (Walking01_withElmos_DW.is_Initialization) {
              case Walking01_withElmos_IN_Fault_d:
                /* During 'Fault': '<S81>:82' */
                /* '<S81>:72:1' sf_internal_predicateOutput = ... */
                /* '<S81>:72:1' Timeout >=20; */
                if (Walking01_withElmos_DW.Timeout >= 20.0) {
                    /* Transition: '<S81>:72' */
                    Walking01_withElmos_DW.is_Initialization = Walking01_withElmos_IN_Fault_d;
                    /* Entry 'Fault': '<S81>:82' */
                    /* '<S81>:82:1' ControlWordIndex = 3; */
                    Walking01_withElmos_B.ControlWordIndex = 3.0;
                    /* '<S81>:82:1' EnableTargetTorque = 0; */
                    Walking01_withElmos_B.EnableTargetTorque = 0.0;
                    /* '<S81>:82:3' Timeout = 0; */
                    Walking01_withElmos_DW.Timeout = 0.0;
                } else {
                    /* '<S81>:87:1' sf_internal_predicateOutput = ... */
                    /* '<S81>:87:1' SwitchOnDisabledMode == 1; */
                    if (Walking01_withElmos_B.Compare_n4 == 1) {
                        /* Transition: '<S81>:87' */
                        Walking01_withElmos_DW.is_Initialization = Walking01_IN_SwitchOnDisabled_e;
                        /* Entry 'SwitchOnDisabled': '<S81>:75' */
                        /* '<S81>:75:1' ControlWordIndex = 1; */
                        Walking01_withElmos_B.ControlWordIndex = 1.0;
                        /* '<S81>:75:1' Timeout = 0; */
                        Walking01_withElmos_DW.Timeout = 0.0;
                        /* '<S81>:75:3' EnableTargetTorque = 0; */
                        Walking01_withElmos_B.EnableTargetTorque = 0.0;
                    } else {
                        /* '<S81>:82:4' Timeout = Timeout + 1; */
                        Walking01_withElmos_DW.Timeout++;
                        /* '<S81>:82:5' ControlWordIndex = 0; */
                        Walking01_withElmos_B.ControlWordIndex = 0.0;
                    }
                }
                break;
              case Walking01__IN_ReadyToSwitchOn_n:
                /* During 'ReadyToSwitchOn': '<S81>:90' */
                /* '<S81>:92:1' sf_internal_predicateOutput = ... */
                /* '<S81>:92:1' FaultMode == 1; */
                if (Walking01_withElmos_B.Compare_ju == 1) {
                    /* Transition: '<S81>:92' */
                    Walking01_withElmos_DW.is_Initialization = Walking01_withElmos_IN_Fault_d;
                    /* Entry 'Fault': '<S81>:82' */
                    /* '<S81>:82:1' ControlWordIndex = 3; */
                    Walking01_withElmos_B.ControlWordIndex = 3.0;
                    /* '<S81>:82:1' EnableTargetTorque = 0; */
                    Walking01_withElmos_B.EnableTargetTorque = 0.0;
                    /* '<S81>:82:3' Timeout = 0; */
                    Walking01_withElmos_DW.Timeout = 0.0;
                } else {
                    /* '<S81>:77:1' sf_internal_predicateOutput = ... */
                    /* '<S81>:77:1' SwitchOnDisabledMode == 1; */
                    if (Walking01_withElmos_B.Compare_n4 == 1) {
                        /* Transition: '<S81>:77' */
                        Walking01_withElmos_DW.is_Initialization = Walking01_IN_SwitchOnDisabled_e;
                        /* Entry 'SwitchOnDisabled': '<S81>:75' */
                        /* '<S81>:75:1' ControlWordIndex = 1; */
                        Walking01_withElmos_B.ControlWordIndex = 1.0;
                        /* '<S81>:75:1' Timeout = 0; */
                        Walking01_withElmos_DW.Timeout = 0.0;
                        /* '<S81>:75:3' EnableTargetTorque = 0; */
                        Walking01_withElmos_B.EnableTargetTorque = 0.0;
                    } else {
                        /* Transition: '<S81>:78' */
                        Walking01_withElmos_DW.is_Initialization = Walking01__IN_NO_ACTIVE_CHILD_j;
                        Walking01_withElmos_DW.is_c23_Walking01_withElmos = Walking01_withElmo_IN_Running_j;
                        /* Entry 'Running': '<S81>:85' */
                        /* '<S81>:85:1' ControlWordIndex = 2; */
                        Walking01_withElmos_B.ControlWordIndex = 2.0;
                        /* '<S81>:85:1' EnableTargetTorque = 1; */
                        Walking01_withElmos_B.EnableTargetTorque = 1.0;
                    }
                }
                break;
              default:
                /* During 'SwitchOnDisabled': '<S81>:75' */
                /* '<S81>:89:1' sf_internal_predicateOutput = ... */
                /* '<S81>:89:1' ReadyToSwitchOnMode == 1; */
                if (Walking01_withElmos_B.Compare_co == 1) {
                    /* Transition: '<S81>:89' */
                    Walking01_withElmos_DW.is_Initialization = Walking01__IN_ReadyToSwitchOn_n;
                    /* Entry 'ReadyToSwitchOn': '<S81>:90' */
                    /* '<S81>:90:1' ControlWordIndex = 2; */
                    Walking01_withElmos_B.ControlWordIndex = 2.0;
                    /* '<S81>:90:1' Timeout = 0; */
                    Walking01_withElmos_DW.Timeout = 0.0;
                    /* '<S81>:90:3' EnableTargetTorque = 0; */
                    Walking01_withElmos_B.EnableTargetTorque = 0.0;
                } else {
                    /* '<S81>:83:1' sf_internal_predicateOutput = ... */
                    /* '<S81>:83:1' FaultMode == 1; */
                    if (Walking01_withElmos_B.Compare_ju == 1) {
                        /* Transition: '<S81>:83' */
                        Walking01_withElmos_DW.is_Initialization = Walking01_withElmos_IN_Fault_d;
                        /* Entry 'Fault': '<S81>:82' */
                        /* '<S81>:82:1' ControlWordIndex = 3; */
                        Walking01_withElmos_B.ControlWordIndex = 3.0;
                        /* '<S81>:82:1' EnableTargetTorque = 0; */
                        Walking01_withElmos_B.EnableTargetTorque = 0.0;
                        /* '<S81>:82:3' Timeout = 0; */
                        Walking01_withElmos_DW.Timeout = 0.0;
                    } else {
                        /* '<S81>:75:3' Timeout = Timeout + 1; */
                        Walking01_withElmos_DW.Timeout++;
                    }
                }
                break;
            }
        }
        break;
      case Walking01_withElmo_IN_Running_j:
        /* During 'Running': '<S81>:85' */
        /* '<S81>:79:1' sf_internal_predicateOutput = ... */
        /* '<S81>:79:1' FaultMode == 1; */
        if (Walking01_withElmos_B.Compare_ju == 1) {
            /* Transition: '<S81>:79' */
            Walking01_withElmos_DW.is_c23_Walking01_withElmos = Walking01_wit_IN_FaultRunning_g;
            /* Entry 'FaultRunning': '<S81>:88' */
            /* '<S81>:88:1' ControlWordIndex = 1; */
            Walking01_withElmos_B.ControlWordIndex = 1.0;
            /* '<S81>:88:1' EnableTargetTorque = 0; */
            Walking01_withElmos_B.EnableTargetTorque = 0.0;
            /* '<S81>:88:3' FaultDetected = 1; */
            Walking01_withElmos_B.FaultDetected = 1.0;
        } else {
            /* '<S81>:74:1' sf_internal_predicateOutput = ... */
            /* '<S81>:74:1' MedullaCommand == 4 || MedullaCommand == 5; */
            if ((Walking01_withElmos_B.MedullaCommandSafe == 4.0) || (Walking01_withElmos_B.MedullaCommandSafe == 5.0)) {
                /* Transition: '<S81>:74' */
                Walking01_withElmos_DW.is_c23_Walking01_withElmos = Walking01_wit_IN_FaultRunning_g;
                /* Entry 'FaultRunning': '<S81>:88' */
                /* '<S81>:88:1' ControlWordIndex = 1; */
                Walking01_withElmos_B.ControlWordIndex = 1.0;
                /* '<S81>:88:1' EnableTargetTorque = 0; */
                Walking01_withElmos_B.EnableTargetTorque = 0.0;
                /* '<S81>:88:3' FaultDetected = 1; */
                Walking01_withElmos_B.FaultDetected = 1.0;
            }
        }
        break;
      default:
        /* During 'Start1': '<S81>:76' */
        /* '<S81>:84:1' sf_internal_predicateOutput = ... */
        /* '<S81>:84:1' MedullaCommand == 4 || MedullaCommand == 5; */
        if ((Walking01_withElmos_B.MedullaCommandSafe == 4.0) || (Walking01_withElmos_B.MedullaCommandSafe == 5.0)) {
            /* Transition: '<S81>:84' */
            Walking01_withElmos_DW.is_c23_Walking01_withElmos = Walking01_wit_IN_FaultRunning_g;
            /* Entry 'FaultRunning': '<S81>:88' */
            /* '<S81>:88:1' ControlWordIndex = 1; */
            Walking01_withElmos_B.ControlWordIndex = 1.0;
            /* '<S81>:88:1' EnableTargetTorque = 0; */
            Walking01_withElmos_B.EnableTargetTorque = 0.0;
            /* '<S81>:88:3' FaultDetected = 1; */
            Walking01_withElmos_B.FaultDetected = 1.0;
        } else {
            /* '<S81>:80:1' sf_internal_predicateOutput = ... */
            /* '<S81>:80:1' MedullaCommand == 2; */
            if (Walking01_withElmos_B.MedullaCommandSafe == 2.0) {
                /* Transition: '<S81>:80' */
                Walking01_withElmos_DW.is_c23_Walking01_withElmos = Walking01_w_IN_Initialization_e;
                /* Entry Internal 'Initialization': '<S81>:81' */
                /* Transition: '<S81>:94' */
                Walking01_withElmos_DW.is_Initialization = Walking01_IN_SwitchOnDisabled_e;
                /* Entry 'SwitchOnDisabled': '<S81>:75' */
                /* '<S81>:75:1' ControlWordIndex = 1; */
                Walking01_withElmos_B.ControlWordIndex = 1.0;
                /* '<S81>:75:1' Timeout = 0; */
                Walking01_withElmos_DW.Timeout = 0.0;
                /* '<S81>:75:3' EnableTargetTorque = 0; */
                Walking01_withElmos_B.EnableTargetTorque = 0.0;
            }
        }
        break;
    }
}
/* End of Chart: '<S36>/Chart' */

/* Outport: '<Root>/FaultDetected' */
Walking01_withElmos_Y.FaultDetected[0] = Walking01_withElmos_B.sf_Chart.FaultDetected;
Walking01_withElmos_Y.FaultDetected[1] = Walking01_withElmos_B.sf_Chart_b.FaultDetected;
Walking01_withElmos_Y.FaultDetected[2] = Walking01_withElmos_B.FaultDetected_n;
Walking01_withElmos_Y.FaultDetected[3] = Walking01_withElmos_B.FaultDetected;
/* Delay: '<S4>/Resettable Delay' incorporates:
 *  Constant: '<S4>/ResetExecutionDelaySteps'
 *  Constant: '<S8>/Constant'
 *  RelationalOperator: '<S8>/Compare'
 */
if (Walking01_withElmos_B.TaskExecutionTime >= %<(SLibCG_SE(SLibCGIR_PV(115, 0, 39, 1, "", -1, "", 0)))>) {
    Walking01_withElmos_DW.icLoad = 1U;
}
if (Walking01_withElmos_DW.icLoad != 0) {
    Walking01_withElmos_DW.ResettableDelay_DSTATE = %<(SLibCG_SE(SLibCGIR_PV(405, 0, 39, 1, "", -1, "", 0)))>;
}
HalfMaxTicks_idx_0 = Walking01_withElmos_DW.ResettableDelay_DSTATE;
/* Outputs for Enabled SubSystem: '<S4>/Reset CPU Overload Count' incorporates:
 *  EnablePort: '<S11>/Enable'
 */
/* RelationalOperator: '<S10>/Compare' incorporates:
 *  Constant: '<S10>/Constant'
 *  Delay: '<S4>/Resettable Delay'
 */
if (Walking01_withElmos_DW.ResettableDelay_DSTATE == %<(SLibCG_SE(SLibCGIR_PV(110, 0, 39, 1, "", -1, "", 0)))>) {
%<tlcOutputsFcnOfS1B1>\
    srUpdateBC(Walking01_withElmos_DW.ResetCPUOverloadCount_SubsysRan);
}
/* End of RelationalOperator: '<S10>/Compare' */
/* End of Outputs for SubSystem: '<S4>/Reset CPU Overload Count' */

/* Bias: '<S4>/Bias' */
Walking01_withElmos_B.Bias = HalfMaxTicks_idx_0 + %<(SLibCG_SE(SLibCGIR_PV(324, 0, 39, 1, "", -1, "", 0)))>;
/* Saturate: '<S13>/Current Saturation' */
for (i = 0; i < 6; i++) {
    if (L2fh[i] > %<(SLibCG_SE(SLibCGIR_PV(405, 0, 39, 1, "", -1, "", 0)))>) {
        RefAngle[i] = %<(SLibCG_SE(SLibCGIR_PV(405, 0, 39, 1, "", -1, "", 0)))>;
    } else if (L2fh[i] < %<(SLibCG_SE(SLibCGIR_PV(610, 0, 39, 1, "", -1, "", 0)))>) {
        RefAngle[i] = %<(SLibCG_SE(SLibCGIR_PV(610, 0, 39, 1, "", -1, "", 0)))>;
    } else {
        RefAngle[i] = L2fh[i];
    }
}
/* End of Saturate: '<S13>/Current Saturation' */
%<tlcOutputsFcnOfS39B322>\
%<tlcOutputsFcnOfS39B323>\
%<tlcOutputsFcnOfS39B324>\
%<tlcOutputsFcnOfS39B325>\
%<tlcOutputsFcnOfS39B326>\
%<tlcOutputsFcnOfS39B327>\
%<tlcOutputsFcnOfS39B328>\
%<tlcOutputsFcnOfS39B329>\
%<tlcOutputsFcnOfS39B330>\
%<tlcOutputsFcnOfS39B331>\
/* MATLAB Function: '<S19>/ConvertAmpCurrent' incorporates:
 *  DataTypeConversion: '<S19>/Data Type Conversion111'
 *  DataTypeConversion: '<S19>/Data Type Conversion126'
 *  DataTypeConversion: '<S19>/Data Type Conversion21'
 *  DataTypeConversion: '<S19>/Data Type Conversion45'
 *  DataTypeConversion: '<S19>/Data Type Conversion69'
 *  DataTypeConversion: '<S19>/Data Type Conversion93'
 */
/* MATLAB Function 'DAQ_WITH_SAFETY_IMU/DAQ/EtherCATNetwork/EtherCATRobotMicrostrain/ConvertAmpCurrent': '<S26>:1' */
/* '<S26>:1:4' measuredCurrent = (adc_value) * 60.0 / 8192; */
rtb_measuredCurrent[0] = (real_T)Walking01_withElmos_B.EtherCATRxVar6_n * 60.0 / 8192.0;
rtb_measuredCurrent[1] = (real_T)Walking01_withElmos_B.EtherCATRxVar7_g * 60.0 / 8192.0;
rtb_measuredCurrent[2] = (real_T)Walking01_withElmos_B.EtherCATRxVar6_o * 60.0 / 8192.0;
rtb_measuredCurrent[3] = (real_T)Walking01_withElmos_B.EtherCATRxVar7_d * 60.0 / 8192.0;
rtb_measuredCurrent[4] = (real_T)Walking01_withElmos_B.EtherCATRxVar * 60.0 / 8192.0;
rtb_measuredCurrent[5] = (real_T)Walking01_withElmos_B.EtherCATRxVar6_b * 60.0 / 8192.0;
rtb_measuredCurrent[6] = (real_T)Walking01_withElmos_B.EtherCATRxVar7_b * 60.0 / 8192.0;
rtb_measuredCurrent[7] = (real_T)Walking01_withElmos_B.EtherCATRxVar6_m * 60.0 / 8192.0;
rtb_measuredCurrent[8] = (real_T)Walking01_withElmos_B.EtherCATRxVar7_gy * 60.0 / 8192.0;
rtb_measuredCurrent[9] = (real_T)Walking01_withElmos_B.EtherCATRxVar_i * 60.0 / 8192.0;
%<tlcOutputsFcnOfS39B333>\
%<tlcOutputsFcnOfS39B334>\
%<tlcOutputsFcnOfS39B335>\
%<tlcOutputsFcnOfS39B336>\
%<tlcOutputsFcnOfS39B337>\
%<tlcOutputsFcnOfS39B338>\
/* MATLAB Function: '<S19>/ConvertLogicVoltage' incorporates:
 *  DataTypeConversion: '<S19>/Data Type Conversion103'
 *  DataTypeConversion: '<S19>/Data Type Conversion118'
 *  DataTypeConversion: '<S19>/Data Type Conversion14'
 *  DataTypeConversion: '<S19>/Data Type Conversion38'
 *  DataTypeConversion: '<S19>/Data Type Conversion62'
 *  DataTypeConversion: '<S19>/Data Type Conversion86'
 */
/* MATLAB Function 'DAQ_WITH_SAFETY_IMU/DAQ/EtherCATNetwork/EtherCATRobotMicrostrain/ConvertLogicVoltage': '<S27>:1' */
/* '<S27>:1:4' MEDULLA_ADC_MAX_VOLTS     = 2.70; */
/* '<S27>:1:5' MEDULLA_ADC_OFFSET_COUNTS = 172; */
/* '<S27>:1:7' logicVoltage = (adc_value - MEDULLA_ADC_OFFSET_COUNTS) * (MEDULLA_ADC_MAX_VOLTS/(4095.0))  * 6.0; */
rtb_logicVoltage[0] = ((real_T)Walking01_withElmos_B.EtherCATRxVar10_c - 172.0) * 0.00065934065934065934 * 6.0;
rtb_logicVoltage[1] = ((real_T)Walking01_withElmos_B.EtherCATRxVar10_f - 172.0) * 0.00065934065934065934 * 6.0;
rtb_logicVoltage[2] = ((real_T)Walking01_withElmos_B.EtherCATRxVar6_a - 172.0) * 0.00065934065934065934 * 6.0;
rtb_logicVoltage[3] = ((real_T)Walking01_withElmos_B.EtherCATRxVar10_b - 172.0) * 0.00065934065934065934 * 6.0;
rtb_logicVoltage[4] = ((real_T)Walking01_withElmos_B.EtherCATRxVar10_g - 172.0) * 0.00065934065934065934 * 6.0;
rtb_logicVoltage[5] = ((real_T)Walking01_withElmos_B.EtherCATRxVar6_f - 172.0) * 0.00065934065934065934 * 6.0;
%<tlcOutputsFcnOfS39B340>\
%<tlcOutputsFcnOfS39B341>\
%<tlcOutputsFcnOfS39B342>\
%<tlcOutputsFcnOfS39B343>\
%<tlcOutputsFcnOfS39B344>\
%<tlcOutputsFcnOfS39B345>\
/* MATLAB Function: '<S19>/ConvertMotorVoltage' incorporates:
 *  DataTypeConversion: '<S19>/Data Type Conversion101'
 *  DataTypeConversion: '<S19>/Data Type Conversion116'
 *  DataTypeConversion: '<S19>/Data Type Conversion13'
 *  DataTypeConversion: '<S19>/Data Type Conversion37'
 *  DataTypeConversion: '<S19>/Data Type Conversion61'
 *  DataTypeConversion: '<S19>/Data Type Conversion85'
 */
/* MATLAB Function 'DAQ_WITH_SAFETY_IMU/DAQ/EtherCATNetwork/EtherCATRobotMicrostrain/ConvertMotorVoltage': '<S28>:1' */
/* '<S28>:1:4' MOTOR_VOLTAGE_C_OFFSET    = 1300.0; */
/* '<S28>:1:5' MOTOR_VOLTAGE_V_CAL       = 60.2; */
/* '<S28>:1:6' MOTOR_VOLTAGE_C_CAL       = 3600.0; */
/* '<S28>:1:8' motorVoltage = (adc_value - MOTOR_VOLTAGE_C_OFFSET)*MOTOR_VOLTAGE_V_CAL/(MOTOR_VOLTAGE_C_CAL-MOTOR_VOLTAGE_C_OFFSET); */
rtb_motorVoltage[0] = ((real_T)Walking01_withElmos_B.EtherCATRxVar11_b - 1300.0) * 60.2 / 2300.0;
rtb_motorVoltage[1] = ((real_T)Walking01_withElmos_B.EtherCATRxVar11_a - 1300.0) * 60.2 / 2300.0;
rtb_motorVoltage[2] = ((real_T)Walking01_withElmos_B.EtherCATRxVar1_p - 1300.0) * 60.2 / 2300.0;
rtb_motorVoltage[3] = ((real_T)Walking01_withElmos_B.EtherCATRxVar11_h - 1300.0) * 60.2 / 2300.0;
rtb_motorVoltage[4] = ((real_T)Walking01_withElmos_B.EtherCATRxVar11_l - 1300.0) * 60.2 / 2300.0;
rtb_motorVoltage[5] = ((real_T)Walking01_withElmos_B.EtherCATRxVar1_m - 1300.0) * 60.2 / 2300.0;
/* S-Function (sdspcount2): '<S19>/Counter' */
rtb_Counter_o2 = false;
rtb_DigitalClock_a = Walking01_withElmos_DW.Counter_Count;
if (Walking01_withElmos_DW.Counter_Count == %<(SLibCG_SE(SLibCGIR_PV(958, 0, 39, 1, "", -1, "", 0)))>) {
    rtb_Counter_o2 = true;
}
if (Walking01_withElmos_DW.Counter_Count < %<(SLibCG_SE(SLibCGIR_PV(959, 0, 39, 1, "", -1, "", 0)))>) {
    Walking01_withElmos_DW.Counter_Count++;
} else {
    Walking01_withElmos_DW.Counter_Count = 0U;
}
/* End of S-Function (sdspcount2): '<S19>/Counter' */
%<tlcOutputsFcnOfS39B347>\
/* DataTypeConversion: '<S19>/Data Type Conversion10' */
rtb_DataTypeConversion10 = Walking01_withElmos_B.EtherCATRxVar5_n;
%<tlcOutputsFcnOfS39B348>\
/* DataTypeConversion: '<S19>/Data Type Conversion108' */
rtb_DataTypeConversion108 = Walking01_withElmos_B.EtherCATRxVar5_o;
%<tlcOutputsFcnOfS39B349>\
/* DataTypeConversion: '<S19>/Data Type Conversion109' */
rtb_DataTypeConversion109 = Walking01_withElmos_B.EtherCATRxVar3_h;
%<tlcOutputsFcnOfS39B350>\
/* DataTypeConversion: '<S19>/Data Type Conversion11' */
rtb_DataTypeConversion11 = Walking01_withElmos_B.EtherCATRxVar9_p;
%<tlcOutputsFcnOfS39B351>\
/* DataTypeConversion: '<S19>/Data Type Conversion110' */
rtb_DataTypeConversion110 = Walking01_withElmos_B.EtherCATRxVar17_j;
%<tlcOutputsFcnOfS39B352>\
/* DataTypeConversion: '<S19>/Data Type Conversion12' */
rtb_DataTypeConversion12 = Walking01_withElmos_B.EtherCATRxVar1_h;
%<tlcOutputsFcnOfS39B353>\
/* DataTypeConversion: '<S19>/Data Type Conversion123' */
rtb_DataTypeConversion123 = Walking01_withElmos_B.EtherCATRxVar5_d;
%<tlcOutputsFcnOfS39B354>\
/* DataTypeConversion: '<S19>/Data Type Conversion124' */
rtb_DataTypeConversion124 = Walking01_withElmos_B.EtherCATRxVar3_c;
%<tlcOutputsFcnOfS39B355>\
/* DataTypeConversion: '<S19>/Data Type Conversion125' */
rtb_DataTypeConversion125 = Walking01_withElmos_B.EtherCATRxVar17_p;
%<tlcOutputsFcnOfS39B356>\
/* DataTypeConversion: '<S19>/Data Type Conversion16' */
rtb_DataTypeConversion16 = Walking01_withElmos_B.EtherCATRxVar16_k;
%<tlcOutputsFcnOfS39B357>\
/* DataTypeConversion: '<S19>/Data Type Conversion2' */
rtb_DataTypeConversion2 = Walking01_withElmos_B.EtherCATRxVar23;
%<tlcOutputsFcnOfS39B358>\
%<tlcOutputsFcnOfS39B359>\
/* DataTypeConversion: '<S19>/Data Type Conversion23' */
rtb_DataTypeConversion23[0] = Walking01_withElmos_B.EtherCATRxVar2_o;
rtb_DataTypeConversion23[1] = Walking01_withElmos_B.EtherCATRxVar3_j;
%<tlcOutputsFcnOfS39B360>\
/* DataTypeConversion: '<S19>/Data Type Conversion27' */
rtb_DataTypeConversion27 = Walking01_withElmos_B.EtherCATRxVar23_c;
%<tlcOutputsFcnOfS39B361>\
/* DataTypeConversion: '<S19>/Data Type Conversion29' */
rtb_DataTypeConversion29 = Walking01_withElmos_B.EtherCATRxVar20;
%<tlcOutputsFcnOfS39B362>\
/* DataTypeConversion: '<S19>/Data Type Conversion34' */
rtb_DataTypeConversion34 = Walking01_withElmos_B.EtherCATRxVar5_l;
%<tlcOutputsFcnOfS39B363>\
/* DataTypeConversion: '<S19>/Data Type Conversion35' */
rtb_DataTypeConversion35 = Walking01_withElmos_B.EtherCATRxVar9_a;
%<tlcOutputsFcnOfS39B364>\
/* DataTypeConversion: '<S19>/Data Type Conversion36' */
rtb_DataTypeConversion36 = Walking01_withElmos_B.EtherCATRxVar1_b;
%<tlcOutputsFcnOfS39B365>\
%<tlcOutputsFcnOfS39B366>\
/* DataTypeConversion: '<S19>/Data Type Conversion47' */
rtb_DataTypeConversion47[0] = Walking01_withElmos_B.EtherCATRxVar2_m;
rtb_DataTypeConversion47[1] = Walking01_withElmos_B.EtherCATRxVar3_o;
%<tlcOutputsFcnOfS39B367>\
/* DataTypeConversion: '<S19>/Data Type Conversion5' */
rtb_DataTypeConversion5 = Walking01_withElmos_B.EtherCATRxVar20_c;
%<tlcOutputsFcnOfS39B368>\
/* DataTypeConversion: '<S19>/Data Type Conversion51' */
rtb_DataTypeConversion51 = Walking01_withElmos_B.EtherCATRxVar23_e;
%<tlcOutputsFcnOfS39B369>\
/* DataTypeConversion: '<S19>/Data Type Conversion53' */
rtb_DataTypeConversion53 = Walking01_withElmos_B.EtherCATRxVar20_p;
%<tlcOutputsFcnOfS39B370>\
/* DataTypeConversion: '<S19>/Data Type Conversion58' */
rtb_DataTypeConversion58 = Walking01_withElmos_B.EtherCATRxVar5_k;
%<tlcOutputsFcnOfS39B371>\
/* DataTypeConversion: '<S19>/Data Type Conversion59' */
rtb_DataTypeConversion59 = Walking01_withElmos_B.EtherCATRxVar9_i;
%<tlcOutputsFcnOfS39B372>\
/* DataTypeConversion: '<S19>/Data Type Conversion60' */
rtb_DataTypeConversion60 = Walking01_withElmos_B.EtherCATRxVar1_f;
%<tlcOutputsFcnOfS39B373>\
%<tlcOutputsFcnOfS39B374>\
/* DataTypeConversion: '<S19>/Data Type Conversion71' */
rtb_DataTypeConversion71[0] = Walking01_withElmos_B.EtherCATRxVar2_n;
rtb_DataTypeConversion71[1] = Walking01_withElmos_B.EtherCATRxVar3_c4;
%<tlcOutputsFcnOfS39B375>\
/* DataTypeConversion: '<S19>/Data Type Conversion75' */
rtb_DataTypeConversion75 = Walking01_withElmos_B.EtherCATRxVar23_p;
%<tlcOutputsFcnOfS39B376>\
/* DataTypeConversion: '<S19>/Data Type Conversion77' */
rtb_DataTypeConversion77 = Walking01_withElmos_B.EtherCATRxVar20_l;
%<tlcOutputsFcnOfS39B377>\
/* DataTypeConversion: '<S19>/Data Type Conversion82' */
rtb_DataTypeConversion82 = Walking01_withElmos_B.EtherCATRxVar5_p;
%<tlcOutputsFcnOfS39B378>\
/* DataTypeConversion: '<S19>/Data Type Conversion83' */
rtb_DataTypeConversion83 = Walking01_withElmos_B.EtherCATRxVar9_j;
%<tlcOutputsFcnOfS39B379>\
/* DataTypeConversion: '<S19>/Data Type Conversion84' */
rtb_DataTypeConversion84 = Walking01_withElmos_B.EtherCATRxVar1_pm;
%<tlcOutputsFcnOfS39B380>\
%<tlcOutputsFcnOfS39B381>\
/* DataTypeConversion: '<S19>/Data Type Conversion95' */
rtb_DataTypeConversion95[0] = Walking01_withElmos_B.EtherCATRxVar2_p;
rtb_DataTypeConversion95[1] = Walking01_withElmos_B.EtherCATRxVar3_k;
/* DataTypeConversion: '<S31>/Data Type Conversion3' */
if (Walking01_withElmos_B.MedullaCommandSafe < 0.0) {
    HalfMaxTicks_idx_1 = ceil(Walking01_withElmos_B.MedullaCommandSafe);
} else {
    HalfMaxTicks_idx_1 = floor(Walking01_withElmos_B.MedullaCommandSafe);
}
if (rtIsNaN(HalfMaxTicks_idx_1) || rtIsInf(HalfMaxTicks_idx_1)) {
    HalfMaxTicks_idx_1 = 0.0;
} else {
    HalfMaxTicks_idx_1 = fmod(HalfMaxTicks_idx_1, 256.0);
}
Walking01_withElmos_B.DataTypeConversion3 = (uint8_T)(HalfMaxTicks_idx_1 < 0.0 ? (int32_T)(uint8_T)-(int8_T)(uint8_T)-HalfMaxTicks_idx_1 : (int32_T)(uint8_T)HalfMaxTicks_idx_1);
/* End of DataTypeConversion: '<S31>/Data Type Conversion3' */
%<tlcOutputsFcnOfS39B382>\
/* DataTypeConversion: '<S31>/Data Type Conversion4' */
if (rtb_DigitalClock_a < 0.0) {
    HalfMaxTicks_idx_1 = ceil(rtb_DigitalClock_a);
} else {
    HalfMaxTicks_idx_1 = floor(rtb_DigitalClock_a);
}
if (rtIsNaN(HalfMaxTicks_idx_1) || rtIsInf(HalfMaxTicks_idx_1)) {
    HalfMaxTicks_idx_1 = 0.0;
} else {
    HalfMaxTicks_idx_1 = fmod(HalfMaxTicks_idx_1, 65536.0);
}
Walking01_withElmos_B.DataTypeConversion4 = (uint16_T)(HalfMaxTicks_idx_1 < 0.0 ? (int32_T)(uint16_T)-(int16_T)(uint16_T)-HalfMaxTicks_idx_1 : (int32_T)(uint16_T)HalfMaxTicks_idx_1);
/* End of DataTypeConversion: '<S31>/Data Type Conversion4' */
%<tlcOutputsFcnOfS39B383>\
/* MATLAB Function: '<S13>/convert_mtr_current_to_pwm' incorporates:
 *  Constant: '<S13>/MotorParameters'
 */
/* MATLAB Function 'DAQ_WITH_SAFETY_IMU/DAQ/EtherCATNetwork/convert_mtr_current_to_pwm': '<S23>:1' */
/* This function takes motor torque command inputs and outputs */
/* pwm commands (for the Medulla) in UMich convention */
/* '<S23>:1:6' y = zeros(6,1); */
for (i = 0; i < 6; i++) {
    L2fh[i] = 0.0;
}
/* '<S23>:1:8' if (Reset) */
if (!Walking01_withElmos_B.LogicalOperator1) {
    /* The inputs, which are commanded motor torques  */
    /* '<S23>:1:13' leg_motor_1R_torque_cmd = u(1); */
    /* '<S23>:1:14' leg_motor_2R_torque_cmd = u(2); */
    /* '<S23>:1:15' hip_motor_3R_torque_cmd = u(3); */
    /* '<S23>:1:16' leg_motor_1L_torque_cmd = u(4); */
    /* '<S23>:1:17' leg_motor_2L_torque_cmd = u(5); */
    /* '<S23>:1:18' hip_motor_3L_torque_cmd = u(6); */
    /* Parameters determined experimentally at U Mich */
    /* '<S23>:1:21' UMich_LEFT_MOTOR_HIP_DIRECTION = params(1); */
    /* The direction for the left hip motor. (UMich convention) */
    /* '<S23>:1:22' UMich_RIGHT_MOTOR_HIP_DIRECTION = params(2); */
    /* The direction for the right hip motor. (UMich convention) */
    /*  The parameters, from http://code.google.com/p/atrias/source/browse/robot_definitions/ */
    /* From robot_invariant_defs.h */
    /* '<S23>:1:26' MTR_MAX_COUNT = params(3); */
    /* The maximum commanded amplifier value. This is the maximum value sent to the Medullas for the amplifier command. */
    /* From biped2_variant_defs.h */
    /* '<S23>:1:28' MTR_MAX_TORQUE = params(4); */
    /* Maximum motor torque for scaling */
    /* '<S23>:1:29' MTR_HIP_MAX_TORQUE = params(5); */
    /* Maximum hip motor torque for scaling */
    /* From leg3_definitions.h (corresponds to our left leg) */
    /* (Note that A=shin and B=thigh for OSU convention) */
    /* '<S23>:1:32' LEG3_MOTOR_A_DIRECTION = params(6); */
    /* '<S23>:1:33' LEG3_MOTOR_B_DIRECTION = params(7); */
    /* From leg4_definitions.h (corresponds to our right leg) */
    /* (Note that A=shin and B=thigh for OSU convention) */
    /* '<S23>:1:36' LEG4_MOTOR_A_DIRECTION = params(8); */
    /* '<S23>:1:37' LEG4_MOTOR_B_DIRECTION = params(9); */
    /* '<S23>:1:39' leg_torque_to_pwm = MTR_MAX_COUNT/MTR_MAX_TORQUE; */
    HalfMaxTicks_idx_0 = %<(SLibCG_SE(SLibCGIR_PV(843, 0, 39, 9, "", -1, "", 2)))> / %<(SLibCG_SE(SLibCGIR_PV(843, 0, 39, 9, "", -1, "", 3)))>;
    /* '<S23>:1:40' hip_torque_to_pwm = MTR_MAX_COUNT/MTR_HIP_MAX_TORQUE; */
    HalfMaxTicks_idx_1 = %<(SLibCG_SE(SLibCGIR_PV(843, 0, 39, 9, "", -1, "", 2)))> / %<(SLibCG_SE(SLibCGIR_PV(843, 0, 39, 9, "", -1, "", 4)))>;
    /* Convert leg_motor_1L_torque_cmd */
    /* '<S23>:1:43' leg_motor_1L_direction = LEG3_MOTOR_A_DIRECTION; */
    /* '<S23>:1:44' y(1) = motor_torque_to_pwm(leg_motor_1L_direction,leg_torque_to_pwm,leg_motor_1L_torque_cmd); */
    /* '<S23>:1:69' motor_pwm = motor_direction*torque_to_pwm_const*motor_torque_cmd; */
    L2fh[0] = %<(SLibCG_SE(SLibCGIR_PV(843, 0, 39, 9, "", -1, "", 5)))> * HalfMaxTicks_idx_0 * RefAngle[3];
    /* Convert leg_motor_2L_torque_cmd */
    /* '<S23>:1:47' leg_motor_2L_direction = LEG3_MOTOR_B_DIRECTION; */
    /* '<S23>:1:48' y(2) = motor_torque_to_pwm(leg_motor_2L_direction,leg_torque_to_pwm,leg_motor_2L_torque_cmd); */
    /* '<S23>:1:69' motor_pwm = motor_direction*torque_to_pwm_const*motor_torque_cmd; */
    L2fh[1] = %<(SLibCG_SE(SLibCGIR_PV(843, 0, 39, 9, "", -1, "", 6)))> * HalfMaxTicks_idx_0 * RefAngle[4];
    /* Convert leg_motor_1R_torque_cmd */
    /* '<S23>:1:51' leg_motor_1R_direction = LEG4_MOTOR_A_DIRECTION; */
    /* '<S23>:1:52' y(3) = motor_torque_to_pwm(leg_motor_1R_direction,leg_torque_to_pwm,leg_motor_1R_torque_cmd); */
    /* '<S23>:1:69' motor_pwm = motor_direction*torque_to_pwm_const*motor_torque_cmd; */
    L2fh[2] = %<(SLibCG_SE(SLibCGIR_PV(843, 0, 39, 9, "", -1, "", 7)))> * HalfMaxTicks_idx_0 * RefAngle[0];
    /* Convert leg_motor_2R_torque_cmd */
    /* '<S23>:1:55' leg_motor_2R_direction = LEG4_MOTOR_B_DIRECTION; */
    /* '<S23>:1:56' y(4) = motor_torque_to_pwm(leg_motor_2R_direction,leg_torque_to_pwm,leg_motor_2R_torque_cmd); */
    /* '<S23>:1:69' motor_pwm = motor_direction*torque_to_pwm_const*motor_torque_cmd; */
    L2fh[3] = %<(SLibCG_SE(SLibCGIR_PV(843, 0, 39, 9, "", -1, "", 8)))> * HalfMaxTicks_idx_0 * RefAngle[1];
    /* Convert hip_motor_3R_torque_cmd */
    /* '<S23>:1:59' hip_motor_3R_direction = UMich_RIGHT_MOTOR_HIP_DIRECTION; */
    /* Verified experimentally */
    /* '<S23>:1:60' y(5) = motor_torque_to_pwm(hip_motor_3R_direction,hip_torque_to_pwm,hip_motor_3R_torque_cmd); */
    /* '<S23>:1:69' motor_pwm = motor_direction*torque_to_pwm_const*motor_torque_cmd; */
    L2fh[4] = %<(SLibCG_SE(SLibCGIR_PV(843, 0, 39, 9, "", -1, "", 1)))> * HalfMaxTicks_idx_1 * RefAngle[2];
    /* Convert hip_motor_3L_torque_cmd */
    /* '<S23>:1:63' hip_motor_3L_direction = UMich_LEFT_MOTOR_HIP_DIRECTION; */
    /* Verified experimentally */
    /* '<S23>:1:64' y(6) = motor_torque_to_pwm(hip_motor_3L_direction,hip_torque_to_pwm,hip_motor_3L_torque_cmd); */
    /* '<S23>:1:69' motor_pwm = motor_direction*torque_to_pwm_const*motor_torque_cmd; */
    L2fh[5] = %<(SLibCG_SE(SLibCGIR_PV(843, 0, 39, 9, "", -1, "", 0)))> * HalfMaxTicks_idx_1 * RefAngle[5];
}
/* End of MATLAB Function: '<S13>/convert_mtr_current_to_pwm' */

/* DataTypeConversion: '<S31>/Data Type Conversion5' */
if (L2fh[5] < 0.0) {
    HalfMaxTicks_idx_1 = ceil(L2fh[5]);
} else {
    HalfMaxTicks_idx_1 = floor(L2fh[5]);
}
if (rtIsNaN(HalfMaxTicks_idx_1) || rtIsInf(HalfMaxTicks_idx_1)) {
    HalfMaxTicks_idx_1 = 0.0;
} else {
    HalfMaxTicks_idx_1 = fmod(HalfMaxTicks_idx_1, 4.294967296E+9);
}
Walking01_withElmos_B.DataTypeConversion5 = HalfMaxTicks_idx_1 < 0.0 ? -(int32_T)(uint32_T)-HalfMaxTicks_idx_1 : (int32_T)(uint32_T)HalfMaxTicks_idx_1;
/* End of DataTypeConversion: '<S31>/Data Type Conversion5' */
%<tlcOutputsFcnOfS39B386>\
/* DataTypeConversion: '<S32>/Data Type Conversion3' */
if (Walking01_withElmos_B.MedullaCommandSafe < 0.0) {
    HalfMaxTicks_idx_1 = ceil(Walking01_withElmos_B.MedullaCommandSafe);
} else {
    HalfMaxTicks_idx_1 = floor(Walking01_withElmos_B.MedullaCommandSafe);
}
if (rtIsNaN(HalfMaxTicks_idx_1) || rtIsInf(HalfMaxTicks_idx_1)) {
    HalfMaxTicks_idx_1 = 0.0;
} else {
    HalfMaxTicks_idx_1 = fmod(HalfMaxTicks_idx_1, 256.0);
}
Walking01_withElmos_B.DataTypeConversion3_i = (uint8_T)(HalfMaxTicks_idx_1 < 0.0 ? (int32_T)(uint8_T)-(int8_T)(uint8_T)-HalfMaxTicks_idx_1 : (int32_T)(uint8_T)HalfMaxTicks_idx_1);
/* End of DataTypeConversion: '<S32>/Data Type Conversion3' */
%<tlcOutputsFcnOfS39B387>\
/* DataTypeConversion: '<S32>/Data Type Conversion4' */
if (rtb_DigitalClock_a < 0.0) {
    HalfMaxTicks_idx_1 = ceil(rtb_DigitalClock_a);
} else {
    HalfMaxTicks_idx_1 = floor(rtb_DigitalClock_a);
}
if (rtIsNaN(HalfMaxTicks_idx_1) || rtIsInf(HalfMaxTicks_idx_1)) {
    HalfMaxTicks_idx_1 = 0.0;
} else {
    HalfMaxTicks_idx_1 = fmod(HalfMaxTicks_idx_1, 65536.0);
}
Walking01_withElmos_B.DataTypeConversion4_h = (uint16_T)(HalfMaxTicks_idx_1 < 0.0 ? (int32_T)(uint16_T)-(int16_T)(uint16_T)-HalfMaxTicks_idx_1 : (int32_T)(uint16_T)HalfMaxTicks_idx_1);
/* End of DataTypeConversion: '<S32>/Data Type Conversion4' */
%<tlcOutputsFcnOfS39B388>\
/* DataTypeConversion: '<S32>/Data Type Conversion5' */
if (L2fh[4] < 0.0) {
    HalfMaxTicks_idx_1 = ceil(L2fh[4]);
} else {
    HalfMaxTicks_idx_1 = floor(L2fh[4]);
}
if (rtIsNaN(HalfMaxTicks_idx_1) || rtIsInf(HalfMaxTicks_idx_1)) {
    HalfMaxTicks_idx_1 = 0.0;
} else {
    HalfMaxTicks_idx_1 = fmod(HalfMaxTicks_idx_1, 4.294967296E+9);
}
Walking01_withElmos_B.DataTypeConversion5_e = HalfMaxTicks_idx_1 < 0.0 ? -(int32_T)(uint32_T)-HalfMaxTicks_idx_1 : (int32_T)(uint32_T)HalfMaxTicks_idx_1;
/* End of DataTypeConversion: '<S32>/Data Type Conversion5' */
%<tlcOutputsFcnOfS39B389>\
%<tlcOutputsFcnOfS39B390>\
%<tlcOutputsFcnOfS39B391>\
%<tlcOutputsFcnOfS39B392>\
%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[12], "Output",0)
/* MATLAB Function: '<S33>/TypecastAndCast1' */
%if SLibCG_SystemFcnArgAccessed("Walking01_with_TypecastAndCast1",12,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("Walking01_with_TypecastAndCast1", ["%<_modelSS>", "Walking01_withElmos_B.EtherCATRxVar9", "Walking01_withElmos_B.EtherCATRxVar11", "Walking01_withElmos_B.EtherCATRxVar12", "&Walking01_withElmos_B.sf_TypecastAndCast1"], 12, 0, 3, 0, 3, 39)>\

%endif
/* DataTypeConversion: '<S33>/Data Type Conversion3' */
if (Walking01_withElmos_B.MedullaCommandSafe < 0.0) {
    HalfMaxTicks_idx_1 = ceil(Walking01_withElmos_B.MedullaCommandSafe);
} else {
    HalfMaxTicks_idx_1 = floor(Walking01_withElmos_B.MedullaCommandSafe);
}
if (rtIsNaN(HalfMaxTicks_idx_1) || rtIsInf(HalfMaxTicks_idx_1)) {
    HalfMaxTicks_idx_1 = 0.0;
} else {
    HalfMaxTicks_idx_1 = fmod(HalfMaxTicks_idx_1, 256.0);
}
Walking01_withElmos_B.DataTypeConversion3_j = (uint8_T)(HalfMaxTicks_idx_1 < 0.0 ? (int32_T)(uint8_T)-(int8_T)(uint8_T)-HalfMaxTicks_idx_1 : (int32_T)(uint8_T)HalfMaxTicks_idx_1);
/* End of DataTypeConversion: '<S33>/Data Type Conversion3' */
%<tlcOutputsFcnOfS39B394>\
/* DataTypeConversion: '<S33>/Data Type Conversion4' */
if (rtb_DigitalClock_a < 0.0) {
    HalfMaxTicks_idx_1 = ceil(rtb_DigitalClock_a);
} else {
    HalfMaxTicks_idx_1 = floor(rtb_DigitalClock_a);
}
if (rtIsNaN(HalfMaxTicks_idx_1) || rtIsInf(HalfMaxTicks_idx_1)) {
    HalfMaxTicks_idx_1 = 0.0;
} else {
    HalfMaxTicks_idx_1 = fmod(HalfMaxTicks_idx_1, 65536.0);
}
Walking01_withElmos_B.DataTypeConversion4_a = (uint16_T)(HalfMaxTicks_idx_1 < 0.0 ? (int32_T)(uint16_T)-(int16_T)(uint16_T)-HalfMaxTicks_idx_1 : (int32_T)(uint16_T)HalfMaxTicks_idx_1);
/* End of DataTypeConversion: '<S33>/Data Type Conversion4' */
%<tlcOutputsFcnOfS39B395>\
/* DataTypeConversion: '<S33>/Data Type Conversion1' incorporates:
 *  Constant: '<S5>/ResetYaw1'
 */
if (Walking01_withElmos_P.IMUCommand < 0.0) {
    HalfMaxTicks_idx_1 = ceil(Walking01_withElmos_P.IMUCommand);
} else {
    HalfMaxTicks_idx_1 = floor(Walking01_withElmos_P.IMUCommand);
}
if (rtIsNaN(HalfMaxTicks_idx_1) || rtIsInf(HalfMaxTicks_idx_1)) {
    HalfMaxTicks_idx_1 = 0.0;
} else {
    HalfMaxTicks_idx_1 = fmod(HalfMaxTicks_idx_1, 65536.0);
}
Walking01_withElmos_B.DataTypeConversion1_l = (uint16_T)(HalfMaxTicks_idx_1 < 0.0 ? (int32_T)(uint16_T)-(int16_T)(uint16_T)-HalfMaxTicks_idx_1 : (int32_T)(uint16_T)HalfMaxTicks_idx_1);
/* End of DataTypeConversion: '<S33>/Data Type Conversion1' */
%<tlcOutputsFcnOfS39B397>\
%<tlcOutputsFcnOfS39B399>\
/* Switch: '<S34>/Switch' incorporates:
 *  Constant: '<S34>/Constant1'
 *  DataTypeConversion: '<S47>/Data Type Conversion6'
 */
if (Walking01_withElmos_B.EnableTargetTorque_f > %<(SLibCG_SE(SLibCGIR_PV(110, 0, 39, 1, "", -1, "", 0)))>) {
    /* DataTypeConversion: '<S47>/Data Type Conversion6' incorporates:
 *  Constant: '<S34>/MaxRatedCurrent'
 *  Fcn: '<S47>/Fcn'
 *  SignalConversion: '<S47>/ConcatBufferAtVector ConcatenateIn1'
 *  SignalConversion: '<S47>/ConcatBufferAtVector ConcatenateIn2'
 */
    HalfMaxTicks_idx_1 = floor(RefAngle[0] * 1000.0 / %<(SLibCG_SE(SLibCGIR_PV(535, 0, 39, 1, "", -1, "", 0)))>);
    if (rtIsNaN(HalfMaxTicks_idx_1) || rtIsInf(HalfMaxTicks_idx_1)) {
        HalfMaxTicks_idx_1 = 0.0;
    } else {
        HalfMaxTicks_idx_1 = fmod(HalfMaxTicks_idx_1, 65536.0);
    }
    Walking01_withElmos_B.Switch = (int16_T)(HalfMaxTicks_idx_1 < 0.0 ? (int32_T)(int16_T)-(int16_T)(uint16_T)-HalfMaxTicks_idx_1 : (int32_T)(int16_T)(uint16_T)HalfMaxTicks_idx_1);
} else {
    Walking01_withElmos_B.Switch = %<(SLibCG_SE(SLibCGIR_PV(947, 0, 39, 1, "", -1, "", 0)))>;
}
/* End of Switch: '<S34>/Switch' */
%<tlcOutputsFcnOfS39B401>\
/* SwitchCase: '<S48>/Switch Case' */
if (Walking01_withElmos_B.ControlWordIndex_j < 0.0) {
    HalfMaxTicks_idx_1 = ceil(Walking01_withElmos_B.ControlWordIndex_j);
} else {
    HalfMaxTicks_idx_1 = floor(Walking01_withElmos_B.ControlWordIndex_j);
}
if (rtIsNaN(HalfMaxTicks_idx_1) || rtIsInf(HalfMaxTicks_idx_1)) {
    HalfMaxTicks_idx_1 = 0.0;
} else {
    HalfMaxTicks_idx_1 = fmod(HalfMaxTicks_idx_1, 4.294967296E+9);
}
switch (HalfMaxTicks_idx_1 < 0.0 ? -(int32_T)(uint32_T)-HalfMaxTicks_idx_1 : (int32_T)(uint32_T)HalfMaxTicks_idx_1) {
  case 1:
%assign   Outputs_open_ShutdownControlWord_39_686 = ""
%openfile Outputs_open_ShutdownControlWord_39_686

    /* Outputs for IfAction SubSystem: '<S48>/ShutdownControlWord' incorporates:
 *  ActionPort: '<S58>/Action Port'
 */
%closefile Outputs_open_ShutdownControlWord_39_686

%assign    Outputs_body_ShutdownControlWord_39_686 = ""
%openfile  Outputs_body_ShutdownControlWord_39_686

%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[15], "Output",0)
%if SLibCG_SystemFcnArgAccessed("Walking01_w_ShutdownControlWord",15,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("Walking01_w_ShutdownControlWord", ["%<_modelSS>", "&Walking01_withElmos_B.Merge"], 15, 0, 3, 0, 3, 39)>\

%endif
%closefile Outputs_body_ShutdownControlWord_39_686

%assign    Outputs_close_ShutdownControlWord_39_686 = ""
%openfile  Outputs_close_ShutdownControlWord_39_686

    /* End of Outputs for SubSystem: '<S48>/ShutdownControlWord' */
%closefile Outputs_close_ShutdownControlWord_39_686
%<SLibCG_DumpSSCode(Outputs_open_ShutdownControlWord_39_686, Outputs_body_ShutdownControlWord_39_686, Outputs_close_ShutdownControlWord_39_686)>

    break;
  case 2:
%assign   Outputs_open_EnableControlWord_39_687 = ""
%openfile Outputs_open_EnableControlWord_39_687

    /* Outputs for IfAction SubSystem: '<S48>/EnableControlWord' incorporates:
 *  ActionPort: '<S55>/Action Port'
 */
%closefile Outputs_open_EnableControlWord_39_687

%assign    Outputs_body_EnableControlWord_39_687 = ""
%openfile  Outputs_body_EnableControlWord_39_687

%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[16], "Output",0)
%if SLibCG_SystemFcnArgAccessed("Walking01_wit_EnableControlWord",16,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("Walking01_wit_EnableControlWord", ["%<_modelSS>", "&Walking01_withElmos_B.Merge"], 16, 0, 3, 0, 3, 39)>\

%endif
%closefile Outputs_body_EnableControlWord_39_687

%assign    Outputs_close_EnableControlWord_39_687 = ""
%openfile  Outputs_close_EnableControlWord_39_687

    /* End of Outputs for SubSystem: '<S48>/EnableControlWord' */
%closefile Outputs_close_EnableControlWord_39_687
%<SLibCG_DumpSSCode(Outputs_open_EnableControlWord_39_687, Outputs_body_EnableControlWord_39_687, Outputs_close_EnableControlWord_39_687)>

    break;
  case 3:
%assign   Outputs_open_FaultReset_39_688 = ""
%openfile Outputs_open_FaultReset_39_688

    /* Outputs for IfAction SubSystem: '<S48>/FaultReset' incorporates:
 *  ActionPort: '<S56>/Action Port'
 */
%closefile Outputs_open_FaultReset_39_688

%assign    Outputs_body_FaultReset_39_688 = ""
%openfile  Outputs_body_FaultReset_39_688

%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[17], "Output",0)
%if SLibCG_SystemFcnArgAccessed("Walking01_withElmos_FaultReset",17,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("Walking01_withElmos_FaultReset", ["%<_modelSS>", "&Walking01_withElmos_B.Merge"], 17, 0, 3, 0, 3, 39)>\

%endif
%closefile Outputs_body_FaultReset_39_688

%assign    Outputs_close_FaultReset_39_688 = ""
%openfile  Outputs_close_FaultReset_39_688

    /* End of Outputs for SubSystem: '<S48>/FaultReset' */
%closefile Outputs_close_FaultReset_39_688
%<SLibCG_DumpSSCode(Outputs_open_FaultReset_39_688, Outputs_body_FaultReset_39_688, Outputs_close_FaultReset_39_688)>

    break;
  default:
%assign   Outputs_open_NothingControlWord_39_689 = ""
%openfile Outputs_open_NothingControlWord_39_689

    /* Outputs for IfAction SubSystem: '<S48>/NothingControlWord' incorporates:
 *  ActionPort: '<S57>/Action Port'
 */
%closefile Outputs_open_NothingControlWord_39_689

%assign    Outputs_body_NothingControlWord_39_689 = ""
%openfile  Outputs_body_NothingControlWord_39_689

%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[18], "Output",0)
%if SLibCG_SystemFcnArgAccessed("Walking01_wi_NothingControlWord",18,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("Walking01_wi_NothingControlWord", ["%<_modelSS>", "&Walking01_withElmos_B.Merge"], 18, 0, 3, 0, 3, 39)>\

%endif
%closefile Outputs_body_NothingControlWord_39_689

%assign    Outputs_close_NothingControlWord_39_689 = ""
%openfile  Outputs_close_NothingControlWord_39_689

    /* End of Outputs for SubSystem: '<S48>/NothingControlWord' */
%closefile Outputs_close_NothingControlWord_39_689
%<SLibCG_DumpSSCode(Outputs_open_NothingControlWord_39_689, Outputs_body_NothingControlWord_39_689, Outputs_close_NothingControlWord_39_689)>

    break;
}
/* End of SwitchCase: '<S48>/Switch Case' */
%<tlcOutputsFcnOfS39B406>\
%<tlcOutputsFcnOfS39B408>\
%<tlcOutputsFcnOfS39B410>\
/* Switch: '<S35>/Switch' incorporates:
 *  Constant: '<S35>/Constant1'
 *  DataTypeConversion: '<S65>/Data Type Conversion6'
 */
if (Walking01_withElmos_B.sf_Chart.EnableTargetTorque > %<(SLibCG_SE(SLibCGIR_PV(110, 0, 39, 1, "", -1, "", 0)))>) {
    /* DataTypeConversion: '<S65>/Data Type Conversion6' incorporates:
 *  Constant: '<S35>/MaxRatedCurrent'
 *  Fcn: '<S65>/Fcn'
 *  SignalConversion: '<S65>/ConcatBufferAtVector ConcatenateIn1'
 *  SignalConversion: '<S65>/ConcatBufferAtVector ConcatenateIn2'
 */
    HalfMaxTicks_idx_1 = floor(RefAngle[2] * 1000.0 / %<(SLibCG_SE(SLibCGIR_PV(535, 0, 39, 1, "", -1, "", 0)))>);
    if (rtIsNaN(HalfMaxTicks_idx_1) || rtIsInf(HalfMaxTicks_idx_1)) {
        HalfMaxTicks_idx_1 = 0.0;
    } else {
        HalfMaxTicks_idx_1 = fmod(HalfMaxTicks_idx_1, 65536.0);
    }
    Walking01_withElmos_B.Switch_a = (int16_T)(HalfMaxTicks_idx_1 < 0.0 ? (int32_T)(int16_T)-(int16_T)(uint16_T)-HalfMaxTicks_idx_1 : (int32_T)(int16_T)(uint16_T)HalfMaxTicks_idx_1);
} else {
    Walking01_withElmos_B.Switch_a = %<(SLibCG_SE(SLibCGIR_PV(947, 0, 39, 1, "", -1, "", 0)))>;
}
/* End of Switch: '<S35>/Switch' */
%<tlcOutputsFcnOfS39B412>\
/* SwitchCase: '<S66>/Switch Case' */
if (Walking01_withElmos_B.sf_Chart.ControlWordIndex < 0.0) {
    HalfMaxTicks_idx_1 = ceil(Walking01_withElmos_B.sf_Chart.ControlWordIndex);
} else {
    HalfMaxTicks_idx_1 = floor(Walking01_withElmos_B.sf_Chart.ControlWordIndex);
}
if (rtIsNaN(HalfMaxTicks_idx_1) || rtIsInf(HalfMaxTicks_idx_1)) {
    HalfMaxTicks_idx_1 = 0.0;
} else {
    HalfMaxTicks_idx_1 = fmod(HalfMaxTicks_idx_1, 4.294967296E+9);
}
switch (HalfMaxTicks_idx_1 < 0.0 ? -(int32_T)(uint32_T)-HalfMaxTicks_idx_1 : (int32_T)(uint32_T)HalfMaxTicks_idx_1) {
  case 1:
%assign   Outputs_open_ShutdownControlWord_h_39_700 = ""
%openfile Outputs_open_ShutdownControlWord_h_39_700

    /* Outputs for IfAction SubSystem: '<S66>/ShutdownControlWord' incorporates:
 *  ActionPort: '<S76>/Action Port'
 */
%closefile Outputs_open_ShutdownControlWord_h_39_700

%assign    Outputs_body_ShutdownControlWord_h_39_700 = ""
%openfile  Outputs_body_ShutdownControlWord_h_39_700

%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[15], "Output",0)
%if SLibCG_SystemFcnArgAccessed("Walking01_w_ShutdownControlWord",15,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("Walking01_w_ShutdownControlWord", ["%<_modelSS>", "&Walking01_withElmos_B.Merge_l"], 15, 1, 3, 0, 3, 39)>\

%endif
%closefile Outputs_body_ShutdownControlWord_h_39_700

%assign    Outputs_close_ShutdownControlWord_h_39_700 = ""
%openfile  Outputs_close_ShutdownControlWord_h_39_700

    /* End of Outputs for SubSystem: '<S66>/ShutdownControlWord' */
%closefile Outputs_close_ShutdownControlWord_h_39_700
%<SLibCG_DumpSSCode(Outputs_open_ShutdownControlWord_h_39_700, Outputs_body_ShutdownControlWord_h_39_700, Outputs_close_ShutdownControlWord_h_39_700)>

    break;
  case 2:
%assign   Outputs_open_EnableControlWord_c_39_701 = ""
%openfile Outputs_open_EnableControlWord_c_39_701

    /* Outputs for IfAction SubSystem: '<S66>/EnableControlWord' incorporates:
 *  ActionPort: '<S73>/Action Port'
 */
%closefile Outputs_open_EnableControlWord_c_39_701

%assign    Outputs_body_EnableControlWord_c_39_701 = ""
%openfile  Outputs_body_EnableControlWord_c_39_701

%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[16], "Output",0)
%if SLibCG_SystemFcnArgAccessed("Walking01_wit_EnableControlWord",16,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("Walking01_wit_EnableControlWord", ["%<_modelSS>", "&Walking01_withElmos_B.Merge_l"], 16, 1, 3, 0, 3, 39)>\

%endif
%closefile Outputs_body_EnableControlWord_c_39_701

%assign    Outputs_close_EnableControlWord_c_39_701 = ""
%openfile  Outputs_close_EnableControlWord_c_39_701

    /* End of Outputs for SubSystem: '<S66>/EnableControlWord' */
%closefile Outputs_close_EnableControlWord_c_39_701
%<SLibCG_DumpSSCode(Outputs_open_EnableControlWord_c_39_701, Outputs_body_EnableControlWord_c_39_701, Outputs_close_EnableControlWord_c_39_701)>

    break;
  case 3:
%assign   Outputs_open_FaultReset_c_39_702 = ""
%openfile Outputs_open_FaultReset_c_39_702

    /* Outputs for IfAction SubSystem: '<S66>/FaultReset' incorporates:
 *  ActionPort: '<S74>/Action Port'
 */
%closefile Outputs_open_FaultReset_c_39_702

%assign    Outputs_body_FaultReset_c_39_702 = ""
%openfile  Outputs_body_FaultReset_c_39_702

%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[17], "Output",0)
%if SLibCG_SystemFcnArgAccessed("Walking01_withElmos_FaultReset",17,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("Walking01_withElmos_FaultReset", ["%<_modelSS>", "&Walking01_withElmos_B.Merge_l"], 17, 1, 3, 0, 3, 39)>\

%endif
%closefile Outputs_body_FaultReset_c_39_702

%assign    Outputs_close_FaultReset_c_39_702 = ""
%openfile  Outputs_close_FaultReset_c_39_702

    /* End of Outputs for SubSystem: '<S66>/FaultReset' */
%closefile Outputs_close_FaultReset_c_39_702
%<SLibCG_DumpSSCode(Outputs_open_FaultReset_c_39_702, Outputs_body_FaultReset_c_39_702, Outputs_close_FaultReset_c_39_702)>

    break;
  default:
%assign   Outputs_open_NothingControlWord_d_39_703 = ""
%openfile Outputs_open_NothingControlWord_d_39_703

    /* Outputs for IfAction SubSystem: '<S66>/NothingControlWord' incorporates:
 *  ActionPort: '<S75>/Action Port'
 */
%closefile Outputs_open_NothingControlWord_d_39_703

%assign    Outputs_body_NothingControlWord_d_39_703 = ""
%openfile  Outputs_body_NothingControlWord_d_39_703

%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[18], "Output",0)
%if SLibCG_SystemFcnArgAccessed("Walking01_wi_NothingControlWord",18,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("Walking01_wi_NothingControlWord", ["%<_modelSS>", "&Walking01_withElmos_B.Merge_l"], 18, 1, 3, 0, 3, 39)>\

%endif
%closefile Outputs_body_NothingControlWord_d_39_703

%assign    Outputs_close_NothingControlWord_d_39_703 = ""
%openfile  Outputs_close_NothingControlWord_d_39_703

    /* End of Outputs for SubSystem: '<S66>/NothingControlWord' */
%closefile Outputs_close_NothingControlWord_d_39_703
%<SLibCG_DumpSSCode(Outputs_open_NothingControlWord_d_39_703, Outputs_body_NothingControlWord_d_39_703, Outputs_close_NothingControlWord_d_39_703)>

    break;
}
/* End of SwitchCase: '<S66>/Switch Case' */
%<tlcOutputsFcnOfS39B417>\
%<tlcOutputsFcnOfS39B419>\
%<tlcOutputsFcnOfS39B421>\
/* Switch: '<S36>/Switch' incorporates:
 *  Constant: '<S36>/Constant1'
 *  DataTypeConversion: '<S83>/Data Type Conversion6'
 */
if (Walking01_withElmos_B.EnableTargetTorque > %<(SLibCG_SE(SLibCGIR_PV(110, 0, 39, 1, "", -1, "", 0)))>) {
    /* DataTypeConversion: '<S83>/Data Type Conversion6' incorporates:
 *  Constant: '<S36>/MaxRatedCurrent'
 *  Fcn: '<S83>/Fcn'
 *  SignalConversion: '<S83>/ConcatBufferAtVector ConcatenateIn1'
 *  SignalConversion: '<S83>/ConcatBufferAtVector ConcatenateIn2'
 */
    HalfMaxTicks_idx_1 = floor(RefAngle[1] * 1000.0 / %<(SLibCG_SE(SLibCGIR_PV(535, 0, 39, 1, "", -1, "", 0)))>);
    if (rtIsNaN(HalfMaxTicks_idx_1) || rtIsInf(HalfMaxTicks_idx_1)) {
        HalfMaxTicks_idx_1 = 0.0;
    } else {
        HalfMaxTicks_idx_1 = fmod(HalfMaxTicks_idx_1, 65536.0);
    }
    Walking01_withElmos_B.Switch_d = (int16_T)(HalfMaxTicks_idx_1 < 0.0 ? (int32_T)(int16_T)-(int16_T)(uint16_T)-HalfMaxTicks_idx_1 : (int32_T)(int16_T)(uint16_T)HalfMaxTicks_idx_1);
} else {
    Walking01_withElmos_B.Switch_d = %<(SLibCG_SE(SLibCGIR_PV(947, 0, 39, 1, "", -1, "", 0)))>;
}
/* End of Switch: '<S36>/Switch' */
%<tlcOutputsFcnOfS39B423>\
/* SwitchCase: '<S84>/Switch Case' */
if (Walking01_withElmos_B.ControlWordIndex < 0.0) {
    HalfMaxTicks_idx_1 = ceil(Walking01_withElmos_B.ControlWordIndex);
} else {
    HalfMaxTicks_idx_1 = floor(Walking01_withElmos_B.ControlWordIndex);
}
if (rtIsNaN(HalfMaxTicks_idx_1) || rtIsInf(HalfMaxTicks_idx_1)) {
    HalfMaxTicks_idx_1 = 0.0;
} else {
    HalfMaxTicks_idx_1 = fmod(HalfMaxTicks_idx_1, 4.294967296E+9);
}
switch (HalfMaxTicks_idx_1 < 0.0 ? -(int32_T)(uint32_T)-HalfMaxTicks_idx_1 : (int32_T)(uint32_T)HalfMaxTicks_idx_1) {
  case 1:
%assign   Outputs_open_ShutdownControlWord_j_39_714 = ""
%openfile Outputs_open_ShutdownControlWord_j_39_714

    /* Outputs for IfAction SubSystem: '<S84>/ShutdownControlWord' incorporates:
 *  ActionPort: '<S94>/Action Port'
 */
%closefile Outputs_open_ShutdownControlWord_j_39_714

%assign    Outputs_body_ShutdownControlWord_j_39_714 = ""
%openfile  Outputs_body_ShutdownControlWord_j_39_714

%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[15], "Output",0)
%if SLibCG_SystemFcnArgAccessed("Walking01_w_ShutdownControlWord",15,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("Walking01_w_ShutdownControlWord", ["%<_modelSS>", "&Walking01_withElmos_B.Merge_h"], 15, 2, 3, 0, 3, 39)>\

%endif
%closefile Outputs_body_ShutdownControlWord_j_39_714

%assign    Outputs_close_ShutdownControlWord_j_39_714 = ""
%openfile  Outputs_close_ShutdownControlWord_j_39_714

    /* End of Outputs for SubSystem: '<S84>/ShutdownControlWord' */
%closefile Outputs_close_ShutdownControlWord_j_39_714
%<SLibCG_DumpSSCode(Outputs_open_ShutdownControlWord_j_39_714, Outputs_body_ShutdownControlWord_j_39_714, Outputs_close_ShutdownControlWord_j_39_714)>

    break;
  case 2:
%assign   Outputs_open_EnableControlWord_l_39_715 = ""
%openfile Outputs_open_EnableControlWord_l_39_715

    /* Outputs for IfAction SubSystem: '<S84>/EnableControlWord' incorporates:
 *  ActionPort: '<S91>/Action Port'
 */
%closefile Outputs_open_EnableControlWord_l_39_715

%assign    Outputs_body_EnableControlWord_l_39_715 = ""
%openfile  Outputs_body_EnableControlWord_l_39_715

%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[16], "Output",0)
%if SLibCG_SystemFcnArgAccessed("Walking01_wit_EnableControlWord",16,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("Walking01_wit_EnableControlWord", ["%<_modelSS>", "&Walking01_withElmos_B.Merge_h"], 16, 2, 3, 0, 3, 39)>\

%endif
%closefile Outputs_body_EnableControlWord_l_39_715

%assign    Outputs_close_EnableControlWord_l_39_715 = ""
%openfile  Outputs_close_EnableControlWord_l_39_715

    /* End of Outputs for SubSystem: '<S84>/EnableControlWord' */
%closefile Outputs_close_EnableControlWord_l_39_715
%<SLibCG_DumpSSCode(Outputs_open_EnableControlWord_l_39_715, Outputs_body_EnableControlWord_l_39_715, Outputs_close_EnableControlWord_l_39_715)>

    break;
  case 3:
%assign   Outputs_open_FaultReset_n_39_716 = ""
%openfile Outputs_open_FaultReset_n_39_716

    /* Outputs for IfAction SubSystem: '<S84>/FaultReset' incorporates:
 *  ActionPort: '<S92>/Action Port'
 */
%closefile Outputs_open_FaultReset_n_39_716

%assign    Outputs_body_FaultReset_n_39_716 = ""
%openfile  Outputs_body_FaultReset_n_39_716

%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[17], "Output",0)
%if SLibCG_SystemFcnArgAccessed("Walking01_withElmos_FaultReset",17,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("Walking01_withElmos_FaultReset", ["%<_modelSS>", "&Walking01_withElmos_B.Merge_h"], 17, 2, 3, 0, 3, 39)>\

%endif
%closefile Outputs_body_FaultReset_n_39_716

%assign    Outputs_close_FaultReset_n_39_716 = ""
%openfile  Outputs_close_FaultReset_n_39_716

    /* End of Outputs for SubSystem: '<S84>/FaultReset' */
%closefile Outputs_close_FaultReset_n_39_716
%<SLibCG_DumpSSCode(Outputs_open_FaultReset_n_39_716, Outputs_body_FaultReset_n_39_716, Outputs_close_FaultReset_n_39_716)>

    break;
  default:
%assign   Outputs_open_NothingControlWord_k_39_717 = ""
%openfile Outputs_open_NothingControlWord_k_39_717

    /* Outputs for IfAction SubSystem: '<S84>/NothingControlWord' incorporates:
 *  ActionPort: '<S93>/Action Port'
 */
%closefile Outputs_open_NothingControlWord_k_39_717

%assign    Outputs_body_NothingControlWord_k_39_717 = ""
%openfile  Outputs_body_NothingControlWord_k_39_717

%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[18], "Output",0)
%if SLibCG_SystemFcnArgAccessed("Walking01_wi_NothingControlWord",18,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("Walking01_wi_NothingControlWord", ["%<_modelSS>", "&Walking01_withElmos_B.Merge_h"], 18, 2, 3, 0, 3, 39)>\

%endif
%closefile Outputs_body_NothingControlWord_k_39_717

%assign    Outputs_close_NothingControlWord_k_39_717 = ""
%openfile  Outputs_close_NothingControlWord_k_39_717

    /* End of Outputs for SubSystem: '<S84>/NothingControlWord' */
%closefile Outputs_close_NothingControlWord_k_39_717
%<SLibCG_DumpSSCode(Outputs_open_NothingControlWord_k_39_717, Outputs_body_NothingControlWord_k_39_717, Outputs_close_NothingControlWord_k_39_717)>

    break;
}
/* End of SwitchCase: '<S84>/Switch Case' */
%<tlcOutputsFcnOfS39B428>\
%<tlcOutputsFcnOfS39B430>\
%<tlcOutputsFcnOfS39B432>\
/* Switch: '<S37>/Switch' incorporates:
 *  Constant: '<S37>/Constant1'
 *  DataTypeConversion: '<S101>/Data Type Conversion6'
 */
if (Walking01_withElmos_B.sf_Chart_b.EnableTargetTorque > %<(SLibCG_SE(SLibCGIR_PV(110, 0, 39, 1, "", -1, "", 0)))>) {
    /* DataTypeConversion: '<S101>/Data Type Conversion6' incorporates:
 *  Constant: '<S37>/MaxRatedCurrent'
 *  Fcn: '<S101>/Fcn'
 *  SignalConversion: '<S101>/ConcatBufferAtVector ConcatenateIn1'
 *  SignalConversion: '<S101>/ConcatBufferAtVector ConcatenateIn2'
 */
    HalfMaxTicks_idx_1 = floor(RefAngle[3] * 1000.0 / %<(SLibCG_SE(SLibCGIR_PV(535, 0, 39, 1, "", -1, "", 0)))>);
    if (rtIsNaN(HalfMaxTicks_idx_1) || rtIsInf(HalfMaxTicks_idx_1)) {
        HalfMaxTicks_idx_1 = 0.0;
    } else {
        HalfMaxTicks_idx_1 = fmod(HalfMaxTicks_idx_1, 65536.0);
    }
    Walking01_withElmos_B.Switch_i = (int16_T)(HalfMaxTicks_idx_1 < 0.0 ? (int32_T)(int16_T)-(int16_T)(uint16_T)-HalfMaxTicks_idx_1 : (int32_T)(int16_T)(uint16_T)HalfMaxTicks_idx_1);
} else {
    Walking01_withElmos_B.Switch_i = %<(SLibCG_SE(SLibCGIR_PV(947, 0, 39, 1, "", -1, "", 0)))>;
}
/* End of Switch: '<S37>/Switch' */
%<tlcOutputsFcnOfS39B434>\
/* SwitchCase: '<S102>/Switch Case' */
if (Walking01_withElmos_B.sf_Chart_b.ControlWordIndex < 0.0) {
    HalfMaxTicks_idx_1 = ceil(Walking01_withElmos_B.sf_Chart_b.ControlWordIndex);
} else {
    HalfMaxTicks_idx_1 = floor(Walking01_withElmos_B.sf_Chart_b.ControlWordIndex);
}
if (rtIsNaN(HalfMaxTicks_idx_1) || rtIsInf(HalfMaxTicks_idx_1)) {
    HalfMaxTicks_idx_1 = 0.0;
} else {
    HalfMaxTicks_idx_1 = fmod(HalfMaxTicks_idx_1, 4.294967296E+9);
}
switch (HalfMaxTicks_idx_1 < 0.0 ? -(int32_T)(uint32_T)-HalfMaxTicks_idx_1 : (int32_T)(uint32_T)HalfMaxTicks_idx_1) {
  case 1:
%assign   Outputs_open_ShutdownControlWord_ju_39_728 = ""
%openfile Outputs_open_ShutdownControlWord_ju_39_728

    /* Outputs for IfAction SubSystem: '<S102>/ShutdownControlWord' incorporates:
 *  ActionPort: '<S112>/Action Port'
 */
%closefile Outputs_open_ShutdownControlWord_ju_39_728

%assign    Outputs_body_ShutdownControlWord_ju_39_728 = ""
%openfile  Outputs_body_ShutdownControlWord_ju_39_728

%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[15], "Output",0)
%if SLibCG_SystemFcnArgAccessed("Walking01_w_ShutdownControlWord",15,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("Walking01_w_ShutdownControlWord", ["%<_modelSS>", "&Walking01_withElmos_B.Merge_e"], 15, 3, 3, 0, 3, 39)>\

%endif
%closefile Outputs_body_ShutdownControlWord_ju_39_728

%assign    Outputs_close_ShutdownControlWord_ju_39_728 = ""
%openfile  Outputs_close_ShutdownControlWord_ju_39_728

    /* End of Outputs for SubSystem: '<S102>/ShutdownControlWord' */
%closefile Outputs_close_ShutdownControlWord_ju_39_728
%<SLibCG_DumpSSCode(Outputs_open_ShutdownControlWord_ju_39_728, Outputs_body_ShutdownControlWord_ju_39_728, Outputs_close_ShutdownControlWord_ju_39_728)>

    break;
  case 2:
%assign   Outputs_open_EnableControlWord_m_39_729 = ""
%openfile Outputs_open_EnableControlWord_m_39_729

    /* Outputs for IfAction SubSystem: '<S102>/EnableControlWord' incorporates:
 *  ActionPort: '<S109>/Action Port'
 */
%closefile Outputs_open_EnableControlWord_m_39_729

%assign    Outputs_body_EnableControlWord_m_39_729 = ""
%openfile  Outputs_body_EnableControlWord_m_39_729

%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[16], "Output",0)
%if SLibCG_SystemFcnArgAccessed("Walking01_wit_EnableControlWord",16,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("Walking01_wit_EnableControlWord", ["%<_modelSS>", "&Walking01_withElmos_B.Merge_e"], 16, 3, 3, 0, 3, 39)>\

%endif
%closefile Outputs_body_EnableControlWord_m_39_729

%assign    Outputs_close_EnableControlWord_m_39_729 = ""
%openfile  Outputs_close_EnableControlWord_m_39_729

    /* End of Outputs for SubSystem: '<S102>/EnableControlWord' */
%closefile Outputs_close_EnableControlWord_m_39_729
%<SLibCG_DumpSSCode(Outputs_open_EnableControlWord_m_39_729, Outputs_body_EnableControlWord_m_39_729, Outputs_close_EnableControlWord_m_39_729)>

    break;
  case 3:
%assign   Outputs_open_FaultReset_i_39_730 = ""
%openfile Outputs_open_FaultReset_i_39_730

    /* Outputs for IfAction SubSystem: '<S102>/FaultReset' incorporates:
 *  ActionPort: '<S110>/Action Port'
 */
%closefile Outputs_open_FaultReset_i_39_730

%assign    Outputs_body_FaultReset_i_39_730 = ""
%openfile  Outputs_body_FaultReset_i_39_730

%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[17], "Output",0)
%if SLibCG_SystemFcnArgAccessed("Walking01_withElmos_FaultReset",17,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("Walking01_withElmos_FaultReset", ["%<_modelSS>", "&Walking01_withElmos_B.Merge_e"], 17, 3, 3, 0, 3, 39)>\

%endif
%closefile Outputs_body_FaultReset_i_39_730

%assign    Outputs_close_FaultReset_i_39_730 = ""
%openfile  Outputs_close_FaultReset_i_39_730

    /* End of Outputs for SubSystem: '<S102>/FaultReset' */
%closefile Outputs_close_FaultReset_i_39_730
%<SLibCG_DumpSSCode(Outputs_open_FaultReset_i_39_730, Outputs_body_FaultReset_i_39_730, Outputs_close_FaultReset_i_39_730)>

    break;
  default:
%assign   Outputs_open_NothingControlWord_m_39_731 = ""
%openfile Outputs_open_NothingControlWord_m_39_731

    /* Outputs for IfAction SubSystem: '<S102>/NothingControlWord' incorporates:
 *  ActionPort: '<S111>/Action Port'
 */
%closefile Outputs_open_NothingControlWord_m_39_731

%assign    Outputs_body_NothingControlWord_m_39_731 = ""
%openfile  Outputs_body_NothingControlWord_m_39_731

%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[18], "Output",0)
%if SLibCG_SystemFcnArgAccessed("Walking01_wi_NothingControlWord",18,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif

%<SLibCGIRGenReusableSysCall("Walking01_wi_NothingControlWord", ["%<_modelSS>", "&Walking01_withElmos_B.Merge_e"], 18, 3, 3, 0, 3, 39)>\

%endif
%closefile Outputs_body_NothingControlWord_m_39_731

%assign    Outputs_close_NothingControlWord_m_39_731 = ""
%openfile  Outputs_close_NothingControlWord_m_39_731

    /* End of Outputs for SubSystem: '<S102>/NothingControlWord' */
%closefile Outputs_close_NothingControlWord_m_39_731
%<SLibCG_DumpSSCode(Outputs_open_NothingControlWord_m_39_731, Outputs_body_NothingControlWord_m_39_731, Outputs_close_NothingControlWord_m_39_731)>

    break;
}
/* End of SwitchCase: '<S102>/Switch Case' */
%<tlcOutputsFcnOfS39B439>\
%<tlcOutputsFcnOfS39B441>\
/* DataTypeConversion: '<S38>/Data Type Conversion3' */
if (Walking01_withElmos_B.MedullaCommandSafe < 0.0) {
    HalfMaxTicks_idx_1 = ceil(Walking01_withElmos_B.MedullaCommandSafe);
} else {
    HalfMaxTicks_idx_1 = floor(Walking01_withElmos_B.MedullaCommandSafe);
}
if (rtIsNaN(HalfMaxTicks_idx_1) || rtIsInf(HalfMaxTicks_idx_1)) {
    HalfMaxTicks_idx_1 = 0.0;
} else {
    HalfMaxTicks_idx_1 = fmod(HalfMaxTicks_idx_1, 256.0);
}
Walking01_withElmos_B.DataTypeConversion3_f = (uint8_T)(HalfMaxTicks_idx_1 < 0.0 ? (int32_T)(uint8_T)-(int8_T)(uint8_T)-HalfMaxTicks_idx_1 : (int32_T)(uint8_T)HalfMaxTicks_idx_1);
/* End of DataTypeConversion: '<S38>/Data Type Conversion3' */
%<tlcOutputsFcnOfS39B442>\
/* DataTypeConversion: '<S38>/Data Type Conversion4' */
if (rtb_DigitalClock_a < 0.0) {
    HalfMaxTicks_idx_1 = ceil(rtb_DigitalClock_a);
} else {
    HalfMaxTicks_idx_1 = floor(rtb_DigitalClock_a);
}
if (rtIsNaN(HalfMaxTicks_idx_1) || rtIsInf(HalfMaxTicks_idx_1)) {
    HalfMaxTicks_idx_1 = 0.0;
} else {
    HalfMaxTicks_idx_1 = fmod(HalfMaxTicks_idx_1, 65536.0);
}
Walking01_withElmos_B.DataTypeConversion4_k = (uint16_T)(HalfMaxTicks_idx_1 < 0.0 ? (int32_T)(uint16_T)-(int16_T)(uint16_T)-HalfMaxTicks_idx_1 : (int32_T)(uint16_T)HalfMaxTicks_idx_1);
/* End of DataTypeConversion: '<S38>/Data Type Conversion4' */
%<tlcOutputsFcnOfS39B443>\
/* DataTypeConversion: '<S38>/Data Type Conversion5' */
if (L2fh[0] < 0.0) {
    HalfMaxTicks_idx_1 = ceil(L2fh[0]);
} else {
    HalfMaxTicks_idx_1 = floor(L2fh[0]);
}
if (rtIsNaN(HalfMaxTicks_idx_1) || rtIsInf(HalfMaxTicks_idx_1)) {
    HalfMaxTicks_idx_1 = 0.0;
} else {
    HalfMaxTicks_idx_1 = fmod(HalfMaxTicks_idx_1, 4.294967296E+9);
}
Walking01_withElmos_B.DataTypeConversion5_n = HalfMaxTicks_idx_1 < 0.0 ? -(int32_T)(uint32_T)-HalfMaxTicks_idx_1 : (int32_T)(uint32_T)HalfMaxTicks_idx_1;
/* End of DataTypeConversion: '<S38>/Data Type Conversion5' */
%<tlcOutputsFcnOfS39B444>\
/* DataTypeConversion: '<S39>/Data Type Conversion3' */
if (Walking01_withElmos_B.MedullaCommandSafe < 0.0) {
    HalfMaxTicks_idx_1 = ceil(Walking01_withElmos_B.MedullaCommandSafe);
} else {
    HalfMaxTicks_idx_1 = floor(Walking01_withElmos_B.MedullaCommandSafe);
}
if (rtIsNaN(HalfMaxTicks_idx_1) || rtIsInf(HalfMaxTicks_idx_1)) {
    HalfMaxTicks_idx_1 = 0.0;
} else {
    HalfMaxTicks_idx_1 = fmod(HalfMaxTicks_idx_1, 256.0);
}
Walking01_withElmos_B.DataTypeConversion3_g = (uint8_T)(HalfMaxTicks_idx_1 < 0.0 ? (int32_T)(uint8_T)-(int8_T)(uint8_T)-HalfMaxTicks_idx_1 : (int32_T)(uint8_T)HalfMaxTicks_idx_1);
/* End of DataTypeConversion: '<S39>/Data Type Conversion3' */
%<tlcOutputsFcnOfS39B445>\
/* DataTypeConversion: '<S39>/Data Type Conversion4' */
if (rtb_DigitalClock_a < 0.0) {
    HalfMaxTicks_idx_1 = ceil(rtb_DigitalClock_a);
} else {
    HalfMaxTicks_idx_1 = floor(rtb_DigitalClock_a);
}
if (rtIsNaN(HalfMaxTicks_idx_1) || rtIsInf(HalfMaxTicks_idx_1)) {
    HalfMaxTicks_idx_1 = 0.0;
} else {
    HalfMaxTicks_idx_1 = fmod(HalfMaxTicks_idx_1, 65536.0);
}
Walking01_withElmos_B.DataTypeConversion4_i = (uint16_T)(HalfMaxTicks_idx_1 < 0.0 ? (int32_T)(uint16_T)-(int16_T)(uint16_T)-HalfMaxTicks_idx_1 : (int32_T)(uint16_T)HalfMaxTicks_idx_1);
/* End of DataTypeConversion: '<S39>/Data Type Conversion4' */
%<tlcOutputsFcnOfS39B446>\
/* DataTypeConversion: '<S39>/Data Type Conversion5' */
if (L2fh[2] < 0.0) {
    HalfMaxTicks_idx_1 = ceil(L2fh[2]);
} else {
    HalfMaxTicks_idx_1 = floor(L2fh[2]);
}
if (rtIsNaN(HalfMaxTicks_idx_1) || rtIsInf(HalfMaxTicks_idx_1)) {
    HalfMaxTicks_idx_1 = 0.0;
} else {
    HalfMaxTicks_idx_1 = fmod(HalfMaxTicks_idx_1, 4.294967296E+9);
}
Walking01_withElmos_B.DataTypeConversion5_b = HalfMaxTicks_idx_1 < 0.0 ? -(int32_T)(uint32_T)-HalfMaxTicks_idx_1 : (int32_T)(uint32_T)HalfMaxTicks_idx_1;
/* End of DataTypeConversion: '<S39>/Data Type Conversion5' */
%<tlcOutputsFcnOfS39B447>\
/* DataTypeConversion: '<S40>/Data Type Conversion3' */
if (Walking01_withElmos_B.MedullaCommandSafe < 0.0) {
    HalfMaxTicks_idx_1 = ceil(Walking01_withElmos_B.MedullaCommandSafe);
} else {
    HalfMaxTicks_idx_1 = floor(Walking01_withElmos_B.MedullaCommandSafe);
}
if (rtIsNaN(HalfMaxTicks_idx_1) || rtIsInf(HalfMaxTicks_idx_1)) {
    HalfMaxTicks_idx_1 = 0.0;
} else {
    HalfMaxTicks_idx_1 = fmod(HalfMaxTicks_idx_1, 256.0);
}
Walking01_withElmos_B.DataTypeConversion3_o = (uint8_T)(HalfMaxTicks_idx_1 < 0.0 ? (int32_T)(uint8_T)-(int8_T)(uint8_T)-HalfMaxTicks_idx_1 : (int32_T)(uint8_T)HalfMaxTicks_idx_1);
/* End of DataTypeConversion: '<S40>/Data Type Conversion3' */
%<tlcOutputsFcnOfS39B448>\
/* DataTypeConversion: '<S40>/Data Type Conversion4' */
if (rtb_DigitalClock_a < 0.0) {
    HalfMaxTicks_idx_1 = ceil(rtb_DigitalClock_a);
} else {
    HalfMaxTicks_idx_1 = floor(rtb_DigitalClock_a);
}
if (rtIsNaN(HalfMaxTicks_idx_1) || rtIsInf(HalfMaxTicks_idx_1)) {
    HalfMaxTicks_idx_1 = 0.0;
} else {
    HalfMaxTicks_idx_1 = fmod(HalfMaxTicks_idx_1, 65536.0);
}
Walking01_withElmos_B.DataTypeConversion4_n = (uint16_T)(HalfMaxTicks_idx_1 < 0.0 ? (int32_T)(uint16_T)-(int16_T)(uint16_T)-HalfMaxTicks_idx_1 : (int32_T)(uint16_T)HalfMaxTicks_idx_1);
/* End of DataTypeConversion: '<S40>/Data Type Conversion4' */
%<tlcOutputsFcnOfS39B449>\
/* DataTypeConversion: '<S40>/Data Type Conversion5' */
if (L2fh[1] < 0.0) {
    HalfMaxTicks_idx_1 = ceil(L2fh[1]);
} else {
    HalfMaxTicks_idx_1 = floor(L2fh[1]);
}
if (rtIsNaN(HalfMaxTicks_idx_1) || rtIsInf(HalfMaxTicks_idx_1)) {
    HalfMaxTicks_idx_1 = 0.0;
} else {
    HalfMaxTicks_idx_1 = fmod(HalfMaxTicks_idx_1, 4.294967296E+9);
}
Walking01_withElmos_B.DataTypeConversion5_by = HalfMaxTicks_idx_1 < 0.0 ? -(int32_T)(uint32_T)-HalfMaxTicks_idx_1 : (int32_T)(uint32_T)HalfMaxTicks_idx_1;
/* End of DataTypeConversion: '<S40>/Data Type Conversion5' */
%<tlcOutputsFcnOfS39B450>\
/* DataTypeConversion: '<S41>/Data Type Conversion3' */
if (Walking01_withElmos_B.MedullaCommandSafe < 0.0) {
    HalfMaxTicks_idx_1 = ceil(Walking01_withElmos_B.MedullaCommandSafe);
} else {
    HalfMaxTicks_idx_1 = floor(Walking01_withElmos_B.MedullaCommandSafe);
}
if (rtIsNaN(HalfMaxTicks_idx_1) || rtIsInf(HalfMaxTicks_idx_1)) {
    HalfMaxTicks_idx_1 = 0.0;
} else {
    HalfMaxTicks_idx_1 = fmod(HalfMaxTicks_idx_1, 256.0);
}
Walking01_withElmos_B.DataTypeConversion3_f2 = (uint8_T)(HalfMaxTicks_idx_1 < 0.0 ? (int32_T)(uint8_T)-(int8_T)(uint8_T)-HalfMaxTicks_idx_1 : (int32_T)(uint8_T)HalfMaxTicks_idx_1);
/* End of DataTypeConversion: '<S41>/Data Type Conversion3' */
%<tlcOutputsFcnOfS39B451>\
/* DataTypeConversion: '<S41>/Data Type Conversion4' */
if (rtb_DigitalClock_a < 0.0) {
    HalfMaxTicks_idx_1 = ceil(rtb_DigitalClock_a);
} else {
    HalfMaxTicks_idx_1 = floor(rtb_DigitalClock_a);
}
if (rtIsNaN(HalfMaxTicks_idx_1) || rtIsInf(HalfMaxTicks_idx_1)) {
    HalfMaxTicks_idx_1 = 0.0;
} else {
    HalfMaxTicks_idx_1 = fmod(HalfMaxTicks_idx_1, 65536.0);
}
Walking01_withElmos_B.DataTypeConversion4_o = (uint16_T)(HalfMaxTicks_idx_1 < 0.0 ? (int32_T)(uint16_T)-(int16_T)(uint16_T)-HalfMaxTicks_idx_1 : (int32_T)(uint16_T)HalfMaxTicks_idx_1);
/* End of DataTypeConversion: '<S41>/Data Type Conversion4' */
%<tlcOutputsFcnOfS39B452>\
/* DataTypeConversion: '<S41>/Data Type Conversion5' */
if (L2fh[3] < 0.0) {
    HalfMaxTicks_idx_1 = ceil(L2fh[3]);
} else {
    HalfMaxTicks_idx_1 = floor(L2fh[3]);
}
if (rtIsNaN(HalfMaxTicks_idx_1) || rtIsInf(HalfMaxTicks_idx_1)) {
    HalfMaxTicks_idx_1 = 0.0;
} else {
    HalfMaxTicks_idx_1 = fmod(HalfMaxTicks_idx_1, 4.294967296E+9);
}
Walking01_withElmos_B.DataTypeConversion5_a = HalfMaxTicks_idx_1 < 0.0 ? -(int32_T)(uint32_T)-HalfMaxTicks_idx_1 : (int32_T)(uint32_T)HalfMaxTicks_idx_1;
/* End of DataTypeConversion: '<S41>/Data Type Conversion5' */
%<tlcOutputsFcnOfS39B453>\
/* Reshape: '<S13>/Reshape' */
memcpy(&rtb_Reshape[0], &Walking01_withElmos_B.sf_ComputeEulerAngles.Rk[0], 9U * sizeof(real_T));
%<tlcOutputsFcnOfS39B454>\
/* Logic: '<S14>/Logical Operator2' incorporates:
 *  Constant: '<S119>/Constant'
 *  Constant: '<S120>/Constant'
 *  Constant: '<S121>/Constant'
 *  Logic: '<S14>/Logical Operator'
 *  RelationalOperator: '<S119>/Compare'
 *  RelationalOperator: '<S120>/Compare'
 *  RelationalOperator: '<S121>/Compare'
 */
Walking01_withElmos_B.LogicalOperator2 = (((rtb_DigitalClock_a <= %<(SLibCG_SE(SLibCGIR_PV(936, 0, 39, 1, "", -1, "", 0)))>) || (Walking01_withElmos_B.DataTypeConversion97[1] != %<(SLibCG_SE(SLibCGIR_PV(937, 0, 39, 1, "", -1, "", 0)))>) || (Walking01_withElmos_B.DataTypeConversion97[2] > %<(SLibCG_SE(SLibCGIR_PV(110, 0, 39, 1, "", -1, "", 0)))>)) && rtb_UnitDelay_m);
%<tlcOutputsFcnOfS39B458>\
%<tlcOutputsFcnOfS39B461>\
%<SLibCGIRDumpSystemUserCode(39, "Output", "Trailer")>\
%<SLibInsertSolverResetCode()>\
%closefile cfgTxt
%<cfgTxt>
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 72, fcnProtoType)>
%<LibSetSystemField(system, "CachedOutput0LocalVars", localVarDecl)>
%assign ::GlobalCurrentTID = []
%endif
%if tid == 1
%assign ::GlobalCurrentTID = 1
%<SLibCGIRAccessLocalVar(257, 1)> %% rtb_LogicalOperator_j
%<SLibCGIRAccessLocalVar(258, 1)> %% rtb_EnableFT
%<SLibCGIRAccessLocalVar(140, 1)> %% rtb_OutportBufferForTemperature
%<SLibCGIRAccessLocalVar(128, 1)> %% rtb_Reshape_d
%<SLibCGIRAccessLocalVar(126, 1)> %% rtb_UnitDelay2_i
%<SLibCGIRAccessLocalVar(130, 1)> %% rtb_Assignment1
%<SLibCGIRAccessLocalVar(139, 1)> %% rtb_OutportBufferForRk
%<SLibCGIRAccessLocalVar(127, 1)> %% rtb_UnitDelay1_m
%<SLibCGIRAccessLocalVar(138, 1)> %% rtb_OutportBufferForDeltaAngle
%<SLibCGIRAccessLocalVar(137, 1)> %% rtb_OutportBufferForAcceleratio
%<SLibCGIRAccessLocalVar(141, 1)> %% rtb_OutportBufferForwk
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl
boolean_T y;
boolean_T x[4];
uint32_T D32[9];
uint32_T remainderPolynomial;
int32_T nextbit;
uint32_T Utmp1[36];
uint32_T Stmp1[12];
uint32_T Stmp2[3];
real32_T Stmp3[3];
real32_T b_Stmp3[3];
boolean_T exitg1;
real_T Seqk;
boolean_T GyroValid;
real_T n;
real_T w[3];
real_T x_0;
real_T b_x;
int8_T I[9];
static const int8_T b_a[9] = { 1, 0, 0, 0, 1, 0, 0, 0, 1 };
int32_T rtb_DataTypeConversion2_l;
real_T rtb_Assignment[2];
int32_T rtb_DataTypeConversion;
int32_T s194_iter;
uint8_T rtb_DataTypeConversion1_k;
real_T tmp[9];
real_T w_0[9];
real_T b_a_0[9];
int32_T i;
uint64_T tmp_0;
uint16_T tmp_1;
uint32_T Utmp1_0;
uint32_T Utmp1_1;
%closefile localVarDecl
%assign _modelSS = ""

%assign tlcOutputsFcnOfS32B0 = OpaqueTLCBlockFcn("Outputs", 32, 0, 9, 73)
%assign tlcOutputsFcnOfS32B1 = OpaqueTLCBlockFcn("Outputs", 32, 1, 9, 73)
%assign tlcOutputsFcnOfS32B3 = OpaqueTLCBlockFcn("Outputs", 32, 3, 9, 73)
%assign tlcOutputsFcnOfS32B4 = OpaqueTLCBlockFcn("Outputs", 32, 4, 9, 73)
%assign tlcOutputsFcnOfS39B460 = OpaqueTLCBlockFcn("Outputs", 39, 460, 9, 73)
%assign tlcOutputsFcnOfS31B1 = OpaqueTLCBlockFcn("Outputs", 31, 1, 9, 73)
%<SLibCG_TrackEO(26)>\
%<SLibCG_TrackEO(25)>\
%<SLibCG_TrackEO(24)>\
%<SLibCG_TrackEO(23)>\
%<SLibCG_TrackEO(22)>\
%<SLibCGIRDumpSystemUserCode(39, "Output", "Header")>\
%<SLibCGIRDumpSystemUserCode(39, "Output", "Body")>\
%if !WHITE_SPACE(tlcOutputsFcnOfS32B0)
/* Outputs for Atomic SubSystem: '<S5>/SerialInterfaces' */
%<tlcOutputsFcnOfS32B0>\
%endif
%<tlcOutputsFcnOfS32B1>\
%<tlcOutputsFcnOfS32B3>\
%<tlcOutputsFcnOfS32B4>\
/* Outputs for Iterator SubSystem: '<S124>/UpdateOrientation' incorporates:
 *  ForIterator: '<S194>/For Iterator'
 */
for (s194_iter = 0; s194_iter < %<(SLibCG_SE(SLibCGIR_PV(942, 0, 39, 1, "", -1, "", 0)))>; s194_iter++) {
%<tlcOutputsFcnOfS31B1>\
    /* MATLAB Function: '<S194>/MATLAB Function' */
    /* MATLAB Function 'DAQ_WITH_SAFETY_IMU/DAQ/SerialInterfaces/KVH/UpdateOrientation/MATLAB Function': '<S196>:1' */
    /* '<S196>:1:3' CMD = [254; 129; 255; 85]; */
    /* hex2dec(['FE';'81';'FF';'55']); */
    /* '<S196>:1:5' Valid = false; */
    GyroValid = false;
    /* '<S196>:1:6' if all(P(1:4) == CMD) */
    x[0] = (Walking01_withElmos_B.FIFObinread[1] == 254U);
    x[1] = (Walking01_withElmos_B.FIFObinread[2] == 129U);
    x[2] = (Walking01_withElmos_B.FIFObinread[3] == 255U);
    x[3] = (Walking01_withElmos_B.FIFObinread[4] == 85U);
    y = true;
    rtb_DataTypeConversion2_l = 0;
    exitg1 = false;
    while ((!exitg1) && (rtb_DataTypeConversion2_l < 4)) {
        if (x[rtb_DataTypeConversion2_l] == 0) {
            y = false;
            exitg1 = true;
        } else {
            rtb_DataTypeConversion2_l++;
        }
    }
    if (y) {
        /* '<S196>:1:7' Valid = kvhCheckCRC(P(1:36)); */
        /*  Loosely based on Code Fragment 3 from */
        /*  http://en.wikipedia.org/wiki/Computation_of_cyclic_redundancy_checks */
        /* 'kvhCheckCRC:6' D32 = parseUint32(D0); */
        /* 'kvhCheckCRC:32' Utmp1 = uint32(reshape(D,4,[])); */
        memcpy(&Utmp1[0], &Walking01_withElmos_B.FIFObinread[1], 36U * sizeof(uint32_T));
        /* 'kvhCheckCRC:33' Utmp2 = 16777216*Utmp1(1,:) + 65536*Utmp1(2,:) + 256*Utmp1(3,:) + Utmp1(4,:); */
        /* 'kvhCheckCRC:34' U = Utmp2'; */
        for (nextbit = 0; nextbit < 9; nextbit++) {
            if (Utmp1[nextbit << 2] > 255U) {
                Utmp1_0 = MAX_uint32_T;
            } else {
                Utmp1_0 = Utmp1[nextbit << 2] << 24;
            }
            if (Utmp1[(nextbit << 2) + 1] > 65535U) {
                Utmp1_1 = MAX_uint32_T;
            } else {
                Utmp1_1 = Utmp1[(nextbit << 2) + 1] << 16;
            }
            tmp_0 = (uint64_T)Utmp1_0 + Utmp1_1;
            if (tmp_0 > 4294967295ULL) {
                tmp_0 = 4294967295ULL;
            }
            if (Utmp1[(nextbit << 2) + 2] > 16777215U) {
                Utmp1_0 = MAX_uint32_T;
            } else {
                Utmp1_0 = Utmp1[(nextbit << 2) + 2] << 8;
            }
            tmp_0 = (uint64_T)(uint32_T)tmp_0 + Utmp1_0;
            if (tmp_0 > 4294967295ULL) {
                tmp_0 = 4294967295ULL;
            }
            tmp_0 = (uint64_T)Utmp1[(nextbit << 2) + 3] + (uint32_T)tmp_0;
            if (tmp_0 > 4294967295ULL) {
                tmp_0 = 4294967295ULL;
            }
            D32[nextbit] = (uint32_T)tmp_0;
        }
        /* 'kvhCheckCRC:7' receivedCRC = D32(9); */
        /* 'kvhCheckCRC:8' D32(9) = uint32(0); */
        D32[8] = 0U;
        /* 'kvhCheckCRC:10' generatorPolynomial = uint32(79764919); */
        /*  0x04C11DB7 */
        /* 'kvhCheckCRC:11' xorIn               = uint32(4294967295); */
        /*  0xFFFFFFFF */
        /*  XOR IN = 0xFFFFFFFF */
        /* 'kvhCheckCRC:14' remainderPolynomial = bitxor(D32(1), xorIn); */
        remainderPolynomial = D32[0] ^ MAX_uint32_T;
        /* 'kvhCheckCRC:16' for k=2:9 */
        for (rtb_DataTypeConversion2_l = 0; rtb_DataTypeConversion2_l < 8; rtb_DataTypeConversion2_l++) {
            /* 'kvhCheckCRC:17' for l=32:-1:1 */
            for (rtb_DataTypeConversion = 0; rtb_DataTypeConversion < 32; rtb_DataTypeConversion++) {
                /* 'kvhCheckCRC:18' nextbit = bitget(D32(k),l); */
                nextbit = ((1U << (31 - rtb_DataTypeConversion) & D32[rtb_DataTypeConversion2_l + 1]) != 0U);
                /* 'kvhCheckCRC:19' if bitget(remainderPolynomial,32) */
                if ((remainderPolynomial & 2147483648U) != 0U) {
                    /*  coefficient of xn-1 of remainderPolynomial = 1 */
                    /* 'kvhCheckCRC:20' remainderPolynomial = bitxor(bitshift(remainderPolynomial,1)+nextbit, generatorPolynomial); */
                    tmp_0 = (uint64_T)(remainderPolynomial << 1U) + nextbit;
                    if (tmp_0 > 4294967295ULL) {
                        tmp_0 = 4294967295ULL;
                    }
                    remainderPolynomial = (uint32_T)tmp_0 ^ 79764919U;
                } else {
                    /* 'kvhCheckCRC:21' else */
                    /* 'kvhCheckCRC:22' remainderPolynomial = bitshift(remainderPolynomial,1)+nextbit; */
                    tmp_0 = (uint64_T)(remainderPolynomial << 1U) + nextbit;
                    if (tmp_0 > 4294967295ULL) {
                        tmp_0 = 4294967295ULL;
                    }
                    remainderPolynomial = (uint32_T)tmp_0;
                }
            }
        }
        /*  COMPARE */
        /* 'kvhCheckCRC:28' valid = ~bitxor(remainderPolynomial, receivedCRC); */
        if (Utmp1[32] > 255U) {
            Utmp1_0 = MAX_uint32_T;
        } else {
            Utmp1_0 = Utmp1[32] << 24;
        }
        if (Utmp1[33] > 65535U) {
            Utmp1_1 = MAX_uint32_T;
        } else {
            Utmp1_1 = Utmp1[33] << 16;
        }
        tmp_0 = (uint64_T)Utmp1_0 + Utmp1_1;
        if (tmp_0 > 4294967295ULL) {
            tmp_0 = 4294967295ULL;
        }
        if (Utmp1[34] > 16777215U) {
            Utmp1_0 = MAX_uint32_T;
        } else {
            Utmp1_0 = Utmp1[34] << 8;
        }
        tmp_0 = (uint64_T)(uint32_T)tmp_0 + Utmp1_0;
        if (tmp_0 > 4294967295ULL) {
            tmp_0 = 4294967295ULL;
        }
        tmp_0 = (uint64_T)(uint32_T)tmp_0 + Utmp1[35];
        if (tmp_0 > 4294967295ULL) {
            tmp_0 = 4294967295ULL;
        }
        GyroValid = !((remainderPolynomial ^ (uint32_T)tmp_0) != 0U);
    }
    /* '<S196>:1:10' Rotation = parseSingle(P(5:16,:)); */
    /* '<S196>:1:18' Stmp1 = uint32(reshape(D,4,[])); */
    for (rtb_DataTypeConversion2_l = 0; rtb_DataTypeConversion2_l < 12; rtb_DataTypeConversion2_l++) {
        Stmp1[rtb_DataTypeConversion2_l] = Walking01_withElmos_B.FIFObinread[5 + rtb_DataTypeConversion2_l];
    }
    /* '<S196>:1:19' Stmp2 = 16777216*Stmp1(1,:) + 65536*Stmp1(2,:) + 256*Stmp1(3,:) + Stmp1(4,:); */
    if (Stmp1[0] > 255U) {
        remainderPolynomial = MAX_uint32_T;
    } else {
        remainderPolynomial = Stmp1[0] << 24;
    }
    if (Stmp1[1] > 65535U) {
        Utmp1_0 = MAX_uint32_T;
    } else {
        Utmp1_0 = Stmp1[1] << 16;
    }
    tmp_0 = (uint64_T)remainderPolynomial + Utmp1_0;
    if (tmp_0 > 4294967295ULL) {
        tmp_0 = 4294967295ULL;
    }
    if (Stmp1[2] > 16777215U) {
        remainderPolynomial = MAX_uint32_T;
    } else {
        remainderPolynomial = Stmp1[2] << 8;
    }
    tmp_0 = (uint64_T)(uint32_T)tmp_0 + remainderPolynomial;
    if (tmp_0 > 4294967295ULL) {
        tmp_0 = 4294967295ULL;
    }
    tmp_0 = (uint64_T)(uint32_T)tmp_0 + Stmp1[3];
    if (tmp_0 > 4294967295ULL) {
        tmp_0 = 4294967295ULL;
    }
    Stmp2[0] = (uint32_T)tmp_0;
    if (Stmp1[4] > 255U) {
        remainderPolynomial = MAX_uint32_T;
    } else {
        remainderPolynomial = Stmp1[4] << 24;
    }
    if (Stmp1[5] > 65535U) {
        Utmp1_0 = MAX_uint32_T;
    } else {
        Utmp1_0 = Stmp1[5] << 16;
    }
    tmp_0 = (uint64_T)remainderPolynomial + Utmp1_0;
    if (tmp_0 > 4294967295ULL) {
        tmp_0 = 4294967295ULL;
    }
    if (Stmp1[6] > 16777215U) {
        remainderPolynomial = MAX_uint32_T;
    } else {
        remainderPolynomial = Stmp1[6] << 8;
    }
    tmp_0 = (uint64_T)(uint32_T)tmp_0 + remainderPolynomial;
    if (tmp_0 > 4294967295ULL) {
        tmp_0 = 4294967295ULL;
    }
    tmp_0 = (uint64_T)(uint32_T)tmp_0 + Stmp1[7];
    if (tmp_0 > 4294967295ULL) {
        tmp_0 = 4294967295ULL;
    }
    Stmp2[1] = (uint32_T)tmp_0;
    if (Stmp1[8] > 255U) {
        remainderPolynomial = MAX_uint32_T;
    } else {
        remainderPolynomial = Stmp1[8] << 24;
    }
    if (Stmp1[9] > 65535U) {
        Utmp1_0 = MAX_uint32_T;
    } else {
        Utmp1_0 = Stmp1[9] << 16;
    }
    tmp_0 = (uint64_T)remainderPolynomial + Utmp1_0;
    if (tmp_0 > 4294967295ULL) {
        tmp_0 = 4294967295ULL;
    }
    if (Stmp1[10] > 16777215U) {
        remainderPolynomial = MAX_uint32_T;
    } else {
        remainderPolynomial = Stmp1[10] << 8;
    }
    tmp_0 = (uint64_T)(uint32_T)tmp_0 + remainderPolynomial;
    if (tmp_0 > 4294967295ULL) {
        tmp_0 = 4294967295ULL;
    }
    tmp_0 = (uint64_T)(uint32_T)tmp_0 + Stmp1[11];
    if (tmp_0 > 4294967295ULL) {
        tmp_0 = 4294967295ULL;
    }
    Stmp2[2] = (uint32_T)tmp_0;
    /* '<S196>:1:20' Stmp3 = typecast(Stmp2,'single'); */
    memcpy(&Stmp3[0], &Stmp2[0], (size_t)3 * sizeof(real32_T));
    /* '<S196>:1:21' S = double(Stmp3'); */
    /* '<S196>:1:11' Acceleration = parseSingle(P(17:28,:)); */
    /* '<S196>:1:18' Stmp1 = uint32(reshape(D,4,[])); */
    for (rtb_DataTypeConversion2_l = 0; rtb_DataTypeConversion2_l < 12; rtb_DataTypeConversion2_l++) {
        Stmp1[rtb_DataTypeConversion2_l] = Walking01_withElmos_B.FIFObinread[17 + rtb_DataTypeConversion2_l];
    }
    /* '<S196>:1:19' Stmp2 = 16777216*Stmp1(1,:) + 65536*Stmp1(2,:) + 256*Stmp1(3,:) + Stmp1(4,:); */
    if (Stmp1[0] > 255U) {
        remainderPolynomial = MAX_uint32_T;
    } else {
        remainderPolynomial = Stmp1[0] << 24;
    }
    if (Stmp1[1] > 65535U) {
        Utmp1_0 = MAX_uint32_T;
    } else {
        Utmp1_0 = Stmp1[1] << 16;
    }
    tmp_0 = (uint64_T)remainderPolynomial + Utmp1_0;
    if (tmp_0 > 4294967295ULL) {
        tmp_0 = 4294967295ULL;
    }
    if (Stmp1[2] > 16777215U) {
        remainderPolynomial = MAX_uint32_T;
    } else {
        remainderPolynomial = Stmp1[2] << 8;
    }
    tmp_0 = (uint64_T)(uint32_T)tmp_0 + remainderPolynomial;
    if (tmp_0 > 4294967295ULL) {
        tmp_0 = 4294967295ULL;
    }
    tmp_0 = (uint64_T)(uint32_T)tmp_0 + Stmp1[3];
    if (tmp_0 > 4294967295ULL) {
        tmp_0 = 4294967295ULL;
    }
    Stmp2[0] = (uint32_T)tmp_0;
    if (Stmp1[4] > 255U) {
        remainderPolynomial = MAX_uint32_T;
    } else {
        remainderPolynomial = Stmp1[4] << 24;
    }
    if (Stmp1[5] > 65535U) {
        Utmp1_0 = MAX_uint32_T;
    } else {
        Utmp1_0 = Stmp1[5] << 16;
    }
    tmp_0 = (uint64_T)remainderPolynomial + Utmp1_0;
    if (tmp_0 > 4294967295ULL) {
        tmp_0 = 4294967295ULL;
    }
    if (Stmp1[6] > 16777215U) {
        remainderPolynomial = MAX_uint32_T;
    } else {
        remainderPolynomial = Stmp1[6] << 8;
    }
    tmp_0 = (uint64_T)(uint32_T)tmp_0 + remainderPolynomial;
    if (tmp_0 > 4294967295ULL) {
        tmp_0 = 4294967295ULL;
    }
    tmp_0 = (uint64_T)(uint32_T)tmp_0 + Stmp1[7];
    if (tmp_0 > 4294967295ULL) {
        tmp_0 = 4294967295ULL;
    }
    Stmp2[1] = (uint32_T)tmp_0;
    if (Stmp1[8] > 255U) {
        remainderPolynomial = MAX_uint32_T;
    } else {
        remainderPolynomial = Stmp1[8] << 24;
    }
    if (Stmp1[9] > 65535U) {
        Utmp1_0 = MAX_uint32_T;
    } else {
        Utmp1_0 = Stmp1[9] << 16;
    }
    tmp_0 = (uint64_T)remainderPolynomial + Utmp1_0;
    if (tmp_0 > 4294967295ULL) {
        tmp_0 = 4294967295ULL;
    }
    if (Stmp1[10] > 16777215U) {
        remainderPolynomial = MAX_uint32_T;
    } else {
        remainderPolynomial = Stmp1[10] << 8;
    }
    tmp_0 = (uint64_T)(uint32_T)tmp_0 + remainderPolynomial;
    if (tmp_0 > 4294967295ULL) {
        tmp_0 = 4294967295ULL;
    }
    tmp_0 = (uint64_T)(uint32_T)tmp_0 + Stmp1[11];
    if (tmp_0 > 4294967295ULL) {
        tmp_0 = 4294967295ULL;
    }
    Stmp2[2] = (uint32_T)tmp_0;
    /* '<S196>:1:20' Stmp3 = typecast(Stmp2,'single'); */
    memcpy(&b_Stmp3[0], &Stmp2[0], (size_t)3 * sizeof(real32_T));
    /* '<S196>:1:21' S = double(Stmp3'); */
    /* '<S196>:1:12' Status = P(29); */
    /* '<S196>:1:13' Sequence = double(P(30)); */
    /* '<S196>:1:14' Temperature = parseInt16(P(31:32)); */
    /* '<S196>:1:25' Stmp1 = uint16(reshape(D,2,[])); */
    remainderPolynomial = Walking01_withElmos_B.FIFObinread[31];
    if (Walking01_withElmos_B.FIFObinread[31] > 65535U) {
        remainderPolynomial = 65535U;
    }
    Utmp1_0 = Walking01_withElmos_B.FIFObinread[32];
    if (Walking01_withElmos_B.FIFObinread[32] > 65535U) {
        Utmp1_0 = 65535U;
    }
    /* '<S196>:1:26' Stmp2 = 256*Stmp1(1,:) + Stmp1(2,:); */
    /* '<S196>:1:27' S = double(Stmp2'); */
    rtb_OutportBufferForDeltaAngle[0] = Stmp3[0];
    rtb_OutportBufferForDeltaAngle[1] = Stmp3[1];
    rtb_OutportBufferForDeltaAngle[2] = Stmp3[2];
    rtb_OutportBufferForAcceleratio[0] = b_Stmp3[0];
    rtb_OutportBufferForAcceleratio[1] = b_Stmp3[1];
    rtb_OutportBufferForAcceleratio[2] = b_Stmp3[2];
    /* Assignment: '<S194>/Assignment' incorporates:
 *  Constant: '<S194>/Constant'
 *  MATLAB Function: '<S194>/MATLAB Function'
 */
    if (s194_iter == 0) {
        rtb_Assignment[0] = %<(SLibCG_SE(SLibCGIR_PV(126, 0, 39, 2, "", -1, "", 0)))>;
        rtb_Assignment[1] = %<(SLibCG_SE(SLibCGIR_PV(126, 0, 39, 2, "", -1, "", 1)))>;
    }
    rtb_Assignment[s194_iter] = Walking01_withElmos_B.FIFObinread[30];
    /* End of Assignment: '<S194>/Assignment' */

    /* Assignment: '<S194>/Assignment1' incorporates:
 *  Constant: '<S194>/Constant2'
 *  DataTypeConversion: '<S194>/Data Type Conversion3'
 */
    if (s194_iter == 0) {
        rtb_Assignment1[0] = %<(SLibCG_SE(SLibCGIR_PV(126, 0, 39, 2, "", -1, "", 0)))>;
        rtb_Assignment1[1] = %<(SLibCG_SE(SLibCGIR_PV(126, 0, 39, 2, "", -1, "", 1)))>;
    }
    rtb_Assignment1[s194_iter] = Walking01_withElmos_B.FIFObinread[0];
    /* End of Assignment: '<S194>/Assignment1' */

    /* DataTypeConversion: '<S194>/Data Type Conversion' incorporates:
 *  MATLAB Function: '<S194>/MATLAB Function'
 */
    rtb_DataTypeConversion = GyroValid;
    /* DataTypeConversion: '<S194>/Data Type Conversion1' incorporates:
 *  MATLAB Function: '<S194>/MATLAB Function'
 */
    rtb_DataTypeConversion1_k = (uint8_T)Walking01_withElmos_B.FIFObinread[29];
    /* DataTypeConversion: '<S194>/Data Type Conversion2' */
    rtb_DataTypeConversion2_l = rtb_DataTypeConversion1_k;
    /* MATLAB Function: '<S194>/EstimateOrientation' incorporates:
 *  UnitDelay: '<S194>/Unit Delay1'
 *  UnitDelay: '<S194>/Unit Delay3'
 */
    /* MATLAB Function 'DAQ_WITH_SAFETY_IMU/DAQ/SerialInterfaces/KVH/UpdateOrientation/EstimateOrientation': '<S195>:1' */
    /* '<S195>:1:2' [Rk, wk, Ak, Seqk] = estimateOrientation(DeltaAngle,Acceleration,Rkm1,wkm1,Akm1,Status,Sequence,Seqkm1,Reset); */
    /*  Estimate the rotation matrix Rk representing the orientation of the */
    /*  IMU with respect to the world at the current time step (step k). */
    /*  */
    /*  Inputs: */
    /*    DeltaAngle: a rotation vector (i.e., a vector whose direction */
    /*    coincides with the axis of rotation and whose magnitude is the */
    /*    rotation angle in radians). */
    /*  */
    /*    Acceleration: IMU-measured acceleration */
    /*  */
    /*    Rkm1: This should be the last value Rk returned from this function. */
    /*    The initial value is ignored as long as (Reset) is true the first */
    /*    time this function is called. */
    /*  */
    /*    wk: This should be the last value wk returned from this function. */
    /*    The initial value can safely be [0; 0; 0] if the robot is at rest */
    /*    initially (or when (Reset) is deasserted). */
    /*  */
    /*    Akm1: This should be the last value Ak returned from this function. */
    /*    The initial value can be either [0; 0; 0] or the initial */
    /*    Acceleration (these yield equivalent results). */
    /*  */
    /*    Status: An 8-bit integer corresponding to the KVH IMU status byte. */
    /*    When the packet CRC fails, this input should be zero. */
    /*  */
    /*    Sequence: Message counter sent by the IMU. This starts at 0 and */
    /*    increments by 1 with each packet sent, up to 127, at which point it */
    /*    rolls over. */
    /*  */
    /*    Seqkm1: Previous Sequence input. */
    /*  */
    /*    Reset: When (Reset) is true, the rotation matrix */
    /*    Rk is computed by assuming the IMU is stationary so that the */
    /*    measured Acceleration is opposite the direction the gravitational */
    /*    force. When (Reset) is true, the acceleration is not used, and the */
    /*    rotation matrix Rk is computed by accumulating DeltaAngle */
    /*    rotations. */
    /*  */
    /*  Outputs: */
    /*  */
    /*    Rk: Orientation matrix representing the current orientation of the */
    /*    IMU with respect to the world frame. Note that when represented */
    /*    with ZYX Euler angles, the initial yaw (i.e., the yaw at when the */
    /*    (Reset) input drops to 0) is arbitrary. If it is desired to have */
    /*    zero yaw in that configuration, this should be handled outside this */
    /*    function. */
    /*  */
    /*    wk: Estimated angular velocity in the IMU frame */
    /*  */
    /*    Ak: The filtered acceleration estimate. This value is only used */
    /*    when (Reset) is true. */
    /*  */
    /*    Seqk: Last valid Sequence number seen. */
    /*  */
    /*  The initial orientation estimate is computed by assuming the robot is */
    /*  stationary in the world frame, so that the measured acceleration is */
    /*  simply due to the gravitational force. When the IMU is upright on a */
    /*  horizontal surface, the measured acceleration (in g's) is roughly */
    /*    Acceleration = [0; 0; 1] */
    /*  When the IMU is at rest in another configuration, the measured */
    /*  Acceleration will be some other unit vector. There is not a unique */
    /*  rotation matrix which maps the measured Acceleration into the world */
    /*  frame z-axis, since any subsequent rotation about the z-axis would */
    /*  leave the Acceleration aligned with the vertical. To account for this */
    /*  non-uniqueness, we represent the initial orientation not with a */
    /*  rotation matrix but with a unit length vector in R^3 (i.e., a point */
    /*  on the 2-sphere S^2). */
    /*  */
    /*  We will compute the initial orientation estimate by filtering the */
    /*  Acceleration when (Reset==1). In order to derive the filter we need */
    /*  to know how to combine points on the 2-sphere in a meaningful way. It */
    /*  turns out that, given a set of points x1, x2, ..., xn in S^2, the */
    /*  normalized sum */
    /*    xhat = (x1 + x2 + ... + xn)/||x1 + x2 + ... + xn|| */
    /*  is another point on the 2-sphere which maximizes the sum of the */
    /*  cosines of the angles between xhat and each xi, i=1,...,n, which is */
    /*  roughly equivalent to minimizing the sum of the angles between xhat */
    /*  and each xi, i=1,...,n. We can also use a weighted sum. Thus it is */
    /*  straightforward to implement a filter on S^2; we need only augment */
    /*  the standard filter with a normalization of the result. */
    /*  */
    /*  Note that the average is well defined only if */
    /*    (x1 + x2 + ... + xn) ~= 0. */
    /*  For the "one-pole filter" used below, assuming */
    /*  (accelFilterAlpha~=0.5), the weighted sum can only be zero if */
    /*  (Acceleration==0) and (Akm1==0). Since (Reset) should be true only */
    /*  when the robot is stationary, we should never have (Acceleration==0). */
    /*  In any case, we guard against the unlikely possibility by checking */
    /*  for zero Acceleration. */
    /*  */
    /*  To compute a rotation matrix which maps a unit vector x1 to the */
    /*  z-axis, we have many choices. For example, we could compute an axis */
    /*  of rotation by taking the cross product between x1 and unit z-vector. */
    /*  Then we have to compute the rotation angle and finally compute the */
    /*  rotation matrix equivalent to this axis-angle representation. If the */
    /*  original unit vector x1 is already aligned with the z-axis, this */
    /*  method cannot be used (in this case the rotation matrix can be taken */
    /*  as the identity; however, we have to choose a tolerance for */
    /*  determining if the two vectors are aligned). A better choice is */
    /*  rotate 180 degrees around an axis half way between x1 and the z-axis. */
    /*  We can easily compute the axis of rotation w as the normalized sum */
    /*    w = (x1+zhat)/||x1+zhat||. */
    /*  The matrix associated with this rotation is */
    /*    R = 2 w*w^T - I. */
    /*  */
    /*  After the initial estimate is computed, we simply update the current */
    /*  estimate by a group operation using the IMU-derived DeltaAngle. Thus */
    /*  we convert DeltaAngle to a rotation matrix R and update R(k) from */
    /*  R(k-1) as */
    /*    Rk = Rkm1 * R */
    /* 'estimateOrientation:114' DT = 0.001; */
    /*  SAMPLE TIME USED TO ESTIMATE ANGULAR VELOCITY wk */
    /* 'estimateOrientation:115' accelFilterAlpha = 0.98; */
    /* 'estimateOrientation:117' Rk = Rkm1; */
    memcpy(&rtb_OutportBufferForRk[0], &Walking01_withElmos_DW.UnitDelay1_DSTATE_l[0], 9U * sizeof(real_T));
    /* 'estimateOrientation:118' Ak = Akm1; */
    /* 'estimateOrientation:119' Seqk = Seqkm1; */
    Seqk = Walking01_withElmos_DW.UnitDelay3_DSTATE_j;
    /* Switch: '<S194>/Switch' incorporates:
 *  Constant: '<S194>/Constant1'
 *  MATLAB Function: '<S194>/MATLAB Function'
 */
    /*  Mask the status byte to get accelerometer and gyro status. For now we */
    /*  just ignore invalid data. */
    /* 'estimateOrientation:123' Status = bitxor(Status, uint8(119)); */
    if (!GyroValid) {
        rtb_DataTypeConversion1_k = %<(SLibCG_SE(SLibCGIR_PV(961, 0, 39, 1, "", -1, "", 0)))>;
    }
    /* End of Switch: '<S194>/Switch' */

    /* MATLAB Function: '<S194>/EstimateOrientation' incorporates:
 *  MATLAB Function: '<S194>/MATLAB Function'
 *  UnitDelay: '<S194>/Unit Delay'
 *  UnitDelay: '<S194>/Unit Delay1'
 *  UnitDelay: '<S194>/Unit Delay3'
 */
    rtb_DataTypeConversion1_k ^= 119U;
    /*  invert so '0' means valid */
    /* 'estimateOrientation:124' AccelValid = ~bitand(Status, uint8(112)); */
    /* 'estimateOrientation:125' GyroValid  = ~bitand(Status, uint8(7)); */
    GyroValid = !((rtb_DataTypeConversion1_k & 7) != 0);
    /* 'estimateOrientation:126' SequenceValid = (Sequence>=0 && Sequence<127); */
    /*     %<"\%\% Estimate angular velocity"> */
    /* 'estimateOrientation:129' if (GyroValid) */
    if (GyroValid) {
        /* 'estimateOrientation:130' wk = DeltaAngle/DT; */
        Walking01_withElmos_DW.UnitDelay2_DSTATE_p[0] = rtb_OutportBufferForDeltaAngle[0] / 0.001;
        Walking01_withElmos_DW.UnitDelay2_DSTATE_p[1] = rtb_OutportBufferForDeltaAngle[1] / 0.001;
        Walking01_withElmos_DW.UnitDelay2_DSTATE_p[2] = rtb_OutportBufferForDeltaAngle[2] / 0.001;
    } else {
        /* 'estimateOrientation:131' else */
        /* 'estimateOrientation:132' wk = wkm1; */
    }
    /* 'estimateOrientation:136' if (Reset && AccelValid) */
    if (Walking01_withElmos_B.RateTransition3 && (!((rtb_DataTypeConversion1_k & 112) != 0))) {
        /*         %<"\%\% Compute initial orientation estimate (modulo yaw)"> */
        /*  Normalize to ensure Acceleration lies on the 2-sphere S^2 */
        /* 'estimateOrientation:140' normAccel = norm(Acceleration); */
%if SLibCG_FcnCallArgAccessed(9,73,3,0)
%<SLibCGIRAccessLocalVar(137, 1)> %% rtb_OutportBufferForAcceleratio
%endif

        n = %<(SLibCGCallSubFcn("Walking01_withElmos_norm", ["rtb_OutportBufferForAcceleratio"], 9, 73, 3))>;
        /* 'estimateOrientation:141' if (normAccel < 1e-8) */
        if (n < 1.0E-8) {
            /* 'estimateOrientation:142' Acceleration = [0; 0; 1]; */
            w[0] = 0.0;
            w[1] = 0.0;
            w[2] = 1.0;
        } else {
            /* 'estimateOrientation:143' else */
            /* 'estimateOrientation:144' Acceleration = Acceleration/normAccel; */
            w[0] = rtb_OutportBufferForAcceleratio[0] / n;
            w[1] = rtb_OutportBufferForAcceleratio[1] / n;
            w[2] = rtb_OutportBufferForAcceleratio[2] / n;
        }
        /*  First-order IIR filter with a pole at z=accelFilterAlpha */
        /* 'estimateOrientation:147' Ak = accelFilterAlpha*Akm1 + (1-accelFilterAlpha)*Acceleration; */
        Walking01_withElmos_DW.UnitDelay_DSTATE_p[0] = 0.98 * Walking01_withElmos_DW.UnitDelay_DSTATE_p[0] + 0.020000000000000018 * w[0];
        Walking01_withElmos_DW.UnitDelay_DSTATE_p[1] = 0.98 * Walking01_withElmos_DW.UnitDelay_DSTATE_p[1] + 0.020000000000000018 * w[1];
        Walking01_withElmos_DW.UnitDelay_DSTATE_p[2] = 0.98 * Walking01_withElmos_DW.UnitDelay_DSTATE_p[2] + 0.020000000000000018 * w[2];
        /*  Normalize to ensure Ak lies on the 2-sphere S^2 */
        /*  Assuming (accelFilterAlpha~=0.5), norm(Ak) should never be zero. */
        /* 'estimateOrientation:150' Ak = Ak/norm(Ak); */
        n = %<(SLibCGCallSubFcn("Walking01_withElmos_norm", ["Walking01_withElmos_DW.UnitDelay_DSTATE_p"], 9, 73, 1))>;
        Walking01_withElmos_DW.UnitDelay_DSTATE_p[0] /= n;
        Walking01_withElmos_DW.UnitDelay_DSTATE_p[1] /= n;
        Walking01_withElmos_DW.UnitDelay_DSTATE_p[2] /= n;
        /*  Compute the axis of rotation K and the rotation matrix Rk */
        /* 'estimateOrientation:153' K = Ak + [0; 0; 1]; */
        w[0] = Walking01_withElmos_DW.UnitDelay_DSTATE_p[0];
        w[1] = Walking01_withElmos_DW.UnitDelay_DSTATE_p[1];
        w[2] = Walking01_withElmos_DW.UnitDelay_DSTATE_p[2] + 1.0;
        /* 'estimateOrientation:154' K = K/norm(K); */
        n = %<(SLibCGCallSubFcn("Walking01_withElmos_norm", ["w"], 9, 73, 0))>;
        w[0] = Walking01_withElmos_DW.UnitDelay_DSTATE_p[0] / n;
        w[1] = Walking01_withElmos_DW.UnitDelay_DSTATE_p[1] / n;
        n = (Walking01_withElmos_DW.UnitDelay_DSTATE_p[2] + 1.0) / n;
        w[2] = n;
        /* 'estimateOrientation:155' Rk = 2*(K*K') - eye(3); */
        for (nextbit = 0; nextbit < 9; nextbit++) {
            I[nextbit] = 0;
        }
        I[0] = 1;
        I[4] = 1;
        I[8] = 1;
        for (nextbit = 0; nextbit < 3; nextbit++) {
            w_0[nextbit] = w[nextbit] * w[0];
            w_0[nextbit + 3] = w[nextbit] * w[1];
            w_0[nextbit + 6] = w[nextbit] * n;
        }
        for (nextbit = 0; nextbit < 3; nextbit++) {
            rtb_OutportBufferForRk[3 * nextbit] = w_0[3 * nextbit] * 2.0 - (real_T)I[3 * nextbit];
            rtb_OutportBufferForRk[1 + 3 * nextbit] = w_0[3 * nextbit + 1] * 2.0 - (real_T)I[3 * nextbit + 1];
            rtb_OutportBufferForRk[2 + 3 * nextbit] = w_0[3 * nextbit + 2] * 2.0 - (real_T)I[3 * nextbit + 2];
        }
    } else {
        if (GyroValid && (Walking01_withElmos_B.FIFObinread[30] < 127U)) {
            /* 'estimateOrientation:158' elseif (GyroValid && SequenceValid) */
            /*         %<"\%\% Update orientation estimate"> */
            /*  If we missed (n-1) packets, we assume that the angular velocity */
            /*  is constant during that time period. This means the robot should */
            /*  have rotated n times as much as DeltaAngle indicates. If we don't */
            /*  miss any packets, then n = Sequence-Seqkm1 = 1 and we have */
            /*    theta = norm(DeltaAngle). */
            /* 'estimateOrientation:166' Seqk = Sequence; */
            Seqk = Walking01_withElmos_B.FIFObinread[30];
            /* 'estimateOrientation:167' n = Sequence-Seqkm1; */
            n = (real_T)Walking01_withElmos_B.FIFObinread[30] - Walking01_withElmos_DW.UnitDelay3_DSTATE_j;
            /* 'estimateOrientation:168' if (n<0) */
            if (n < 0.0) {
                /* 'estimateOrientation:169' n = n+128; */
                n += 128.0;
            }
            /* 'estimateOrientation:172' theta = n*norm(DeltaAngle); */
%if SLibCG_FcnCallArgAccessed(9,73,2,0)
%<SLibCGIRAccessLocalVar(138, 1)> %% rtb_OutportBufferForDeltaAngle
%endif

            n *= %<(SLibCGCallSubFcn("Walking01_withElmos_norm", ["rtb_OutportBufferForDeltaAngle"], 9, 73, 2))>;
            /* 'estimateOrientation:173' if (theta > 3e-8) */
            if (n > 3.0E-8) {
                /*  Avoid division by zero. The threshold 3e-8 (rad/ms) is */
                /*  slighly less than the angular velocity of the Earth on its */
                /*  axis, which is */
                /*    2*pi/(23*3600 + 56*60 + 04.09053)/1000 */
                /*      = 7.292115855377075e-08 (rad/ms) */
                /*  If the measured rotation is less than this, we ignore it. */
                /* 'estimateOrientation:180' w = DeltaAngle/theta; */
                w[0] = rtb_OutportBufferForDeltaAngle[0] / n;
                w[1] = rtb_OutportBufferForDeltaAngle[1] / n;
                w[2] = rtb_OutportBufferForDeltaAngle[2] / n;
                /* 'estimateOrientation:181' S = [0 -w(3) w(2); w(3) 0 -w(1); -w(2) w(1) 0]; */
                /* 'estimateOrientation:182' R = eye(3)*cos(theta) + S*sin(theta) + (1-cos(theta))*(w*w'); */
                x_0 = cos(n);
                b_x = sin(n);
                n = 1.0 - cos(n);
                /* 'estimateOrientation:183' Rk = Rkm1*R; */
                tmp[0] = 0.0;
                tmp[3] = -w[2];
                tmp[6] = w[1];
                tmp[1] = w[2];
                tmp[4] = 0.0;
                tmp[7] = -w[0];
                tmp[2] = -w[1];
                tmp[5] = w[0];
                tmp[8] = 0.0;
                for (nextbit = 0; nextbit < 3; nextbit++) {
                    w_0[nextbit] = w[nextbit] * w[0];
                    w_0[nextbit + 3] = w[nextbit] * w[1];
                    w_0[nextbit + 6] = w[nextbit] * w[2];
                }
                for (nextbit = 0; nextbit < 3; nextbit++) {
                    b_a_0[3 * nextbit] = ((real_T)b_a[3 * nextbit] * x_0 + tmp[3 * nextbit] * b_x) + w_0[3 * nextbit] * n;
                    b_a_0[1 + 3 * nextbit] = ((real_T)b_a[3 * nextbit + 1] * x_0 + tmp[3 * nextbit + 1] * b_x) + w_0[3 * nextbit + 1] * n;
                    b_a_0[2 + 3 * nextbit] = ((real_T)b_a[3 * nextbit + 2] * x_0 + tmp[3 * nextbit + 2] * b_x) + w_0[3 * nextbit + 2] * n;
                }
                for (nextbit = 0; nextbit < 3; nextbit++) {
                    for (i = 0; i < 3; i++) {
                        rtb_OutportBufferForRk[nextbit + 3 * i] = 0.0;
                        rtb_OutportBufferForRk[nextbit + 3 * i] += b_a_0[3 * i] * Walking01_withElmos_DW.UnitDelay1_DSTATE_l[nextbit];
                        rtb_OutportBufferForRk[nextbit + 3 * i] += b_a_0[3 * i + 1] * Walking01_withElmos_DW.UnitDelay1_DSTATE_l[nextbit + 3];
                        rtb_OutportBufferForRk[nextbit + 3 * i] += b_a_0[3 * i + 2] * Walking01_withElmos_DW.UnitDelay1_DSTATE_l[nextbit + 6];
                    }
                }
            }
        }
    }
    /* MATLAB Function: '<S194>/MATLAB Function' */
    if ((uint16_T)remainderPolynomial > 255) {
        tmp_1 = MAX_uint16_T;
    } else {
        tmp_1 = (uint16_T)((uint16_T)remainderPolynomial << 8);
    }
    remainderPolynomial = (uint32_T)tmp_1 + (uint16_T)Utmp1_0;
    if (remainderPolynomial > 65535U) {
        remainderPolynomial = 65535U;
    }
    /* SignalConversion: '<S194>/OutportBufferForTemperature' incorporates:
 *  MATLAB Function: '<S194>/MATLAB Function'
 */
    rtb_OutportBufferForTemperature = remainderPolynomial;
    /* SignalConversion: '<S194>/OutportBufferForwk' */
    rtb_OutportBufferForwk[0] = Walking01_withElmos_DW.UnitDelay2_DSTATE_p[0];
    rtb_OutportBufferForwk[1] = Walking01_withElmos_DW.UnitDelay2_DSTATE_p[1];
    rtb_OutportBufferForwk[2] = Walking01_withElmos_DW.UnitDelay2_DSTATE_p[2];
    /* Update for UnitDelay: '<S194>/Unit Delay1' */
    memcpy(&Walking01_withElmos_DW.UnitDelay1_DSTATE_l[0], &rtb_OutportBufferForRk[0], 9U * sizeof(real_T));
    /* Update for UnitDelay: '<S194>/Unit Delay3' incorporates:
 *  MATLAB Function: '<S194>/EstimateOrientation'
 */
    Walking01_withElmos_DW.UnitDelay3_DSTATE_j = Seqk;
}
/* End of Outputs for SubSystem: '<S124>/UpdateOrientation' */

/* Logic: '<S124>/Logical Operator' incorporates:
 *  Constant: '<S15>/ResetYaw'
 */
rtb_LogicalOperator_j = (Walking01_withElmos_B.RateTransition3 || Walking01_withElmos_P.ResetYaw);
/* UnitDelay: '<S124>/Unit Delay2' */
memcpy(&rtb_UnitDelay2_i[0], &Walking01_withElmos_DW.UnitDelay2_DSTATE_o[0], 9U * sizeof(real_T));
/* UnitDelay: '<S124>/Unit Delay1' */
rtb_UnitDelay1_m[0] = Walking01_withElmos_DW.UnitDelay1_DSTATE_c[0];
rtb_UnitDelay1_m[1] = Walking01_withElmos_DW.UnitDelay1_DSTATE_c[1];
%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[2], "Output",1)
/* MATLAB Function: '<S124>/ComputeEulerAngles' incorporates:
 *  Constant: '<S124>/KVHOrientation'
 */
%if SLibCG_SystemFcnArgAccessed("Walking01_wi_ComputeEulerAngles",2,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif
%if SLibCG_SystemFcnArgAccessed("Walking01_wi_ComputeEulerAngles",2,1)
%<SLibCGIRAccessLocalVar(139, 1)> %% rtb_OutportBufferForRk
%endif
%if SLibCG_SystemFcnArgAccessed("Walking01_wi_ComputeEulerAngles",2,2)
%<SLibCGIRAccessLocalVar(141, 1)> %% rtb_OutportBufferForwk
%endif
%if SLibCG_SystemFcnArgAccessed("Walking01_wi_ComputeEulerAngles",2,4)
%<SLibCGIRAccessLocalVar(257, 1)> %% rtb_LogicalOperator_j
%endif
%if SLibCG_SystemFcnArgAccessed("Walking01_wi_ComputeEulerAngles",2,5)
%<SLibCGIRAccessLocalVar(126, 1)> %% rtb_UnitDelay2_i
%endif
%if SLibCG_SystemFcnArgAccessed("Walking01_wi_ComputeEulerAngles",2,6)
%<SLibCGIRAccessLocalVar(127, 1)> %% rtb_UnitDelay1_m
%endif

%<SLibCGIRGenReusableSysCall("Walking01_wi_ComputeEulerAngles", ["%<_modelSS>", "rtb_OutportBufferForRk", "rtb_OutportBufferForwk", "%<(SLibCGIR_PVAddr(157, 0, 39, 9, "", -1, "", 0))>", "rtb_LogicalOperator_j", "rtb_UnitDelay2_i", "rtb_UnitDelay1_m", "&Walking01_withElmos_B.sf_ComputeEulerAngles_i"], 2, 1, 3, 1, 3, 39)>\

%endif
/* Reshape: '<S124>/Reshape' */
memcpy(&rtb_Reshape_d[0], &Walking01_withElmos_B.sf_ComputeEulerAngles_i.Rk[0], 9U * sizeof(real_T));
/* Constant: '<S15>/EnableFT' */
rtb_EnableFT = Walking01_withElmos_P.EnableFT;
/* End of Outputs for SubSystem: '<S5>/SerialInterfaces' */

/* Outport: '<Root>/KVHEulerAngles' */
Walking01_withElmos_Y.KVHEulerAngles[0] = Walking01_withElmos_B.sf_ComputeEulerAngles_i.ZYX[0];
Walking01_withElmos_Y.KVHEulerAngles[1] = Walking01_withElmos_B.sf_ComputeEulerAngles_i.ZYX[1];
Walking01_withElmos_Y.KVHEulerAngles[2] = Walking01_withElmos_B.sf_ComputeEulerAngles_i.ZYX[2];
/* Outport: '<Root>/KVHEulerAngleDeriv' */
Walking01_withElmos_Y.KVHEulerAngleDeriv[0] = Walking01_withElmos_B.sf_ComputeEulerAngles_i.dZYX[0];
Walking01_withElmos_Y.KVHEulerAngleDeriv[1] = Walking01_withElmos_B.sf_ComputeEulerAngles_i.dZYX[1];
Walking01_withElmos_Y.KVHEulerAngleDeriv[2] = Walking01_withElmos_B.sf_ComputeEulerAngles_i.dZYX[2];
/* Outport: '<Root>/KVHStatus' */
Walking01_withElmos_Y.KVHStatus = rtb_DataTypeConversion2_l;
/* Outport: '<Root>/KVHSequence' */
Walking01_withElmos_Y.KVHSequence[0] = rtb_Assignment[0];
Walking01_withElmos_Y.KVHSequence[1] = rtb_Assignment[1];
/* Outport: '<Root>/KVHValid' */
Walking01_withElmos_Y.KVHValid = rtb_DataTypeConversion;
%<tlcOutputsFcnOfS39B460>\
%<SLibCGIRDumpSystemUserCode(39, "Output", "Trailer")>\
%closefile cfgTxt
%<cfgTxt>
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 73, fcnProtoType)>
%<LibSetSystemField(system, "CachedOutput1LocalVars", localVarDecl)>
%assign ::GlobalCurrentTID = []
%endif
%if tid == 2
%assign ::GlobalCurrentTID = 2
%<SLibCGIRAccessLocalDWork(336, 2)> %% ForEach_itr
%<SLibCGIRAccessLocalVar(191, 2)> %% rtb_DiscreteStateSpace
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%assign _modelSS = ""

%assign tlcOutputsFcnOfS39B459 = OpaqueTLCBlockFcn("Outputs", 39, 459, 9, 74)
%assign tlcOutputsFcnOfS25B2 = OpaqueTLCBlockFcn("Outputs", 25, 2, 9, 74)
%<SLibCGIRDumpSystemUserCode(39, "Output", "Header")>\
%<SLibCGIRDumpSystemUserCode(39, "Output", "Body")>\
/* Outputs for Iterator SubSystem: '<S13>/IMUFilters' incorporates:
 *  ForEach: '<S20>/For Each'
 */
for (ForEach_itr = 0; ForEach_itr < 3; ForEach_itr++) {
    /* ForEachSliceSelector: '<S20>/ImpSel_InsertedFor_q_limits_at_outport_0' incorporates:
 *  Constant: '<S13>/IMUAngleLimits'
 */
    Walking01_withElmos_B.CoreSubsys_p[ForEach_itr].RateTransition6[0] = %<(SLibCG_SE(SLibCGIR_PV(317, 0, 39, 6, "", -1, "ForEach_itr", 0)))>;
    Walking01_withElmos_B.CoreSubsys_p[ForEach_itr].RateTransition6[1] = %<(SLibCG_SE(SLibCGIR_PV(317, 0, 39, 6, "", -1, "ForEach_itr + 3", 0)))>;
    /* UnitDelay: '<S117>/Unit Delay' */
    Walking01_withElmos_B.CoreSubsys_p[ForEach_itr].UnitDelay = Walking01_withElmos_DW.CoreSubsys_p[ForEach_itr].UnitDelay_DSTATE;
    /* RateTransition: '<S117>/Rate Transition5' incorporates:
 *  Constant: '<S13>/IMUThreshold'
 */
    Walking01_withElmos_B.CoreSubsys_p[ForEach_itr].RateTransition5 = Walking01_withElmos_P.IMUThreshold;
%if !SLibCGSysFcnIsEmptyForTid(CompiledModel.System[24], "Output",2)
    /* Chart: '<S117>/AnomalyDetection' incorporates:
 *  Constant: '<S117>/Constant'
 */
%if SLibCG_SystemFcnArgAccessed("Walking01_wi_AnomalyDetection_h",24,0)
%assign _modelSS = RTMGetModelSSFromIR()
%endif
%if SLibCG_SystemFcnArgAccessed("Walking01_wi_AnomalyDetection_h",24,1)
%<SLibCGIRAccessLocalDWork(336, 2)> %% ForEach_itr
%endif
%if SLibCG_SystemFcnArgAccessed("Walking01_wi_AnomalyDetection_h",24,2)
%<SLibCGIRAccessLocalDWork(336, 2)> %% ForEach_itr
%endif
%if SLibCG_SystemFcnArgAccessed("Walking01_wi_AnomalyDetection_h",24,3)
%<SLibCGIRAccessLocalDWork(336, 2)> %% ForEach_itr
%endif
%if SLibCG_SystemFcnArgAccessed("Walking01_wi_AnomalyDetection_h",24,4)
%<SLibCGIRAccessLocalDWork(336, 2)> %% ForEach_itr
%endif
%if SLibCG_SystemFcnArgAccessed("Walking01_wi_AnomalyDetection_h",24,5)
%<SLibCGIRAccessLocalDWork(336, 2)> %% ForEach_itr
%endif
%if SLibCG_SystemFcnArgAccessed("Walking01_wi_AnomalyDetection_h",24,7)
%<SLibCGIRAccessLocalDWork(336, 2)> %% ForEach_itr
%endif
%if SLibCG_SystemFcnArgAccessed("Walking01_wi_AnomalyDetection_h",24,8)
%<SLibCGIRAccessLocalDWork(336, 2)> %% ForEach_itr
%endif

%<SLibCGIRGenReusableSysCall("Walking01_wi_AnomalyDetection_h", ["%<_modelSS>", "Walking01_withElmos_B.CoreSubsys_p[ForEach_itr].RateTransition", "Walking01_withElmos_B.CoreSubsys_p[ForEach_itr].UnitDelay", "Walking01_withElmos_B.CoreSubsys_p[ForEach_itr].RateTransition6", "Walking01_withElmos_B.CoreSubsys_p[ForEach_itr].RateTransition5", "Walking01_withElmos_B.CoreSubsys_p[ForEach_itr].RateTransition7", "%<(SLibCGIR_PV(121, 0, 39, 1, "", -1, "", 0))>", "&Walking01_withElmos_B.CoreSubsys_p[ForEach_itr].sf_AnomalyDetection", "&Walking01_withElmos_DW.CoreSubsys_p[ForEach_itr].sf_AnomalyDetection"], 24, 0, 3, 2, 3, 39)>\
%endif
%<tlcOutputsFcnOfS25B2>\
    /* Switch: '<S117>/Switch' */
    if (Walking01_withElmos_B.CoreSubsys_p[ForEach_itr].RateTransition4 != 0.0) {
        Walking01_withElmos_B.CoreSubsys_p[ForEach_itr].Switch = Walking01_withElmos_B.CoreSubsys_p[ForEach_itr].RateTransition3;
    } else {
        Walking01_withElmos_B.CoreSubsys_p[ForEach_itr].Switch = rtb_DiscreteStateSpace;
    }
    /* End of Switch: '<S117>/Switch' */
}
/* End of Outputs for SubSystem: '<S13>/IMUFilters' */
%<tlcOutputsFcnOfS39B459>\
%<SLibCGIRDumpSystemUserCode(39, "Output", "Trailer")>\
%closefile cfgTxt
%<cfgTxt>
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Outputs(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 74, fcnProtoType)>
%<LibSetSystemField(system, "CachedOutput2LocalVars", localVarDecl)>
%assign ::GlobalCurrentTID = []
%endif
%endfunction
