%implements s54_b0_8l9fi_0_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%openfile localVarDecl
real_T YawRolloverCount;
real_T CurrentYaw;
real_T y[9];
real_T b_y[3];
int32_T r2;
int32_T r3;
real_T tmp[9];
%closefile localVarDecl
%assign _modelSS = ""

%<SLibGenerateExtModeOutput(system)>
/* MATLAB Function 'DAQ_WITH_SAFETY_IMU/DAQ/EtherCATNetwork/ComputeEulerAngles': '<S17>:1' */
/*  Convert from IMU frame to robot frame and compute Euler angles. The */
/*  yaw angle is zeroed whenever (Reset) is true. */
/* '<S17>:1:5' if (Reset) */
if (rtu_Reset) {
    /*  Compute the rotation matrix which zeroes the initial yaw */
    /* '<S17>:1:7' qT0 = M_to_ZYX(RkIn*RCal); */
    for (r2 = 0; r2 < 3; r2++) {
        for (r3 = 0; r3 < 3; r3++) {
            y[r2 + 3 * r3] = 0.0;
            y[r2 + 3 * r3] += rtu_RCal[3 * r3] * rtu_RkIn[r2];
            y[r2 + 3 * r3] += rtu_RCal[3 * r3 + 1] * rtu_RkIn[r2 + 3];
            y[r2 + 3 * r3] += rtu_RCal[3 * r3 + 2] * rtu_RkIn[r2 + 6];
        }
    }
    /*  M_to_ZYX.m */
    /*  Author: Kevin Galloway */
    /*  Date: 29AUG12 */
    /*  */
    /*  Summary: This function takes a matrix (or array of matrices) M_RW_in and */
    /*  returns the Euler angles based on the ZYX convention. AngX refers to */
    /*  rotation around the X axis, AngY refers to rotation about the Y axis, and */
    /*  AngZ refers to rotation about the Z axis. If M_RW_in is an array of */
    /*  matrices (i.e. a multidimensional array), then AngX, AngY and AngZ */
    /*  will be vectors. */
    /* 'M_to_ZYX:13' qY = asin(-M(3,1,:)); */
    /* 'M_to_ZYX:14' qX = atan2(M(3,2,:), M(3,3,:)); */
    /* 'M_to_ZYX:15' qZ = atan2(M(2,1,:), M(1,1,:)); */
    /* 'M_to_ZYX:16' EulerAngles = [squeeze(qZ)'; squeeze(qY)'; squeeze(qX)']; */
    /* '<S17>:1:8' R0  = Rz(-qT0(1)); */
%if SLibCG_FcnCallArgAccessed(0,1,0,2)
%<SLibCG_AccessArg(0 ,1, 0)>
%endif

    CurrentYaw = -%<(SLibCGCallSubFcn("rt_atan2d_snf", ["y[1]", "y[0]", "%<tSimStruct>"], 0, 1, 0))>;
    /* '<S17>:1:39' R = [cos(t) -sin(t) 0; sin(t) cos(t) 0; 0 0 1]; */
    localB->R0[0] = cos(CurrentYaw);
    localB->R0[3] = -sin(CurrentYaw);
    localB->R0[6] = 0.0;
    localB->R0[1] = sin(CurrentYaw);
    localB->R0[4] = cos(CurrentYaw);
    localB->R0[7] = 0.0;
    localB->R0[2] = 0.0;
    localB->R0[5] = 0.0;
    localB->R0[8] = 1.0;
} else {
    /* '<S17>:1:9' else */
    /* '<S17>:1:10' R0 = R0In; */
    memcpy(&localB->R0[0], &rtu_R0In[0], 9U * sizeof(real_T));
}
/*  Transform from IMU to robot frame and zero initial yaw */
/* '<S17>:1:14' Rk = R0*RkIn*RCal; */
for (r2 = 0; r2 < 3; r2++) {
    for (r3 = 0; r3 < 3; r3++) {
        tmp[r2 + 3 * r3] = 0.0;
        tmp[r2 + 3 * r3] += rtu_RkIn[3 * r3] * localB->R0[r2];
        tmp[r2 + 3 * r3] += rtu_RkIn[3 * r3 + 1] * localB->R0[r2 + 3];
        tmp[r2 + 3 * r3] += rtu_RkIn[3 * r3 + 2] * localB->R0[r2 + 6];
    }
}
for (r2 = 0; r2 < 3; r2++) {
    for (r3 = 0; r3 < 3; r3++) {
        localB->Rk[r2 + 3 * r3] = 0.0;
        localB->Rk[r2 + 3 * r3] += rtu_RCal[3 * r3] * tmp[r2];
        localB->Rk[r2 + 3 * r3] += rtu_RCal[3 * r3 + 1] * tmp[r2 + 3];
        localB->Rk[r2 + 3 * r3] += rtu_RCal[3 * r3 + 2] * tmp[r2 + 6];
    }
}
/*  Convert Rk to ZYX Euler angles */
/* '<S17>:1:17' ZYX = M_to_ZYX(Rk); */
/*  M_to_ZYX.m */
/*  Author: Kevin Galloway */
/*  Date: 29AUG12 */
/*  */
/*  Summary: This function takes a matrix (or array of matrices) M_RW_in and */
/*  returns the Euler angles based on the ZYX convention. AngX refers to */
/*  rotation around the X axis, AngY refers to rotation about the Y axis, and */
/*  AngZ refers to rotation about the Z axis. If M_RW_in is an array of */
/*  matrices (i.e. a multidimensional array), then AngX, AngY and AngZ */
/*  will be vectors. */
/* 'M_to_ZYX:13' qY = asin(-M(3,1,:)); */
/* 'M_to_ZYX:14' qX = atan2(M(3,2,:), M(3,3,:)); */
/* 'M_to_ZYX:15' qZ = atan2(M(2,1,:), M(1,1,:)); */
/* 'M_to_ZYX:16' EulerAngles = [squeeze(qZ)'; squeeze(qY)'; squeeze(qX)']; */
%if SLibCG_FcnCallArgAccessed(0,1,1,0)
%<SLibCG_AccessArg(0 ,1, 7)>
%endif
%if SLibCG_FcnCallArgAccessed(0,1,1,1)
%<SLibCG_AccessArg(0 ,1, 7)>
%endif
%if SLibCG_FcnCallArgAccessed(0,1,1,2)
%<SLibCG_AccessArg(0 ,1, 0)>
%endif

localB->ZYX[0] = %<(SLibCGCallSubFcn("rt_atan2d_snf", ["localB->Rk[1]", "localB->Rk[0]", "%<tSimStruct>"], 0, 1, 1))>;
localB->ZYX[1] = asin(-localB->Rk[2]);
%if SLibCG_FcnCallArgAccessed(0,1,2,0)
%<SLibCG_AccessArg(0 ,1, 7)>
%endif
%if SLibCG_FcnCallArgAccessed(0,1,2,1)
%<SLibCG_AccessArg(0 ,1, 7)>
%endif
%if SLibCG_FcnCallArgAccessed(0,1,2,2)
%<SLibCG_AccessArg(0 ,1, 0)>
%endif

localB->ZYX[2] = %<(SLibCGCallSubFcn("rt_atan2d_snf", ["localB->Rk[5]", "localB->Rk[8]", "%<tSimStruct>"], 0, 1, 2))>;
/*  Unroll yaw */
/* '<S17>:1:20' YawRolloverCount = YawRolloverIn(1); */
/* '<S17>:1:21' PreviousYaw      = YawRolloverIn(2); */
/* '<S17>:1:22' CurrentYaw       = ZYX(1); */
CurrentYaw = localB->ZYX[0];
/* '<S17>:1:23' YawRolloverCount = YawRolloverCount + getYawRollover(CurrentYaw, PreviousYaw); */
/*  Determine if a rollover has occurred on yaw angle If a rollover is */
/*  detected, the output Rollover is either +1 or -1, depending on the */
/*  direction of the rollover. */
/* '<S17>:1:47' if (PreviousYaw>0 && CurrentYaw < (PreviousYaw-pi)) */
if ((rtu_YawRolloverIn[1] > 0.0) && (localB->ZYX[0] < rtu_YawRolloverIn[1] - 3.1415926535897931)) {
    /* '<S17>:1:48' Rollover = 1; */
    r2 = 1;
} else if ((rtu_YawRolloverIn[1] < 0.0) && (localB->ZYX[0] > rtu_YawRolloverIn[1] + 3.1415926535897931)) {
    /* '<S17>:1:49' elseif (PreviousYaw<0 && CurrentYaw > (PreviousYaw+pi)) */
    /* '<S17>:1:50' Rollover = -1; */
    r2 = -1;
} else {
    /* '<S17>:1:51' else */
    /* '<S17>:1:52' Rollover = 0; */
    r2 = 0;
}
YawRolloverCount = rtu_YawRolloverIn[0] + (real_T)r2;
/* '<S17>:1:24' YawRollover      = [YawRolloverCount; CurrentYaw]; */
/* '<S17>:1:25' ZYX(1)           = ZYX(1) + 2*pi*YawRolloverCount; */
localB->ZYX[0] += 6.2831853071795862 * YawRolloverCount;
/*  Compute Euler angle derivatives */
/* '<S17>:1:28' qzT = ZYX(1); */
/* '<S17>:1:29' qyT = ZYX(2); */
/* '<S17>:1:31' if cos(qyT)>1e-3 */
if (cos(localB->ZYX[1]) > 0.001) {
    /* '<S17>:1:32' dZYX = [0 -sin(qzT) cos(qzT)*cos(qyT); 0 cos(qzT) sin(qzT)*cos(qyT); 1 0 -sin(qyT)]\(R0*RkIn*wk); */
    for (r2 = 0; r2 < 3; r2++) {
        for (r3 = 0; r3 < 3; r3++) {
            tmp[r2 + 3 * r3] = 0.0;
            tmp[r2 + 3 * r3] += rtu_RkIn[3 * r3] * localB->R0[r2];
            tmp[r2 + 3 * r3] += rtu_RkIn[3 * r3 + 1] * localB->R0[r2 + 3];
            tmp[r2 + 3 * r3] += rtu_RkIn[3 * r3 + 2] * localB->R0[r2 + 6];
        }
    }
    for (r2 = 0; r2 < 3; r2++) {
        b_y[r2] = tmp[r2 + 6] * rtu_wk[2] + (tmp[r2 + 3] * rtu_wk[1] + tmp[r2] * rtu_wk[0]);
    }
    y[3] = -sin(localB->ZYX[0]);
    y[6] = cos(localB->ZYX[0]) * cos(localB->ZYX[1]);
    y[4] = cos(localB->ZYX[0]);
    y[7] = sin(localB->ZYX[0]) * cos(localB->ZYX[1]);
    y[2] = 1.0;
    y[5] = 0.0;
    y[8] = -sin(localB->ZYX[1]);
    r2 = 1;
    r3 = 0;
    y[1] = 0.0;
    y[0] = 0.0;
    y[7] -= 0.0 * y[8];
    y[6] -= 0.0 * y[8];
    if (fabs(y[3]) > fabs(y[4])) {
        r2 = 0;
        r3 = 1;
    }
    y[3 + r3] /= y[3 + r2];
    y[6 + r3] -= y[3 + r3] * y[6 + r2];
    localB->dZYX[0] = b_y[2];
    localB->dZYX[1] = b_y[r2] - localB->dZYX[0] * y[r2];
    localB->dZYX[2] = (b_y[r3] - localB->dZYX[0] * y[r3]) - y[3 + r3] * localB->dZYX[1];
    localB->dZYX[2] /= y[6 + r3];
    localB->dZYX[0] -= localB->dZYX[2] * y[8];
    localB->dZYX[1] -= y[6 + r2] * localB->dZYX[2];
    localB->dZYX[1] /= y[3 + r2];
    localB->dZYX[0] -= localB->dZYX[1] * y[5];
    localB->dZYX[0] /= y[2];
} else {
    /* '<S17>:1:33' else */
    /* '<S17>:1:34' dZYX = [0; 0; 0]; */
    localB->dZYX[0] = 0.0;
    localB->dZYX[1] = 0.0;
    localB->dZYX[2] = 0.0;
}
localB->YawRollover[0] = YawRolloverCount;
localB->YawRollover[1] = CurrentYaw;
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[0].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Output", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, SLibSystemFcnPeriodicRateGrouping(rtmArgSys, "Output"))
%<SLibCG_AccessArg(0, 1, 0)>
%endif
%if SLibCG_ArgAccessed(0, 1, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Output", rtmArgSys.CurrentTID, SLibSystemFcnPeriodicRateGrouping(rtmArgSys, "Output"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface))
%<SLibCG_UndoAccessArg(0, 1, 0)>
%endif
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_wi_ComputeEulerAngles(\
%assign comma = ""
%if SLibCG_ArgAccessed(0, 1, 0)
%<comma>%<tSimStructType> * const %<tSimStruct>\
%assign comma = ", "
%endif
%<comma>const real_T rtu_RkIn[9]\
%assign comma = ", "
%<comma>const real_T rtu_wk[3]\
%assign comma = ", "
%<comma>const real_T rtu_RCal[9]\
%assign comma = ", "
%<comma>boolean_T rtu_Reset\
%assign comma = ", "
%<comma>const real_T rtu_R0In[9]\
%assign comma = ", "
%<comma>const real_T rtu_YawRolloverIn[2]\
%assign comma = ", "
%<comma>B_ComputeEulerAngles_Walking0_T *localB\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(0, 1, fcnProtoType)>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
