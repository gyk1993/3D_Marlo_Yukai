%implements s54_b0_8l9fi_1_Outputs "C"

%function Outputs(block, system) Output
%assign cfgTxt = ""
%openfile cfgTxt
%assign localVarDecl = ""
%assign _modelSS = ""

%<SLibGenerateExtModeOutput(system)>
/* Gateway: DAQ_WITH_SAFETY_IMU/DAQ/EtherCATNetwork/EncoderFilters/CheckAndFilterEncoder/AnomalyDetection */
localDW->sfEvent = Walking01_withElmo_CALL_EVENT_i;
if (localDW->temporalCounter_i1 < MAX_uint32_T) {
    localDW->temporalCounter_i1++;
}
/* During: DAQ_WITH_SAFETY_IMU/DAQ/EtherCATNetwork/EncoderFilters/CheckAndFilterEncoder/AnomalyDetection */
if (localDW->is_active_c9_Walking01_withElmo == 0U) {
    /* Entry: DAQ_WITH_SAFETY_IMU/DAQ/EtherCATNetwork/EncoderFilters/CheckAndFilterEncoder/AnomalyDetection */
    localDW->is_active_c9_Walking01_withElmo = 1U;
    /* Entry Internal: DAQ_WITH_SAFETY_IMU/DAQ/EtherCATNetwork/EncoderFilters/CheckAndFilterEncoder/AnomalyDetection */
    /* Transition: '<S25>:10' */
    localDW->is_c9_Walking01_withElmos = Walking01_withElmos_IN_Init;
    localDW->temporalCounter_i1 = 0U;
    /* Entry 'Init': '<S25>:20' */
    localB->q_clean = rtu_q;
    localDW->q_last = rtu_q;
    localDW->dq_last = rtu_dq;
    localB->ErrorCount = 0.0;
} else if (localDW->is_c9_Walking01_withElmos == Walking01_withElmos_IN_Init) {
    /* During 'Init': '<S25>:20' */
    if ((!rtu_Reset) && (localDW->temporalCounter_i1 >= (uint32_T)%<(SLibCG_SE(SLibCGIR_PV(113, 0, 3, 1, "", -1, "", 0)))>)) {
        /* Transition: '<S25>:21' */
        localDW->is_c9_Walking01_withElmos = Walking01_withElmos_IN_Run;
        /* Entry Internal 'Run': '<S25>:27' */
        /* Transition: '<S25>:29' */
        localDW->is_Run = Walking01_withElmos_IN_Nominal;
        /* Entry 'Nominal': '<S25>:4' */
        localB->q_clean = rtu_q;
        localDW->q_last = rtu_q;
        localDW->dq_last = rtu_dq;
        localDW->Counter_last = rtu_Counter;
        localB->ErrorCount = 0.0;
    } else {
        localB->q_clean = rtu_q;
        localDW->q_last = rtu_q;
        localDW->dq_last = rtu_dq;
        localB->ErrorCount = 0.0;
    }
} else {
    /* During 'Run': '<S25>:27' */
    if (rtu_Reset) {
        /* Transition: '<S25>:28' */
        /* Exit Internal 'Run': '<S25>:27' */
        localDW->is_Run = Walking01_wi_IN_NO_ACTIVE_CHILD;
        localDW->is_c9_Walking01_withElmos = Walking01_withElmos_IN_Init;
        localDW->temporalCounter_i1 = 0U;
        /* Entry 'Init': '<S25>:20' */
        localB->q_clean = rtu_q;
        localDW->q_last = rtu_q;
        localDW->dq_last = rtu_dq;
        localB->ErrorCount = 0.0;
    } else {
        switch (localDW->is_Run) {
          case Walking01_withElmos_IN_Error:
            /* During 'Error': '<S25>:5' */
            if (localB->ErrorCount > %<(SLibCG_SE(SLibCGIR_PV(114, 0, 3, 1, "", -1, "", 0)))>) {
                /* Transition: '<S25>:3' */
                localDW->is_Run = Walking01_wi_IN_NO_ACTIVE_CHILD;
                localDW->is_c9_Walking01_withElmos = Walking01_withElmos_IN_Init;
                localDW->temporalCounter_i1 = 0U;
                /* Entry 'Init': '<S25>:20' */
                localB->q_clean = rtu_q;
                localDW->q_last = rtu_q;
                localDW->dq_last = rtu_dq;
                localB->ErrorCount = 0.0;
            } else {
%if SLibCG_FcnCallArgAccessed(1,3,0,0)
%<SLibCG_AccessArg(1 ,3, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(1,3,0,1)
%<SLibCG_AccessArg(1 ,3, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(1,3,0,2)
%<SLibCG_AccessArg(1 ,3, 5)>
%endif
%if SLibCG_FcnCallArgAccessed(1,3,0,3)
%<SLibCG_AccessArg(1 ,3, 0)>
%endif
%if SLibCG_FcnCallArgAccessed(1,3,0,4)
%<SLibCG_AccessArg(1 ,3, 8)>
%endif

                if (!%<(SLibCGCallSubFcn("Walking01_withElmos_check_error", ["rtu_q", "rtu_q_limits", "rtu_Threshold", "%<tSimStruct>", "localB"], 1, 3, 0))>) {
                    /* Transition: '<S25>:30' */
                    localDW->is_Run = Walking01_withElmos_IN_Nominal;
                    /* Entry 'Nominal': '<S25>:4' */
                    localB->q_clean = rtu_q;
                    localDW->q_last = rtu_q;
                    localDW->dq_last = rtu_dq;
                    localDW->Counter_last = rtu_Counter;
                    localB->ErrorCount = 0.0;
                } else {
                    /* dq is delayed to prevent algebraic loops */
                    localB->ErrorCount++;
                    localB->q_clean = localB->ErrorCount * localDW->dq_last * rtu_ANOMALY_DT + localDW->q_last;
                }
            }
            break;
          case Walking01_withE_IN_MissedPacket:
            /* During 'MissedPacket': '<S25>:35' */
            /* Transition: '<S25>:37' */
            localDW->is_Run = Walking01_withElmos_IN_Nominal;
            /* Entry 'Nominal': '<S25>:4' */
            localB->q_clean = rtu_q;
            localDW->q_last = rtu_q;
            localDW->dq_last = rtu_dq;
            localDW->Counter_last = rtu_Counter;
            localB->ErrorCount = 0.0;
            break;
          default:
            /* During 'Nominal': '<S25>:4' */
%if SLibCG_FcnCallArgAccessed(1,3,1,0)
%<SLibCG_AccessArg(1 ,3, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(1,3,1,1)
%<SLibCG_AccessArg(1 ,3, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(1,3,1,2)
%<SLibCG_AccessArg(1 ,3, 5)>
%endif
%if SLibCG_FcnCallArgAccessed(1,3,1,3)
%<SLibCG_AccessArg(1 ,3, 0)>
%endif
%if SLibCG_FcnCallArgAccessed(1,3,1,4)
%<SLibCG_AccessArg(1 ,3, 8)>
%endif

            if (%<(SLibCGCallSubFcn("Walking01_withElmos_check_error", ["rtu_q", "rtu_q_limits", "rtu_Threshold", "%<tSimStruct>", "localB"], 1, 3, 1))>) {
                /* Transition: '<S25>:2' */
                localDW->is_Run = Walking01_withElmos_IN_Error;
                /* Entry 'Error': '<S25>:5' */
                localDW->dq_last = rtu_dq;
                /* dq is delayed to prevent algebraic loops */
                localB->ErrorCount++;
                localB->q_clean = localB->ErrorCount * localDW->dq_last * rtu_ANOMALY_DT + localDW->q_last;
            } else {
                localB->q_clean = rtu_q;
                localDW->q_last = rtu_q;
                localDW->dq_last = rtu_dq;
                localDW->Counter_last = rtu_Counter;
                localB->ErrorCount = 0.0;
            }
            break;
        }
    }
}
%closefile cfgTxt
%<cfgTxt>
%assign rtmArgSys = ::CompiledModel.System[::CompiledModel.System[::CompiledModel.RTWCGModules.RTWCGModule[1].CGSystemIdx].NonInlinedParentSystemIdx]
%if SysFcnArgNeeded("Output", rtmArgSys.Interface.RTMArgDef, rtmArgSys.CurrentTID, SLibSystemFcnPeriodicRateGrouping(rtmArgSys, "Output"))
%<SLibCG_AccessArg(1, 3, 0)>
%endif
%if SLibCG_ArgAccessed(1, 3, 0)
%<SLibAccessArg(rtmArgSys.Interface.RTMArgDef, "Output", rtmArgSys.CurrentTID, SLibSystemFcnPeriodicRateGrouping(rtmArgSys, "Output"))>
%endif
%if (IsModelReferenceBaseSys(rtmArgSys) && (IsModelRefScalableBuild() || GenerateClassInterface))
%<SLibCG_UndoAccessArg(1, 3, 0)>
%endif
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_with_AnomalyDetection(\
%assign comma = ""
%if SLibCG_ArgAccessed(1, 3, 0)
%<comma>%<tSimStructType> * const %<tSimStruct>\
%assign comma = ", "
%endif
%<comma>real_T rtu_q\
%assign comma = ", "
%<comma>real_T rtu_dq\
%assign comma = ", "
%<comma>real_T rtu_Counter\
%assign comma = ", "
%if SLibCG_ArgAccessed(1, 3, 4)
%<comma>const real_T rtu_q_limits[2]\
%assign comma = ", "
%endif
%if SLibCG_ArgAccessed(1, 3, 5)
%<comma>real_T rtu_Threshold\
%assign comma = ", "
%endif
%<comma>boolean_T rtu_Reset\
%assign comma = ", "
%<comma>real_T rtu_ANOMALY_DT\
%assign comma = ", "
%<comma>B_AnomalyDetection_Walking01__T *localB\
%assign comma = ", "
%<comma>DW_AnomalyDetection_Walking01_T *localDW\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(1, 3, fcnProtoType)>
%<LibSetSystemField(system, "CachedOutputLocalVars", localVarDecl)>
%endfunction
