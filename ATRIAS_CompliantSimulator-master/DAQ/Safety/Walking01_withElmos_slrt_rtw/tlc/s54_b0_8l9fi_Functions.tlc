%implements s54_b0_8l9fi_Functions "C"

%function Walking01_withElmos_eml_li_find_Fcn0(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T j;
*y_sizes = 0;
if (x[0]) {
    *y_sizes = 1;
}
if (x[1]) {
    (*y_sizes)++;
}
j = 0;
if (x[0]) {
    y_data[0] = 1;
    j = 1;
}
if (x[1]) {
    y_data[j] = 2;
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withElmos_eml_li_find(\
%assign comma = ""
%<comma>const boolean_T x[2]\
%assign comma = ", "
%<comma>int32_T y_data[]\
%assign comma = ", "
%<comma>int32_T *y_sizes\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 0, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElm_eml_li_find_k_Fcn1(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T j;
int32_T i;
*y_sizes = 0;
for (j = 0; j < 9; j++) {
    if (x[j]) {
        (*y_sizes)++;
    }
}
j = 0;
for (i = 0; i < 9; i++) {
    if (x[i]) {
        y_data[j] = i + 1;
        j++;
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withElm_eml_li_find_k(\
%assign comma = ""
%<comma>const boolean_T x[9]\
%assign comma = ", "
%<comma>int32_T y_data[]\
%assign comma = ", "
%<comma>int32_T *y_sizes\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 1, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_with_ATRIAS3D_ZD_s6_b_Fcn2(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T tmp[15];
int32_T i;
/*  NOTE: This function should work both with scalar and vector s. */
/*  It should also work for both the full q and the zero dynamics qz. */
/* 'ATRIAS3D_ZD_s6:5' if nargin<5 */
/* 'ATRIAS3D_ZD_s6:11' if numel(theta_limits)==2 && iscolumn(theta_limits) */
/* 'ATRIAS3D_ZD_s6:15' th  = c*[1; t; q]; */
tmp[0] = 1.0;
tmp[1] = t;
memcpy(&tmp[2], &q[0], 13U * sizeof(real_T));
*th = 0.0;
for (i = 0; i < 15; i++) {
    *th += c[i] * tmp[i];
}
/* check offset */
/* 'ATRIAS3D_ZD_s6:16' dth = c*[0; 1; dq]; */
tmp[0] = 0.0;
tmp[1] = 1.0;
memcpy(&tmp[2], &dq[0], 13U * sizeof(real_T));
*dth = 0.0;
for (i = 0; i < 15; i++) {
    *dth += c[i] * tmp[i];
}
/* 'ATRIAS3D_ZD_s6:17' delta_theta = theta_limits(:,2)-theta_limits(:,1); */
*delta_theta = theta_limits[1] - theta_limits[0];
/* 'ATRIAS3D_ZD_s6:18' s    = (th-theta_limits(:,1))./delta_theta; */
*s = (*th - theta_limits[0]) / *delta_theta;
/* 'ATRIAS3D_ZD_s6:19' ds   = dth./delta_theta; */
*ds = *dth / *delta_theta;
/* 'ATRIAS3D_ZD_s6:20' dsdq = c(:,3:end)./(delta_theta*ones(1,length(q))); */
for (i = 0; i < 13; i++) {
    dsdq[i] = c[2 + i] / *delta_theta;
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_with_ATRIAS3D_ZD_s6_b(\
%assign comma = ""
%<comma>real_T t\
%assign comma = ", "
%<comma>const real_T q[13]\
%assign comma = ", "
%<comma>const real_T dq[13]\
%assign comma = ", "
%<comma>const real_T theta_limits[2]\
%assign comma = ", "
%<comma>const real_T c[15]\
%assign comma = ", "
%<comma>real_T *s\
%assign comma = ", "
%<comma>real_T *ds\
%assign comma = ", "
%<comma>real_T dsdq[13]\
%assign comma = ", "
%<comma>real_T *th\
%assign comma = ", "
%<comma>real_T *dth\
%assign comma = ", "
%<comma>real_T *delta_theta\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 2, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withEl_eml_li_find_en_Fcn3(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T k;
k = 0;
if (x) {
    k = 1;
}
y_sizes[0] = 1;
y_sizes[1] = k;
if (x) {
    y_data[0] = 1;
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withEl_eml_li_find_en(\
%assign comma = ""
%<comma>boolean_T x\
%assign comma = ", "
%<comma>int32_T y_data[]\
%assign comma = ", "
%<comma>int32_T y_sizes[2]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 3, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_updateS_Fcn4(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T c[15];
real_T ds;
real_T dsdq[13];
real_T dtheta;
real_T delta_theta;
real_T b;
real_T e;
static const int8_T g[13] = { 0, 1, 2, 5, 6, 3, 4, 10, 11, 12, 7, 8, 9 };
int32_T i;
int32_T loop_ub;
int32_T d_data;
int32_T d_sizes[2];
%assign _modelSS = ""

/* MATLAB Function 'updateS': '<S215>:39' */
/* '<S215>:39:3' sprev = -inf; */
/* '<S215>:39:4' [s,~,~,~,~,~,~,~,theta] = ATRIAS3D_ZD_Output03(t, q, dq, ControlState, ControlParams, sprev); */
/* 'ATRIAS3D_ZD_Output03:4' Output = ControlParams.Output; */
/*  Define matrix to convert between motor and standard actuated coordinates */
/*  [uLAst; uLAsw; uKAst; uKAsw; u3st; u3sw] = T0*[u1R; u2R; u3R; u1L; u2L; u3L] */
/* 'ATRIAS3D_ZD_Output03:8' T0 = [0.5 0.5 0 0 0 0; 0 0 0 0.5 0.5 0; -1 1 0 0 0 0; 0 0 0 -1 1 0; 0 0 1 0 0 0; 0 0 0 0 0 1]; */
/* 'ATRIAS3D_ZD_Output03:9' if (ControlState.StanceLeg==1) */
/* 'ATRIAS3D_ZD_Output03:12' T1 = [zeros(6,7) T0]; */
/*     %<"\%\% Compute s and modify Bezier parameters to extend outside 0 <= s <= 1"> */
/* [Sy,Sq] = SymmetryMatrices(); */
/* 'ATRIAS3D_ZD_Output03:16' if (ControlState.StanceLeg==0) */
if (Walking01_withElmos_B.ControlState.StanceLeg == 0.0) {
    /* 'ATRIAS3D_ZD_Output03:17' c = [Output.Theta.c0 Output.Theta.ct Output.Theta.cq]; */
    c[0] = Walking01_withElmos_B.ControlParams.Output.Theta.c0;
    c[1] = Walking01_withElmos_B.ControlParams.Output.Theta.ct;
    for (i = 0; i < 13; i++) {
        c[i + 2] = Walking01_withElmos_B.ControlParams.Output.Theta.cq[i];
    }
    /* 'ATRIAS3D_ZD_Output03:18' jacob_h0 = Output.H0; */
} else {
    /* 'ATRIAS3D_ZD_Output03:19' else */
    /* 'ATRIAS3D_ZD_Output03:20' c = [Output.Theta.c0 Output.Theta.ct Output.Theta.cq(:,[1 2 3 6 7 4 5 11 12 13 8 9 10])]; */
    c[0] = Walking01_withElmos_B.ControlParams.Output.Theta.c0;
    c[1] = Walking01_withElmos_B.ControlParams.Output.Theta.ct;
    for (i = 0; i < 13; i++) {
        c[i + 2] = Walking01_withElmos_B.ControlParams.Output.Theta.cq[g[i]];
    }
    /* 'ATRIAS3D_ZD_Output03:21' c(:,3:4) = -c(:,3:4); */
    c[2] = -c[2];
    c[3] = -c[3];
    /* 'ATRIAS3D_ZD_Output03:22' jacob_h0 = Output.H0(:,[1 2 3 6 7 4 5 11 12 13 8 9 10]); */
    /* 'ATRIAS3D_ZD_Output03:23' jacob_h0(:,1:2) = -jacob_h0(:,1:2); */
}
/* 'ATRIAS3D_ZD_Output03:27' [s,ds,dsdq,theta,dtheta,delta_theta] = ATRIAS3D_ZD_s6(t-Output.Theta.t0, q, dq, Output.ThetaLimits, c); */
%if SLibCG_FcnCallArgAccessed(9,4,0,0)
%<SLibCG_AccessArg(9 ,4, 0)>
%endif

%<(SLibCGCallSubFcn("Walking01_with_ATRIAS3D_ZD_s6_b", ["t - Walking01_withElmos_B.ControlParams.Output.Theta.t0", "Walking01_withElmos_B.q", "Walking01_withElmos_B.dq_clean", "Walking01_withElmos_B.ControlParams.Output.ThetaLimits", "c", "&Walking01_withElmos_DW.s", "&ds", "dsdq", "&Walking01_withElmos_DW.theta", "&dtheta", "&delta_theta"], 9, 4, 0))>;
/* 'ATRIAS3D_ZD_Output03:28' s_unsaturated = s; */
/* 'ATRIAS3D_ZD_Output03:30' if (Output.EnforceIncreasingS) */
if ((Walking01_withElmos_B.ControlParams.Output.EnforceIncreasingS != 0.0) && (!(Walking01_withElmos_DW.s >= %<LibGetMathConstant(LibRealNonFinite("-inf"), FcnGetDataTypeIdFromName("double"))>))) {
    /* 'ATRIAS3D_ZD_Output03:31' s = max(s, sprev); */
    Walking01_withElmos_DW.s = %<LibGetMathConstant(LibRealNonFinite("-inf"), FcnGetDataTypeIdFromName("double"))>;
}
/* 'ATRIAS3D_ZD_Output03:34' h_alpha = Output.HAlpha; */
/* 'ATRIAS3D_ZD_Output03:35' if (ControlState.StanceLeg==1) */
/* 'ATRIAS3D_ZD_Output03:39' if Output.SaturateS==1 */
if (Walking01_withElmos_B.ControlParams.Output.SaturateS == 1.0) {
    /* delta = 0.2; */
    /* p = [0.2  -0.4  0.2  0]; %<"\% coefficients of transition poly"> */
    /* [s, ds] = softsaturate(s, ds, delta, p); */
    /*  Modified Feb. 4th, 2014 for interpolative bezier table bounds. */
    /* 'ATRIAS3D_ZD_Output03:44' delta = 0.1; */
    /* 'ATRIAS3D_ZD_Output03:45' ds(s>1+delta) = 0; */
    /* 'ATRIAS3D_ZD_Output03:46' s(s>1+delta) = 1+delta; */
    b = Walking01_withElmos_DW.s;
    %<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_en", ["Walking01_withElmos_DW.s > 1.1", "&d_data", "d_sizes"], 9, 4, 3))>;
    loop_ub = d_sizes[0] * d_sizes[1];
    for (i = 0; i < loop_ub; i++) {
        b = 1.1;
    }
    /* 'ATRIAS3D_ZD_Output03:47' ds(s<-delta) = 0; */
    /* 'ATRIAS3D_ZD_Output03:48' s(s<-delta) = -delta; */
    e = b;
    %<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_en", ["b < -0.1", "&d_data", "d_sizes"], 9, 4, 4))>;
    loop_ub = d_sizes[0] * d_sizes[1];
    for (i = 0; i < loop_ub; i++) {
        e = -0.1;
    }
    Walking01_withElmos_DW.s = e;
} else if ((!(Walking01_withElmos_B.ControlParams.Output.SaturateS == 2.0)) && (Walking01_withElmos_B.ControlParams.Output.SaturateS == 3.0)) {
    /* 'ATRIAS3D_ZD_Output03:70' elseif Output.SaturateS==3 */
    /* 'ATRIAS3D_ZD_Output03:71' smin = Output.SLimits(1); */
    /* 'ATRIAS3D_ZD_Output03:72' smax = Output.SLimits(2); */
    /* 'ATRIAS3D_ZD_Output03:73' ds(s>smax) = 0; */
    /* 'ATRIAS3D_ZD_Output03:74' s(s>smax)  = smax; */
    b = Walking01_withElmos_DW.s;
    %<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_en", ["Walking01_withElmos_DW.s > Walking01_withElmos_B.ControlParams.Output.SLimits[1]", "&d_data", "d_sizes"], 9, 4, 1))>;
    loop_ub = d_sizes[0] * d_sizes[1];
    for (i = 0; i < loop_ub; i++) {
        b = Walking01_withElmos_B.ControlParams.Output.SLimits[1];
    }
    /* 'ATRIAS3D_ZD_Output03:75' ds(s<smin) = 0; */
    /* 'ATRIAS3D_ZD_Output03:76' s(s<smin)  = smin; */
    e = b;
    %<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_en", ["b < Walking01_withElmos_B.ControlParams.Output.SLimits[0]", "&d_data", "d_sizes"], 9, 4, 2))>;
    loop_ub = d_sizes[0] * d_sizes[1];
    for (i = 0; i < loop_ub; i++) {
        e = Walking01_withElmos_B.ControlParams.Output.SLimits[0];
    }
    Walking01_withElmos_DW.s = e;
} else {
    /* 'ATRIAS3D_ZD_Output03:64' h_alpha(s6>1,:) = h_alpha_high(s6>1,:); */
    /*  If (s<0), hold all desired angles constant */
    /* 'ATRIAS3D_ZD_Output03:67' h_alpha_low = h_alpha(:,1)*[1 1 1 1 1 1]; */
    /* 'ATRIAS3D_ZD_Output03:68' h_alpha(s6<0,:) = h_alpha_low(s6<0,:); */
    /* 'ATRIAS3D_ZD_Output03:50' elseif Output.SaturateS==2 */
    /* 'ATRIAS3D_ZD_Output03:51' if (length(s)>1) */
    /* 'ATRIAS3D_ZD_Output03:54' else */
    /* 'ATRIAS3D_ZD_Output03:55' dqyTds = repmat((c(1,5)*delta_theta), 2, 1); */
    /* 'ATRIAS3D_ZD_Output03:56' s6 = repmat(s, 6, 1); */
    /*  If (s>1), hold the desired knee angles constant and keep the */
    /*  torso angle fixed by decreasing the desired leg angles */
    /* 'ATRIAS3D_ZD_Output03:61' h_alpha_high = h_alpha(:,end)*[1 1 1 1 1 1]; */
    /* 'ATRIAS3D_ZD_Output03:62' h_alpha_high(1:2,:) = h_alpha_high(1:2,:)+dqyTds*(-1:0.2:0); */
    /* 'ATRIAS3D_ZD_Output03:63' h_alpha_high(1:2) = max(150*pi/180, h_alpha_high(1:2)); */
}
/*     %<"\%\% Compute terms in controller"> */
/* 'ATRIAS3D_ZD_Output03:80' qmod = q; */
/* 'ATRIAS3D_ZD_Output03:81' qmod(1) = sat(qmod(1), -Output.YawLimit, Output.YawLimit); */
/* 'ATRIAS3D_ZD_Output03:168' y = max(lo, min(x, hi)); */
/* 'ATRIAS3D_ZD_Output03:82' h0 = jacob_h0*qmod; */
/* 'ATRIAS3D_ZD_Output03:83' hd = bezierv(h_alpha, s); */
/* 'ATRIAS3D_ZD_Output03:84' jacob_hd  = beziervd(h_alpha,s); */
/* 'ATRIAS3D_ZD_Output03:85' jacob2_hd = bezierva(h_alpha,s); */
/* 'ATRIAS3D_ZD_Output03:86' dhd = jacob_hd.*ds; */
/* 'ATRIAS3D_ZD_Output03:88' jacob_h = jacob_h0 - jacob_hd*dsdq; */
/* 'ATRIAS3D_ZD_Output03:89' jacob_jacobhdqdq = -jacob2_hd.*(ds.*ds); */
/*     %<"\%\% Stabilizing output term"> */
/*  Allow outputs of the form */
/*    y = H0*q - hd(s(theta(q)), h_alpha) - hStabilizing(phi - phid(s(theta(q))), StabilizingHAlpha) */
/* 'ATRIAS3D_ZD_Output03:95' phi    = Output.Phi.cq * q; */
/* 'ATRIAS3D_ZD_Output03:96' dphi   = Output.Phi.cq * dq; */
/* 'ATRIAS3D_ZD_Output03:98' phid   = bezier(Output.PhiAlpha, s); */
/* 'ATRIAS3D_ZD_Output03:99' jacob_phid = bezierd(Output.PhiAlpha, s); */
/* 'ATRIAS3D_ZD_Output03:100' jacob2_phid = beziera(Output.PhiAlpha, s); */
/* 'ATRIAS3D_ZD_Output03:102' r      = phi - phid; */
/* 'ATRIAS3D_ZD_Output03:103' dr     = dphi - jacob_phid * ds; */
/* 'ATRIAS3D_ZD_Output03:104' RSaturated = false; */
/* 'ATRIAS3D_ZD_Output03:105' if Output.SaturateR */
/* 'ATRIAS3D_ZD_Output03:117' hdbar  = polyv(Output.HBarAlpha, r, inf); */
/* 'ATRIAS3D_ZD_Output03:118' if ~RSaturated */
/* 'ATRIAS3D_ZD_Output03:126' hdbar = sat(hdbar, Output.HBarLimits(:,1), Output.HBarLimits(:,2)); */
/* 'ATRIAS3D_ZD_Output03:127' idxsat = (hdbar == Output.HBarLimits(:,1)) | (hdbar == Output.HBarLimits(:,2)); */
/* 'ATRIAS3D_ZD_Output03:128' jacob_hdbar(idxsat,:) = 0; */
/* 'ATRIAS3D_ZD_Output03:129' jacob2_hdbar(idxsat,:) = 0; */
/* 'ATRIAS3D_ZD_Output03:131' hd = hd + hdbar; */
/* 'ATRIAS3D_ZD_Output03:132' jacob_h = jacob_h - jacob_hdbar * (Output.Phi.cq - jacob_phid * dsdq); */
/* 'ATRIAS3D_ZD_Output03:133' jacob_jacobhdqdq = jacob_jacobhdqdq ... */
/* 'ATRIAS3D_ZD_Output03:134'         + jacob_hdbar * jacob2_phid * ds^2 ... */
/* 'ATRIAS3D_ZD_Output03:135'         + jacob2_hdbar * (-jacob_phid^2 * ds^2 - dphi^2 + jacob_phid * dphi * ds); */
/*     %<"\%\% Saturate the desired leg/knee/hip angles"> */
/* 'ATRIAS3D_ZD_Output03:138' hd_min = [150; 150;  15;  15; -20; -20]*pi/180; */
/* 'ATRIAS3D_ZD_Output03:139' hd_max = [220; 220; 120; 120;  20;  20]*pi/180; */
/* 'ATRIAS3D_ZD_Output03:140' sat_correction = (jacob_h0 - T1)*q; */
/* 'ATRIAS3D_ZD_Output03:141' hd = sat(hd, hd_min + sat_correction, hd_max + sat_correction); */
/* 'ATRIAS3D_ZD_Output03:142' idxsat = (hd == hd_min + sat_correction) | (hd == hd_max + sat_correction); */
/* 'ATRIAS3D_ZD_Output03:143' dhd(idxsat) = 0; */
/* 'ATRIAS3D_ZD_Output03:144' jacob_h(idxsat) = jacob_h0(idxsat); */
/*  jacob_hd(idxsat) = 0; */
/*     %<"\%\%"> */
/* 'ATRIAS3D_ZD_Output03:147' y  = h0-hd; */
/* 'ATRIAS3D_ZD_Output03:148' dy = jacob_h0*dq - dhd; */
/*  Correction */
/* 'ATRIAS3D_ZD_Output03:152' h_alpha_corr = Output.HAlphaCorrection; */
/* 'ATRIAS3D_ZD_Output03:153' s_corr_max = Output.SMaxCorrection; */
/* 'ATRIAS3D_ZD_Output03:154' if Output.UseCorrection && any(s <= s_corr_max) */
/* '<S215>:39:4' ~ */
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withElmos_updateS(\
%assign comma = ""
%<comma>real_T t\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 4, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmo_checkSupport_Fcn5(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T support;
real_T qSpringKA[2];
static const int8_T a[26] = { 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 1, 0, -1, -1, 0, 1, 0, 0, 0, 0, -1, 0, 1, 0, 0 };
int32_T i;
int32_T i_0;
real_T qSpringKA_idx_1;
/* MATLAB Function 'checkSupport': '<S215>:42' */
/*  CHECK_SUPPORT checks the spring deflections to determine how much */
/*  support the selected leg provides. It returns 0 if the selected leg */
/*  does not appear to be on the ground, 1 if it is on the ground but not */
/*  bearing a preponderance of the weight, and 2 otherwise. */
/* '<S215>:42:8' qSpringKA = [0 0 0  1 -1  0  0 -1 1 0  0 0 0; */
/* '<S215>:42:9'                  0 0 0  0  0  1 -1  0 0 0 -1 1 0]*q; */
/* '<S215>:42:10' qSpringKA = qSpringKA + KASpringOffsets; */
for (i = 0; i < 2; i++) {
    qSpringKA_idx_1 = 0.0;
    for (i_0 = 0; i_0 < 13; i_0++) {
        qSpringKA_idx_1 += (real_T)a[(i_0 << 1) + i] * Walking01_withElmos_B.q[i_0];
    }
    qSpringKA[i] = qSpringKA_idx_1 + Walking01_withElmos_P.KASpringOffsets[i];
}
/* '<S215>:42:12' THRESH_KASPRING_DEFLECTION = ControlParams.Supervisory.ImpactThresholdKASpringAbs*pi/180; */
/* '<S215>:42:13' THRESH_KASPRING_HYSTERESIS = ControlParams.Supervisory.ImpactThresholdKASpringRel*pi/180; */
/*  Make the selected leg the first element */
/* '<S215>:42:16' if (WhichLeg==1) */
if (WhichLeg == 1.0) {
    /* '<S215>:42:17' qSpringKA = qSpringKA([2 1]); */
    qSpringKA_idx_1 = qSpringKA[0];
    qSpringKA[0] = qSpringKA[1];
    qSpringKA[1] = qSpringKA_idx_1;
}
/* '<S215>:42:20' support = 0; */
support = 0.0;
/* '<S215>:42:21' if (qSpringKA(1)<THRESH_KASPRING_DEFLECTION) */
if (qSpringKA[0] < Walking01_withElmos_B.ControlParams.Supervisory.ImpactThresholdKASpringAbs * 3.1415926535897931 / 180.0) {
    /* '<S215>:42:22' if (qSpringKA(1)-qSpringKA(2)<THRESH_KASPRING_HYSTERESIS) */
    if (qSpringKA[0] - qSpringKA[1] < Walking01_withElmos_B.ControlParams.Supervisory.ImpactThresholdKASpringRel * 3.1415926535897931 / 180.0) {
        /* '<S215>:42:23' support = 2; */
        support = 2.0;
    } else {
        /* '<S215>:42:24' else */
        /* '<S215>:42:25' support = 1; */
        support = 1.0;
    }
}
return support;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static real_T Walking01_withElmo_checkSupport(\
%assign comma = ""
%<comma>real_T WhichLeg\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 5, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walkin_enter_atomic_RightSingle_Fcn6(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T b_previousEvent;
/* Entry 'RightSingle': '<S215>:32' */
Walking01_withElmos_B.ControlState.SupportState = 1.0;
Walking01_withElmos_B.ControlState.StanceLeg = 0.0;
Walking01_withElmos_B.ControlState.InDoubleSupport = 0.0;
b_previousEvent = Walking01_withElmos_DW.sfEvent;
Walking01_withElmos_DW.sfEvent = Walking01_withElm_event_LegSwap;
if (Walking01_withElmos_DW.is_Main == Walking01_withElmos_IN_Run_k) {
    %<(SLibCGCallSubFcn("Walking01_withElmos_Run", [], 9, 6, 0))>;
}
Walking01_withElmos_DW.sfEvent = b_previousEvent;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walkin_enter_atomic_RightSingle(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 6, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_checkMode_Fcn7(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
boolean_T swap;
/* Graphical Function 'checkMode': '<S215>:49' */
/* Transition: '<S215>:51' */
swap = false;
if ((Walking01_withElmos_DW.is_Transition == Walking01_withElmos_IN_Late) || ((Walking01_withElmos_DW.is_ControllerMode == Walking01_withElmos_IN_Walking) && (Walking01_withElmos_DW.WalkingStepCount < 2.0)) || ((Walking01_withElmos_DW.is_ControllerMode == Walking01_withElmos_IN_Walking) && (Walking01_withElmos_DW.s >= 0.35) && (Walking01_withElmos_DW.s <= 0.65))) {
    /* Transition: '<S215>:56' */
    /* Transition: '<S215>:57' */
    swap = true;
    /* Transition: '<S215>:58' */
} else {
    /* Transition: '<S215>:59' */
}
/* Transition: '<S215>:61' */
return swap;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static boolean_T Walking01_withElmos_checkMode(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 7, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_checkImpact_Fcn8(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
boolean_T impact;
real_T qSpringKA[2];
real_T THRESH_KA_ACCEL;
real_T THRESH_KASPRING_DEFLECTION;
real_T THRESH_KASPRING_HYSTERESIS;
boolean_T b;
static const int8_T a[26] = { 0, 0, 0, 0, 0, 0, 1, 0, -1, 0, 0, 1, 0, -1, -1, 0, 1, 0, 0, 0, 0, -1, 0, 1, 0, 0 };
int32_T i;
int32_T i_0;
/* MATLAB Function 'checkImpact': '<S215>:46' */
/* '<S215>:46:3' qSpringKA = [0 0 0  1 -1  0  0 -1 1 0  0 0 0; */
/* '<S215>:46:4'                  0 0 0  0  0  1 -1  0 0 0 -1 1 0]*q; */
/* '<S215>:46:5' qSpringKA = qSpringKA + KASpringOffsets; */
for (i = 0; i < 2; i++) {
    THRESH_KA_ACCEL = 0.0;
    for (i_0 = 0; i_0 < 13; i_0++) {
        THRESH_KA_ACCEL += (real_T)a[(i_0 << 1) + i] * Walking01_withElmos_B.q[i_0];
    }
    qSpringKA[i] = THRESH_KA_ACCEL + Walking01_withElmos_P.KASpringOffsets[i];
}
/* '<S215>:46:8' THRESH_KA_ACCEL            = ControlParams.Supervisory.ImpactThresholdKAAccel*pi/180; */
THRESH_KA_ACCEL = Walking01_withElmos_B.ControlParams.Supervisory.ImpactThresholdKAAccel * 3.1415926535897931 / 180.0;
/* '<S215>:46:9' THRESH_KASPRING_DEFLECTION = ControlParams.Supervisory.ImpactThresholdKASpringAbs*pi/180; */
THRESH_KASPRING_DEFLECTION = Walking01_withElmos_B.ControlParams.Supervisory.ImpactThresholdKASpringAbs * 3.1415926535897931 / 180.0;
/* '<S215>:46:10' THRESH_KASPRING_HYSTERESIS = ControlParams.Supervisory.ImpactThresholdKASpringRel*pi/180; */
THRESH_KASPRING_HYSTERESIS = Walking01_withElmos_B.ControlParams.Supervisory.ImpactThresholdKASpringRel * 3.1415926535897931 / 180.0;
/* '<S215>:46:11' THRESH_S                   = ControlParams.Supervisory.SwapThresholdS; */
/* '<S215>:46:14' impact = false; */
impact = false;
/* '<S215>:46:16' sCondition = (s>=THRESH_S) || ... */
/* '<S215>:46:17'              ((s<1-THRESH_S) && ControlParams.Supervisory.EnableBackwardSwap); */
b = ((Walking01_withElmos_DW.s >= Walking01_withElmos_B.ControlParams.Supervisory.SwapThresholdS) || ((Walking01_withElmos_DW.s < 1.0 - Walking01_withElmos_B.ControlParams.Supervisory.SwapThresholdS) && (Walking01_withElmos_B.ControlParams.Supervisory.EnableBackwardSwap != 0.0)));
/* '<S215>:46:20' if ControlParams.Supervisory.EnableSwapOnKAAccel */
if (Walking01_withElmos_B.ControlParams.Supervisory.EnableSwapOnKAAccel != 0.0) {
    /* '<S215>:46:21' impact = impact ... */
    /* '<S215>:46:22'             || (sCondition && (ControlState.StanceLeg==0) && (ddqKA(2)>THRESH_KA_ACCEL)) ... */
    /* '<S215>:46:23'             || (sCondition && (ControlState.StanceLeg==1) && (ddqKA(1)>THRESH_KA_ACCEL)); */
    impact = ((b && (Walking01_withElmos_B.ControlState.StanceLeg == 0.0) && (Walking01_withElmos_B.VectorConcatenate_a[1] > THRESH_KA_ACCEL)) || (b && (Walking01_withElmos_B.ControlState.StanceLeg == 1.0) && (Walking01_withElmos_B.VectorConcatenate_a[0] > THRESH_KA_ACCEL)));
}
/* '<S215>:46:26' if ControlParams.Supervisory.EnableSwapOnKASpring */
if (Walking01_withElmos_B.ControlParams.Supervisory.EnableSwapOnKASpring != 0.0) {
    /* '<S215>:46:27' impact = impact ... */
    /* '<S215>:46:28'             || (sCondition && (ControlState.StanceLeg==0) && (qSpringKA(2)-qSpringKA(1)<THRESH_KASPRING_HYSTERESIS) && (qSpringKA(2)<THRESH_KASPRING_DEFLECTION)) ... */
    /* '<S215>:46:29'             || (sCondition && (ControlState.StanceLeg==1) && (qSpringKA(1)-qSpringKA(2)<THRESH_KASPRING_HYSTERESIS) && (qSpringKA(1)<THRESH_KASPRING_DEFLECTION)); */
    impact = (impact || (b && (Walking01_withElmos_B.ControlState.StanceLeg == 0.0) && (qSpringKA[1] - qSpringKA[0] < THRESH_KASPRING_HYSTERESIS) && (qSpringKA[1] < THRESH_KASPRING_DEFLECTION)) || (b && (Walking01_withElmos_B.ControlState.StanceLeg == 1.0) && (qSpringKA[0] - qSpringKA[1] < THRESH_KASPRING_HYSTERESIS) && (qSpringKA[0] < THRESH_KASPRING_DEFLECTION)));
}
/* '<S215>:46:32' impact = impact || ManualSwap; */
return impact || (Walking01_withElmos_B.DataTypeConversion1 != 0.0);
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static boolean_T Walking01_withElmos_checkImpact(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 8, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withE_checkTransition_Fcn9(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
boolean_T ok;
/* MATLAB Function 'checkTransition': '<S215>:110' */
/* '<S215>:110:3' ok = false; */
ok = false;
/* '<S215>:110:4' if (ControlState.ControllerMode==1) */
if (Walking01_withElmos_B.ControlState.ControllerMode == 1.0) {
    /* '<S215>:110:5' ok = (dq(3) < ControlParams.Supervisory.TransitionThresholdTorsoVel*pi/180); */
    ok = (Walking01_withElmos_B.dq_clean[2] < Walking01_withElmos_B.ControlParams.Supervisory.TransitionThresholdTorsoVel * 3.1415926535897931 / 180.0);
} else {
    if ((Walking01_withElmos_B.ControlState.ControllerMode == 2.0) || (Walking01_withElmos_B.ControlState.ControllerMode == 3.0)) {
        /* '<S215>:110:6' elseif (ControlState.ControllerMode==2) || (ControlState.ControllerMode==3) */
        /* '<S215>:110:7' ok = (TransitionStepCount >= ControlParams.Supervisory.NumTransitionSteps); */
        ok = (Walking01_withElmos_DW.TransitionStepCount >= Walking01_withElmos_B.ControlParams.Supervisory.NumTransitionSteps);
    }
}
return ok;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static boolean_T Walking01_withE_checkTransition(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 9, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_wi_applyGaitTweaks2_p_Fcn10(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T StanceKneeAngleBias;
real_T SwingKneeAngleBias2;
real_T TorsoBias;
real_T QTweakVec[13];
real_T QTweaks[78];
int32_T ibtile;
int32_T jtilecol;
int32_T i;
real_T SwingKeeAngleBias_idx_0;
real_T SwingKeeAngleBias_idx_1;
/*  APPLYGAITTWEAKS2 computes modified Bezier coefficients corresponding */
/*  to a tweaked orbit. */
/*  In order to handle different output definitions consistently, we */
/*  create a matrix QTweak which represents Bezier coefficients for the */
/*  desired modifications to the gait (i.e., there is one row for each */
/*  coordinate in q). */
/* 'applyGaitTweaks2:9' if nargin==2 */
/* 'applyGaitTweaks2:13' StanceKneeAngleBias = ControlParams.Supervisory.GaitTweaks(1) * pi/180; */
StanceKneeAngleBias = ControlParams_Supervisory_GaitT[0] * 3.1415926535897931 / 180.0;
/* 'applyGaitTweaks2:14' SwingKneeAngleBias1 = ControlParams.Supervisory.GaitTweaks(2) * pi/180; */
/* 'applyGaitTweaks2:15' SwingKneeAngleBias2 = ControlParams.Supervisory.GaitTweaks(3) * pi/180; */
SwingKneeAngleBias2 = ControlParams_Supervisory_GaitT[2] * 3.1415926535897931 / 180.0;
/* 'applyGaitTweaks2:16' SwingKneeAngleBias3 = ControlParams.Supervisory.GaitTweaks(4) * pi/180; */
/* 'applyGaitTweaks2:17' TorsoBias           = ControlParams.Supervisory.GaitTweaks(5) * pi/180; */
TorsoBias = ControlParams_Supervisory_GaitT[4] * 3.1415926535897931 / 180.0;
/* 'applyGaitTweaks2:19' QTweakVec = [... */
/* 'applyGaitTweaks2:20'         0; ... */
/* 'applyGaitTweaks2:21'         0; ... */
/* 'applyGaitTweaks2:22'         TorsoBias; ... */
/* 'applyGaitTweaks2:23'         -StanceKneeAngleBias/2 - TorsoBias; ... */
/* 'applyGaitTweaks2:24'         StanceKneeAngleBias/2 - TorsoBias; ... */
/* 'applyGaitTweaks2:25'         -StanceKneeAngleBias/2 - TorsoBias; ... */
/* 'applyGaitTweaks2:26'         StanceKneeAngleBias/2 - TorsoBias; ... */
/* 'applyGaitTweaks2:27'         -StanceKneeAngleBias/2 - TorsoBias; ... */
/* 'applyGaitTweaks2:28'         StanceKneeAngleBias/2 - TorsoBias; ... */
/* 'applyGaitTweaks2:29'         0; ... */
/* 'applyGaitTweaks2:30'         -StanceKneeAngleBias/2 - TorsoBias; ... */
/* 'applyGaitTweaks2:31'         StanceKneeAngleBias/2 - TorsoBias; ... */
/* 'applyGaitTweaks2:32'         0]; */
QTweakVec[0] = 0.0;
QTweakVec[1] = 0.0;
QTweakVec[2] = TorsoBias;
QTweakVec[3] = -StanceKneeAngleBias / 2.0 - TorsoBias;
QTweakVec[4] = StanceKneeAngleBias / 2.0 - TorsoBias;
QTweakVec[5] = -StanceKneeAngleBias / 2.0 - TorsoBias;
QTweakVec[6] = StanceKneeAngleBias / 2.0 - TorsoBias;
QTweakVec[7] = -StanceKneeAngleBias / 2.0 - TorsoBias;
QTweakVec[8] = StanceKneeAngleBias / 2.0 - TorsoBias;
QTweakVec[9] = 0.0;
QTweakVec[10] = -StanceKneeAngleBias / 2.0 - TorsoBias;
QTweakVec[11] = StanceKneeAngleBias / 2.0 - TorsoBias;
QTweakVec[12] = 0.0;
/* 'applyGaitTweaks2:33' QTweaks = repmat(QTweakVec, 1, 6); */
for (jtilecol = 0; jtilecol < 6; jtilecol++) {
    ibtile = jtilecol * 13;
    memcpy(&QTweaks[ibtile], &QTweakVec[0], 13U * sizeof(real_T));
}
/* 'applyGaitTweaks2:35' if (ControlState.ControllerMode == 4) */
if (ControlState_ControllerMode == 4.0) {
    /* 'applyGaitTweaks2:36' SwingKeeAngleBias = [SwingKneeAngleBias1 SwingKneeAngleBias2 SwingKneeAngleBias2 SwingKneeAngleBias3]/2; */
    SwingKeeAngleBias_idx_0 = ControlParams_Supervisory_GaitT[1] * 3.1415926535897931 / 180.0 / 2.0;
    SwingKeeAngleBias_idx_1 = SwingKneeAngleBias2 / 2.0;
    StanceKneeAngleBias = SwingKneeAngleBias2 / 2.0;
    SwingKneeAngleBias2 = ControlParams_Supervisory_GaitT[3] * 3.1415926535897931 / 180.0 / 2.0;
    /* 'applyGaitTweaks2:37' QTweaks(6,2:5)  = -SwingKeeAngleBias - TorsoBias; */
    QTweaks[18] = -SwingKeeAngleBias_idx_0 - TorsoBias;
    QTweaks[31] = -SwingKeeAngleBias_idx_1 - TorsoBias;
    QTweaks[44] = -StanceKneeAngleBias - TorsoBias;
    QTweaks[57] = -SwingKneeAngleBias2 - TorsoBias;
    /* 'applyGaitTweaks2:38' QTweaks(7,2:5)  =  SwingKeeAngleBias - TorsoBias; */
    QTweaks[19] = SwingKeeAngleBias_idx_0 - TorsoBias;
    QTweaks[32] = SwingKeeAngleBias_idx_1 - TorsoBias;
    QTweaks[45] = StanceKneeAngleBias - TorsoBias;
    QTweaks[58] = SwingKneeAngleBias2 - TorsoBias;
    /* 'applyGaitTweaks2:39' QTweaks(11,2:5) = -SwingKeeAngleBias - TorsoBias; */
    QTweaks[23] = -SwingKeeAngleBias_idx_0 - TorsoBias;
    QTweaks[36] = -SwingKeeAngleBias_idx_1 - TorsoBias;
    QTweaks[49] = -StanceKneeAngleBias - TorsoBias;
    QTweaks[62] = -SwingKneeAngleBias2 - TorsoBias;
    /* 'applyGaitTweaks2:40' QTweaks(12,2:5) =  SwingKeeAngleBias - TorsoBias; */
    QTweaks[24] = SwingKeeAngleBias_idx_0 - TorsoBias;
    QTweaks[37] = SwingKeeAngleBias_idx_1 - TorsoBias;
    QTweaks[50] = StanceKneeAngleBias - TorsoBias;
    QTweaks[63] = SwingKneeAngleBias2 - TorsoBias;
}
/* 'applyGaitTweaks2:43' HAlpha = ControlParams.Output.H0 * QTweaks; */
for (jtilecol = 0; jtilecol < 6; jtilecol++) {
    for (ibtile = 0; ibtile < 6; ibtile++) {
        HAlpha[jtilecol + 6 * ibtile] = 0.0;
        for (i = 0; i < 13; i++) {
            HAlpha[jtilecol + 6 * ibtile] += ControlParams_Output_H0[6 * i + jtilecol] * QTweaks[13 * ibtile + i];
        }
    }
}
/* 'applyGaitTweaks2:44' if ~GetTweaks */
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_wi_applyGaitTweaks2_p(\
%assign comma = ""
%<comma>real_T ControlState_ControllerMode\
%assign comma = ", "
%<comma>const real_T ControlParams_Supervisory_GaitT[5]\
%assign comma = ", "
%<comma>const real_T ControlParams_Output_H0[78]\
%assign comma = ", "
%if SLibCG_ArgAccessed(9, 10, 3)
%<comma>real_T GetTweaks\
%assign comma = ", "
%endif
%<comma>real_T HAlpha[36]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 10, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_elevate1_Fcn11(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T nm1d2;
real_T anew;
int32_T k;
real_T ndbl;
real_T apnd;
real_T cdiff;
int32_T c_k;
int32_T c_n;
int32_T ar;
int32_T ia;
int32_T loop_ub;
real_T y_data[5];
real_T d_data[25];
real_T b_d_data[25];
real_T b_data[30];
real_T d_data_0[30];
real_T tmp_data[30];
int32_T d_sizes_idx_0;
int32_T b_sizes_idx_1;
int8_T e_idx_0;
int8_T e_idx_1;
real_T u1;
/*  From http://en.wikipedia.org/wiki/B%<"\%C3\%A9zier_curve#Degree_elevation"> */
/*  \mathbf{P'}_i = \frac{i}{n+1}\mathbf{P}_{i-1} + \frac{n+1-i}{n+1}\mathbf{P}_i,\quad i=0,\ldots, n+1.  */
/* 'bezierelevate:23' alpha_out = alpha*([diag((M+1):-1:1)/(M+1) zeros(M+1,1)] + [zeros(M+1,1) diag(1:1:(M+1))/(M+1)]); */
if (rtIsNaN(M + 1.0)) {
    ar = 1;
    anew = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
    apnd = 1.0;
} else {
    anew = M + 1.0;
    ndbl = floor(-(1.0 - (M + 1.0)) + 0.5);
    apnd = (M + 1.0) + -ndbl;
    cdiff = fabs(M + 1.0);
    if (!(cdiff >= 1.0)) {
        cdiff = 1.0;
    }
    if (fabs(1.0 - apnd) < 4.4408920985006262E-16 * cdiff) {
        ndbl++;
        apnd = 1.0;
    } else if (1.0 - apnd > 0.0) {
        apnd = (M + 1.0) + -(ndbl - 1.0);
    } else {
        ndbl++;
    }
    ar = (int32_T)ndbl;
}
y_data[0] = anew;
if (ar > 1) {
    y_data[ar - 1] = apnd;
    nm1d2 = (ar - 1) / 2;
    k = 1;
    while (k <= nm1d2 - 1) {
        y_data[1] = anew + -1.0;
        y_data[ar - 2] = apnd - -1.0;
        k = 2;
    }
    if (nm1d2 << 1 == ar - 1) {
        y_data[nm1d2] = (anew + apnd) / 2.0;
    } else {
        y_data[nm1d2] = anew + -(real_T)nm1d2;
        y_data[nm1d2 + 1] = apnd - (-(real_T)nm1d2);
    }
}
e_idx_0 = (int8_T)ar;
e_idx_1 = (int8_T)ar;
d_sizes_idx_0 = e_idx_0;
c_n = e_idx_1;
loop_ub = e_idx_0 * e_idx_1;
for (ia = 0; ia < loop_ub; ia++) {
    d_data[ia] = 0.0;
}
for (nm1d2 = 0; nm1d2 + 1 <= ar; nm1d2++) {
    d_data[nm1d2 + e_idx_0 * nm1d2] = y_data[nm1d2];
}
if (rtIsNaN(M + 1.0)) {
    ar = 1;
    anew = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
    apnd = M + 1.0;
} else {
    anew = 1.0;
    ndbl = floor(((M + 1.0) - 1.0) + 0.5);
    apnd = 1.0 + ndbl;
    cdiff = (1.0 + ndbl) - (M + 1.0);
    u1 = fabs(M + 1.0);
    if ((1.0 >= u1) || rtIsNaN(u1)) {
        u1 = 1.0;
    }
    if (fabs(cdiff) < 4.4408920985006262E-16 * u1) {
        ndbl++;
        apnd = M + 1.0;
    } else if (cdiff > 0.0) {
        apnd = (ndbl - 1.0) + 1.0;
    } else {
        ndbl++;
    }
    ar = (int32_T)ndbl;
}
y_data[0] = anew;
if (ar > 1) {
    y_data[ar - 1] = apnd;
    nm1d2 = (ar - 1) / 2;
    k = 1;
    while (k <= nm1d2 - 1) {
        y_data[1] = anew + 1.0;
        y_data[ar - 2] = apnd - 1.0;
        k = 2;
    }
    if (nm1d2 << 1 == ar - 1) {
        y_data[nm1d2] = (anew + apnd) / 2.0;
    } else {
        y_data[nm1d2] = anew + (real_T)nm1d2;
        y_data[nm1d2 + 1] = apnd - (real_T)nm1d2;
    }
}
e_idx_0 = (int8_T)ar;
e_idx_1 = (int8_T)ar;
loop_ub = e_idx_0 * e_idx_1;
for (ia = 0; ia < loop_ub; ia++) {
    b_d_data[ia] = 0.0;
}
for (nm1d2 = 0; nm1d2 + 1 <= ar; nm1d2++) {
    b_d_data[nm1d2 + e_idx_0 * nm1d2] = y_data[nm1d2];
}
b_sizes_idx_1 = c_n + 1;
nm1d2 = (int32_T)(M + 1.0);
k = (int32_T)(M + 1.0);
ar = d_sizes_idx_0 * c_n + nm1d2;
loop_ub = d_sizes_idx_0 * c_n;
for (ia = 0; ia < loop_ub; ia++) {
    d_data_0[ia] = d_data[ia] / (M + 1.0);
}
for (ia = 0; ia < nm1d2; ia++) {
    d_data_0[ia + d_sizes_idx_0 * c_n] = 0.0;
}
for (ia = 0; ia < k; ia++) {
    tmp_data[ia] = 0.0;
}
loop_ub = e_idx_0 * e_idx_1;
for (ia = 0; ia < loop_ub; ia++) {
    tmp_data[ia + k] = b_d_data[ia] / (M + 1.0);
}
for (ia = 0; ia < ar; ia++) {
    b_data[ia] = d_data_0[ia] + tmp_data[ia];
}
c_k = alpha_sizes[1];
e_idx_1 = (int8_T)b_sizes_idx_1;
c_n = b_sizes_idx_1 - 1;
alpha_out_sizes[0] = 1;
alpha_out_sizes[1] = e_idx_1;
nm1d2 = e_idx_1;
for (ia = 0; ia < nm1d2; ia++) {
    alpha_out_data[ia] = 0.0;
}
for (nm1d2 = 0; nm1d2 <= c_n; nm1d2++) {
    for (k = nm1d2; k + 1 <= nm1d2 + 1; k++) {
        alpha_out_data[k] = 0.0;
    }
}
nm1d2 = 0;
for (k = 0; k <= c_n; k++) {
    ar = 0;
    b_sizes_idx_1 = nm1d2 + c_k;
    for (loop_ub = nm1d2; loop_ub + 1 <= b_sizes_idx_1; loop_ub++) {
        if (b_data[loop_ub] != 0.0) {
            ia = ar;
            for (d_sizes_idx_0 = k; d_sizes_idx_0 + 1 <= k + 1; d_sizes_idx_0++) {
                ia++;
                alpha_out_data[d_sizes_idx_0] += alpha_data[ia - 1] * b_data[loop_ub];
            }
        }
        ar++;
    }
    nm1d2 += c_k;
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withElmos_elevate1(\
%assign comma = ""
%<comma>const real_T alpha_data[]\
%assign comma = ", "
%<comma>const int32_T alpha_sizes[2]\
%assign comma = ", "
%<comma>real_T M\
%assign comma = ", "
%<comma>real_T alpha_out_data[]\
%assign comma = ", "
%<comma>int32_T alpha_out_sizes[2]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 11, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_computeLateralControl_Fcn12(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T Ttorso;
real_T q3st;
real_T q3sw;
real_T hd;
real_T alpha_out[6];
int32_T loop_ub;
real_T alpha_out_data[5];
int32_T alpha_out_sizes[2];
real_T tmp_data[6];
int32_T tmp_sizes[2];
/* 'computeLateralControl:4' if (ControlParams.Feedback.LateralControlMode==1) || (ControlParams.Feedback.LateralControlMode==3) */
if ((ControlParams_Feedback_LateralC == 1.0) || (ControlParams_Feedback_LateralC == 3.0)) {
    /* 'computeLateralControl:6' PSI  = 9*pi/180; */
    /* 'computeLateralControl:7' phi0 = PSI; */
    /* 'computeLateralControl:9' if (stance_leg==0) */
    if (stance_leg == 0.0) {
        /* 'computeLateralControl:10' Ttorso = -1; */
        Ttorso = -1;
        /* ControlParams.Feedback.w_torso_lat; */
        /* 'computeLateralControl:11' q3st   = q(10); */
        q3st = q[9];
        /* 'computeLateralControl:12' dq3st  = dq(10); */
        /* 'computeLateralControl:13' q3sw   = q(13); */
        q3sw = q[12];
    } else {
        /* 'computeLateralControl:14' else */
        /* 'computeLateralControl:15' Ttorso = 1; */
        Ttorso = 1;
        /* ControlParams.Feedback.w_torso_lat; */
        /* 'computeLateralControl:16' q3st   = q(13); */
        q3st = q[12];
        /* 'computeLateralControl:17' dq3st  = dq(13); */
        /* 'computeLateralControl:18' q3sw   = q(10); */
        q3sw = q[9];
    }
    /*  Convert to absolute coordinates, where phi is the absolute angle */
    /*  (from vertical) of the line from the stance toe to the center of the */
    /*  hips. The sign is chosen so that phi>0 means that the center of mass */
    /*  is to the _inside_ of the stance leg. */
    /* 'computeLateralControl:25' phi  = Ttorso*q(2)-q3st+PSI; */
    /* 'computeLateralControl:26' dphi = Ttorso*dq(2)-dq3st; */
    /* 'computeLateralControl:28' if (ControlParams.Feedback.LateralControlMode==1) */
    /*  Convert back to body coordinates */
    /*  q3d = -Ttorso*q(2)-phiswd+PSI; */
    /* 'computeLateralControl:47' if (ControlState.StepCount > ControlParams.Supervisory.TorsoBackOnStep) */
    if (ControlState_StepCount > ControlParams_Supervisory_Torso) {
        /* 'computeLateralControl:48' q3d = -(1+ControlParams.Feedback.kp_lat+ControlParams.Feedback.w_torso_lat)*Ttorso*q(2) + ControlParams.Feedback.kp_lat*q3st + ControlParams.Feedback.lat_bias2*pi/180; */
        q3st = (-((1.0 + ControlParams_Feedback_kp_lat) + ControlParams_Feedback_w_torso_) * (real_T)Ttorso * q[1] + ControlParams_Feedback_kp_lat * q3st) + ControlParams_Feedback_lat_bi_0 * 3.1415926535897931 / 180.0;
    } else {
        /* 'computeLateralControl:49' else */
        /* 'computeLateralControl:50' q3d = -(1+ControlParams.Feedback.kp_lat+ControlParams.Feedback.w_torso_lat)*Ttorso*q(2) + ControlParams.Feedback.kp_lat*q3st + ControlParams.Feedback.lat_bias*pi/180; */
        q3st = (-((1.0 + ControlParams_Feedback_kp_lat) + ControlParams_Feedback_w_torso_) * (real_T)Ttorso * q[1] + ControlParams_Feedback_kp_lat * q3st) + ControlParams_Feedback_lat_bias * 3.1415926535897931 / 180.0;
    }
    /*  Saturate and use this angle as the desired setpoint */
    /* 'computeLateralControl:54' q3dmin       = ControlParams.Feedback.q3d_min_lat*pi/180; */
    /* 'computeLateralControl:55' q3dmax       = ControlParams.Feedback.q3d_max_lat*pi/180; */
    /* hd = sat(q3d-2*pi/180, q3dmin, q3dmax); */
    /* 'computeLateralControl:57' hd = sat(q3d, q3dmin, q3dmax); */
    /* 'sat:3' y = max(lo, min(x, hi)); */
    hd = ControlParams_Feedback_q3d_max_ * 3.1415926535897931 / 180.0;
    if ((q3st <= hd) || rtIsNaN(hd)) {
        hd = q3st;
    }
    q3st = ControlParams_Feedback_q3d_min_ * 3.1415926535897931 / 180.0;
    if ((q3st >= hd) || rtIsNaN(hd)) {
        hd = q3st;
    }
    /* s = (0:0.2:1); */
    /* h_alpha(6,:) = s*hd + (1-s)*q3sw; */
    /* h_alpha(6,:) = [q3sw q3sw hd hd hd q3sw]; */
    /* 'computeLateralControl:62' h_alpha(6,:) = bezierelevate([q3sw -8*pi/180 hd hd],5); */
    /* 'bezierelevate:3' M = size(alpha,2)-1; */
    /*  original M */
    /* 'bezierelevate:4' if nargin<2 */
    /* 'bezierelevate:8' if Mdes < M */
    /* 'bezierelevate:12' alpha_out = [alpha, zeros(size(alpha,1), Mdes-M)]; */
    alpha_out[0] = q3sw;
    alpha_out[1] = -0.13962634015954636;
    alpha_out[2] = hd;
    alpha_out[3] = hd;
    alpha_out[4] = 0.0;
    alpha_out[5] = 0.0;
    /* 'bezierelevate:13' while (M < Mdes) */
    /* 'bezierelevate:14' alpha_out(:,1:M+2) = elevate1(alpha_out(:,1:M+1), M); */
    alpha_out_sizes[0] = 1;
    alpha_out_sizes[1] = 4;
    for (Ttorso = 0; Ttorso < 4; Ttorso++) {
        alpha_out_data[Ttorso] = alpha_out[Ttorso];
    }
    %<(SLibCGCallSubFcn("Walking01_withElmos_elevate1", ["alpha_out_data", "alpha_out_sizes", "3.0", "tmp_data", "tmp_sizes"], 9, 12, 0))>;
    loop_ub = tmp_sizes[1];
    for (Ttorso = 0; Ttorso < loop_ub; Ttorso++) {
        alpha_out[Ttorso] = tmp_data[tmp_sizes[0] * Ttorso];
    }
    /* 'bezierelevate:15' M = M+1; */
    /* 'bezierelevate:14' alpha_out(:,1:M+2) = elevate1(alpha_out(:,1:M+1), M); */
    alpha_out_sizes[0] = 1;
    alpha_out_sizes[1] = 5;
    for (Ttorso = 0; Ttorso < 5; Ttorso++) {
        alpha_out_data[Ttorso] = alpha_out[Ttorso];
    }
    %<(SLibCGCallSubFcn("Walking01_withElmos_elevate1", ["alpha_out_data", "alpha_out_sizes", "4.0", "tmp_data", "tmp_sizes"], 9, 12, 1))>;
    loop_ub = tmp_sizes[1];
    for (Ttorso = 0; Ttorso < loop_ub; Ttorso++) {
        alpha_out[Ttorso] = tmp_data[tmp_sizes[0] * Ttorso];
    }
    /* 'bezierelevate:15' M = M+1; */
    for (Ttorso = 0; Ttorso < 6; Ttorso++) {
        h_alpha[5 + 6 * Ttorso] = alpha_out[Ttorso];
    }
    /* h_alpha(6,:) = bezierelevate([q3  hd],5); */
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_computeLateralControl(\
%assign comma = ""
%<comma>const real_T q[13]\
%assign comma = ", "
%if SLibCG_ArgAccessed(9, 12, 1)
%<comma>const real_T dq[13]\
%assign comma = ", "
%endif
%<comma>real_T stance_leg\
%assign comma = ", "
%if SLibCG_ArgAccessed(9, 12, 3)
%<comma>const real_T u_ff[6]\
%assign comma = ", "
%endif
%<comma>real_T h_alpha[36]\
%assign comma = ", "
%<comma>real_T ControlState_StepCount\
%assign comma = ", "
%<comma>real_T ControlParams_Supervisory_Torso\
%assign comma = ", "
%<comma>real_T ControlParams_Feedback_kp_lat\
%assign comma = ", "
%<comma>real_T ControlParams_Feedback_q3d_min_\
%assign comma = ", "
%<comma>real_T ControlParams_Feedback_q3d_max_\
%assign comma = ", "
%<comma>real_T ControlParams_Feedback_w_torso_\
%assign comma = ", "
%<comma>real_T ControlParams_Feedback_LateralC\
%assign comma = ", "
%<comma>real_T ControlParams_Feedback_lat_bias\
%assign comma = ", "
%<comma>real_T ControlParams_Feedback_lat_bi_0\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 12, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withE_eml_li_find_enu_Fcn13(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T j;
int32_T i;
*y_sizes = 0;
for (j = 0; j < 6; j++) {
    if (x[j]) {
        (*y_sizes)++;
    }
}
j = 0;
for (i = 0; i < 6; i++) {
    if (x[i]) {
        y_data[j] = i + 1;
        j++;
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withE_eml_li_find_enu(\
%assign comma = ""
%<comma>const boolean_T x[6]\
%assign comma = ", "
%<comma>int32_T y_data[]\
%assign comma = ", "
%<comma>int32_T *y_sizes\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 13, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_bezierv_a_Fcn14(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T x[6];
real_T y[6];
int32_T j;
static const int8_T b[6] = { 1, 5, 10, 10, 5, 1 };
int32_T i;
/* 'bezierv:2' [n, m] = size(alpha); */
/* 'bezierv:3' ns = size(s,1); */
/* 'bezierv:4' value=zeros(n,1); */
/* 'bezierv:5' M = m-1; */
/* 'bezierv:6' if M==3 */
/* 'bezierv:10' elseif M==5 */
/* 'bezierv:11' k=[1 5 10 10 5 1]; */
/* %<"\%"> */
/* 'bezierv:24' x = ones(ns, M+1); */
/* 'bezierv:25' y = ones(ns, M+1); */
for (i = 0; i < 6; i++) {
    value[i] = 0.0;
    x[i] = 1.0;
    y[i] = 1.0;
}
/* 'bezierv:26' for i=1:M */
for (i = 0; i < 5; i++) {
    /* 'bezierv:27' x(:,i+1)=s.*x(:,i); */
    x[1 + i] = s * x[i];
    /* 'bezierv:28' y(:,i+1)=(1-s).*y(:,i); */
    y[1 + i] = (1.0 - s) * y[i];
}
/* 'bezierv:30' idx = 1; */
/* 'bezierv:31' for i=1:n */
for (i = 0; i < 6; i++) {
    /* 'bezierv:32' value(i) = 0; */
    value[i] = 0.0;
    /* 'bezierv:33' for j=1:M+1 */
    for (j = 0; j < 6; j++) {
        /* 'bezierv:34' value(i) = value(i) + alpha(i, j)*k(j)*x(idx,j)*y(idx,M+2-j); */
        value[i] += alpha[6 * j + i] * (real_T)b[j] * x[j] * y[5 - j];
    }
    /* 'bezierv:36' idx = idx+(ns==n); */
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withElmos_bezierv_a(\
%assign comma = ""
%<comma>const real_T alpha[36]\
%assign comma = ", "
%<comma>real_T s\
%assign comma = ", "
%<comma>real_T value[6]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 14, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_sat_iu_Fcn15(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T k;
real_T minval;
/* 'ATRIAS3D_ZD_Output02:114' y = max(lo, min(x, hi)); */
for (k = 0; k < 6; k++) {
    if ((x[k] <= hi[k]) || rtIsNaN(hi[k])) {
        minval = x[k];
    } else {
        minval = hi[k];
    }
    if ((lo[k] >= minval) || rtIsNaN(minval)) {
        y[k] = lo[k];
    } else {
        y[k] = minval;
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withElmos_sat_iu(\
%assign comma = ""
%<comma>const real_T x[6]\
%assign comma = ", "
%<comma>const real_T lo[6]\
%assign comma = ", "
%<comma>const real_T hi[6]\
%assign comma = ", "
%<comma>real_T y[6]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 15, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_polyv_d_Fcn16(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T s_0;
int32_T i;
/* 'polyv:2' if nargin<3 */
/* 'polyv:5' a0=poly_cor(:,1); */
/* 'polyv:6' a1=poly_cor(:,2); */
/* 'polyv:7' a2=poly_cor(:,3); */
/* 'polyv:8' a3=poly_cor(:,4); */
/* 'polyv:9' a4=poly_cor(:,5); */
/* 'polyv:10' value=a0+s.*(a1+s.*(a2+s.*(a3+s.*a4))); */
/* 'polyv:11' value=value.*(s<=s_corr_max); */
s_0 = (s <= s_corr_max);
for (i = 0; i < 6; i++) {
    value[i] = ((((poly_cor[24 + i] * s + poly_cor[18 + i]) * s + poly_cor[12 + i]) * s + poly_cor[6 + i]) * s + poly_cor[i]) * (real_T)s_0;
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withElmos_polyv_d(\
%assign comma = ""
%<comma>const real_T poly_cor[30]\
%assign comma = ", "
%<comma>real_T s\
%assign comma = ", "
%<comma>real_T s_corr_max\
%assign comma = ", "
%<comma>real_T value[6]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 16, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking0_ATRIAS3D_ZD_Output02_j_Fcn17(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T T0[36];
real_T c[15];
real_T h_alpha[36];
real_T h_alpha_high[36];
real_T sat_correction[6];
real_T dsdq[13];
real_T theta;
real_T dtheta;
real_T delta_theta;
real_T jacob_h0[78];
real_T b;
real_T d;
real_T e;
real_T g;
int32_T k;
static const real_T b_T0[36] = { 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };
static const real_T i[36] = { 0.0, 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 };
static const int8_T j[13] = { 0, 1, 2, 5, 6, 3, 4, 10, 11, 12, 7, 8, 9 };
static const real_T b_b[6] = { -1.0, -0.8, -0.6, -0.4, -0.2, 0.0 };
static const real_T hd_min[6] = { 2.6179938779914944, 2.6179938779914944, 0.26179938779914941, 0.26179938779914941, -0.3490658503988659, -0.3490658503988659 };
static const real_T hd_max[6] = { 3.839724354387525, 3.839724354387525, 2.0943951023931953, 2.0943951023931953, 0.3490658503988659, 0.3490658503988659 };
real_T tmp[6];
real_T hd_min_0[6];
real_T hd_max_0[6];
boolean_T b_s[6];
boolean_T b_s_0[6];
int32_T i_0;
real_T tmp_0[78];
real_T jacob_h0_0[78];
int32_T tmp_data[6];
int32_T tmp_sizes;
int32_T tmp_data_0[6];
real_T h_alpha_data[36];
%assign _modelSS = ""

/*  Define matrix to convert between motor and standard actuated coordinates */
/*  [uLAst; uLAsw; uKAst; uKAsw; u3st; u3sw] = T0*[u1R; u2R; u3R; u1L; u2L; u3L] */
/* 'ATRIAS3D_ZD_Output02:6' T0 = [0.5 0.5 0 0 0 0; 0 0 0 0.5 0.5 0; -1 1 0 0 0 0; 0 0 0 -1 1 0; 0 0 1 0 0 0; 0 0 0 0 0 1]; */
memcpy(&T0[0], &b_T0[0], 36U * sizeof(real_T));
/* 'ATRIAS3D_ZD_Output02:7' if (ControlState.StanceLeg==1) */
if (ControlState_StanceLeg == 1.0) {
    /* 'ATRIAS3D_ZD_Output02:8' T0 = T0([2 1 4 3 6 5],:); */
    memcpy(&T0[0], &i[0], 36U * sizeof(real_T));
}
/* 'ATRIAS3D_ZD_Output02:10' T1 = [zeros(6,7) T0]; */
/*     %<"\%\% Compute s and modify Bezier parameters to extend outside 0 <= s <= 1"> */
/* [Sy,Sq] = SymmetryMatrices(); */
/* 'ATRIAS3D_ZD_Output02:14' if (ControlState.StanceLeg==0) */
if (ControlState_StanceLeg == 0.0) {
    /* 'ATRIAS3D_ZD_Output02:15' c = [Output.Theta.c0 Output.Theta.ct Output.Theta.cq]; */
    c[0] = Output_Theta_c0;
    c[1] = Output_Theta_ct;
    memcpy(&c[2], &Output_Theta_cq[0], 13U * sizeof(real_T));
    /* 'ATRIAS3D_ZD_Output02:16' jacob_h0 = Output.H0; */
    memcpy(&jacob_h0[0], &Output_H0[0], 78U * sizeof(real_T));
} else {
    /* 'ATRIAS3D_ZD_Output02:17' else */
    /* 'ATRIAS3D_ZD_Output02:18' c = [Output.Theta.c0 Output.Theta.ct Output.Theta.cq(:,[1 2 3 6 7 4 5 11 12 13 8 9 10])]; */
    c[0] = Output_Theta_c0;
    c[1] = Output_Theta_ct;
    for (i_0 = 0; i_0 < 13; i_0++) {
        c[i_0 + 2] = Output_Theta_cq[j[i_0]];
    }
    /* 'ATRIAS3D_ZD_Output02:19' c(:,3:4) = -c(:,3:4); */
    c[2] = -c[2];
    c[3] = -c[3];
    /* 'ATRIAS3D_ZD_Output02:20' jacob_h0 = Output.H0(:,[1 2 3 6 7 4 5 11 12 13 8 9 10]); */
    for (i_0 = 0; i_0 < 13; i_0++) {
        for (k = 0; k < 6; k++) {
            jacob_h0[k + 6 * i_0] = Output_H0[6 * j[i_0] + k];
        }
    }
    /* 'ATRIAS3D_ZD_Output02:21' jacob_h0(:,1:2) = -jacob_h0(:,1:2); */
    for (i_0 = 0; i_0 < 2; i_0++) {
        for (k = 0; k < 6; k++) {
            jacob_h0[k + 6 * i_0] = -Output_H0[6 * j[i_0] + k];
        }
    }
    /* jacob_h0 = Output.H0; */
    /* jacob_h0 = Sy*jacob_h0*Sq; */
}
/* 'ATRIAS3D_ZD_Output02:28' [s,ds,dsdq,theta,dtheta,delta_theta] = ATRIAS3D_ZD_s6(t, q, dq, Output.ThetaLimits, c); */
%if SLibCG_FcnCallArgAccessed(9,17,0,0)
%<SLibCG_AccessArg(9 ,17, 0)>
%endif
%if SLibCG_FcnCallArgAccessed(9,17,0,1)
%<SLibCG_AccessArg(9 ,17, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(9,17,0,2)
%<SLibCG_AccessArg(9 ,17, 2)>
%endif
%if SLibCG_FcnCallArgAccessed(9,17,0,3)
%<SLibCG_AccessArg(9 ,17, 6)>
%endif
%if SLibCG_FcnCallArgAccessed(9,17,0,5)
%<SLibCG_AccessArg(9 ,17, 14)>
%endif
%if SLibCG_FcnCallArgAccessed(9,17,0,6)
%<SLibCG_AccessArg(9 ,17, 15)>
%endif

%<(SLibCGCallSubFcn("Walking01_with_ATRIAS3D_ZD_s6_b", ["t", "q", "dq", "Output_ThetaLimits", "c", "s", "ds", "dsdq", "&theta", "&dtheta", "&delta_theta"], 9, 17, 0))>;
/* 'ATRIAS3D_ZD_Output02:29' s_unsaturated = s; */
/* 'ATRIAS3D_ZD_Output02:31' h_alpha = Output.HAlpha; */
memcpy(&h_alpha[0], &Output_HAlpha[0], 36U * sizeof(real_T));
/* 'ATRIAS3D_ZD_Output02:32' if (ControlState.StanceLeg==1) */
/* 'ATRIAS3D_ZD_Output02:36' if Output.SaturateS==1 */
if (Output_SaturateS == 1.0) {
    /* delta = 0.2; */
    /* p = [0.2  -0.4  0.2  0]; %<"\% coefficients of transition poly"> */
    /* [s, ds] = softsaturate(s, ds, delta, p); */
    /*  Modified Feb. 4th, 2014 for interpolative bezier table bounds. */
    /* 'ATRIAS3D_ZD_Output02:41' delta = 0.1; */
    /* 'ATRIAS3D_ZD_Output02:42' ds(s>1+delta) = 0; */
    e = *ds;
    k = 0;
    if (*s > 1.1) {
        k = 1;
    }
    for (i_0 = 0; i_0 < k; i_0++) {
        e = 0.0;
    }
    /* 'ATRIAS3D_ZD_Output02:43' s(s>1+delta) = 1+delta; */
    b = *s;
    k = 0;
    if (*s > 1.1) {
        k = 1;
    }
    for (i_0 = 0; i_0 < k; i_0++) {
        b = 1.1;
    }
    /* 'ATRIAS3D_ZD_Output02:44' ds(s<-delta) = 0; */
    g = e;
    k = 0;
    if (b < -0.1) {
        k = 1;
    }
    for (i_0 = 0; i_0 < k; i_0++) {
        g = 0.0;
    }
    *ds = g;
    /* 'ATRIAS3D_ZD_Output02:45' s(s<-delta) = -delta; */
    d = b;
    k = 0;
    if (b < -0.1) {
        k = 1;
    }
    for (i_0 = 0; i_0 < k; i_0++) {
        d = -0.1;
    }
    *s = d;
} else if (Output_SaturateS == 2.0) {
    /* 'ATRIAS3D_ZD_Output02:47' elseif Output.SaturateS==2 */
    /* 'ATRIAS3D_ZD_Output02:48' if (length(s)>1) */
    /* 'ATRIAS3D_ZD_Output02:51' else */
    /* 'ATRIAS3D_ZD_Output02:52' dqyTds = repmat((c(1,5)*delta_theta), 2, 1); */
    theta = c[4] * delta_theta;
    /* 'ATRIAS3D_ZD_Output02:53' s6 = repmat(s, 6, 1); */
    /*  If (s>1), hold the desired knee angles constant and keep the */
    /*  torso angle fixed by decreasing the desired leg angles */
    /* 'ATRIAS3D_ZD_Output02:58' h_alpha_high = h_alpha(:,end)*[1 1 1 1 1 1]; */
    for (i_0 = 0; i_0 < 6; i_0++) {
        for (k = 0; k < 6; k++) {
            h_alpha_high[i_0 + 6 * k] = Output_HAlpha[30 + i_0];
        }
    }
    /* 'ATRIAS3D_ZD_Output02:59' h_alpha_high(1:2,:) = h_alpha_high(1:2,:)+dqyTds*(-1:0.2:0); */
    for (i_0 = 0; i_0 < 2; i_0++) {
        for (k = 0; k < 6; k++) {
            h_alpha_high[i_0 + 6 * k] += theta * b_b[k];
        }
    }
    /* 'ATRIAS3D_ZD_Output02:60' h_alpha_high(1:2) = max(150*pi/180, h_alpha_high(1:2)); */
    theta = h_alpha_high[1];
    if ((2.6179938779914944 >= h_alpha_high[0]) || rtIsNaN(h_alpha_high[0])) {
        h_alpha_high[0] = 2.6179938779914944;
    }
    if ((2.6179938779914944 >= theta) || rtIsNaN(theta)) {
        h_alpha_high[1] = 2.6179938779914944;
    } else {
        h_alpha_high[1] = theta;
    }
    /* 'ATRIAS3D_ZD_Output02:61' h_alpha(s6>1,:) = h_alpha_high(s6>1,:); */
    for (i_0 = 0; i_0 < 6; i_0++) {
        b_s[i_0] = (*s > 1.0);
        b_s_0[i_0] = (*s > 1.0);
    }
    %<(SLibCGCallSubFcn("Walking01_withE_eml_li_find_enu", ["b_s", "tmp_data", "&tmp_sizes"], 9, 17, 4))>;
    %<(SLibCGCallSubFcn("Walking01_withE_eml_li_find_enu", ["b_s_0", "tmp_data_0", "&tmp_sizes"], 9, 17, 5))>;
    for (i_0 = 0; i_0 < 6; i_0++) {
        for (k = 0; k < tmp_sizes; k++) {
            h_alpha[(tmp_data[k] + 6 * i_0) - 1] = h_alpha_high[(6 * i_0 + tmp_data_0[k]) - 1];
        }
    }
    /*  If (s<0), hold all desired angles constant */
    /* 'ATRIAS3D_ZD_Output02:64' h_alpha_low = h_alpha(:,1)*[1 1 1 1 1 1]; */
    /* 'ATRIAS3D_ZD_Output02:65' h_alpha(s6<0,:) = h_alpha_low(s6<0,:); */
    for (i_0 = 0; i_0 < 6; i_0++) {
        b_s[i_0] = (*s < 0.0);
        b_s_0[i_0] = (*s < 0.0);
    }
    %<(SLibCGCallSubFcn("Walking01_withE_eml_li_find_enu", ["b_s", "tmp_data", "&tmp_sizes"], 9, 17, 6))>;
    %<(SLibCGCallSubFcn("Walking01_withE_eml_li_find_enu", ["b_s_0", "tmp_data_0", "&tmp_sizes"], 9, 17, 7))>;
    for (i_0 = 0; i_0 < 6; i_0++) {
        for (k = 0; k < 6; k++) {
            h_alpha_high[i_0 + 6 * k] = h_alpha[i_0];
        }
    }
    for (i_0 = 0; i_0 < 6; i_0++) {
        for (k = 0; k < tmp_sizes; k++) {
            h_alpha_data[k + tmp_sizes * i_0] = h_alpha_high[(6 * i_0 + tmp_data_0[k]) - 1];
        }
    }
    for (i_0 = 0; i_0 < 6; i_0++) {
        for (k = 0; k < tmp_sizes; k++) {
            h_alpha[(tmp_data[k] + 6 * i_0) - 1] = h_alpha_data[tmp_sizes * i_0 + k];
        }
    }
} else {
    if (Output_SaturateS == 3.0) {
        /* 'ATRIAS3D_ZD_Output02:67' elseif Output.SaturateS==3 */
        /* 'ATRIAS3D_ZD_Output02:68' delta = 0.02; */
        /* 'ATRIAS3D_ZD_Output02:69' ds(s>1+delta) = 0; */
        e = *ds;
        k = 0;
        if (*s > 1.02) {
            k = 1;
        }
        for (i_0 = 0; i_0 < k; i_0++) {
            e = 0.0;
        }
        /* 'ATRIAS3D_ZD_Output02:70' s(s>1+delta)  = 1+delta; */
        b = *s;
        k = 0;
        if (*s > 1.02) {
            k = 1;
        }
        for (i_0 = 0; i_0 < k; i_0++) {
            b = 1.02;
        }
        /* 'ATRIAS3D_ZD_Output02:71' ds(s<-delta)  = 0; */
        g = e;
        k = 0;
        if (b < -0.02) {
            k = 1;
        }
        for (i_0 = 0; i_0 < k; i_0++) {
            g = 0.0;
        }
        *ds = g;
        /* 'ATRIAS3D_ZD_Output02:72' s(s<-delta)   = -delta; */
        d = b;
        k = 0;
        if (b < -0.02) {
            k = 1;
        }
        for (i_0 = 0; i_0 < k; i_0++) {
            d = -0.02;
        }
        *s = d;
    }
}
/*     %<"\%\% Compute terms in controller"> */
/* 'ATRIAS3D_ZD_Output02:76' hd_min = [150; 150;  15;  15; -20; -20]*pi/180; */
/* 'ATRIAS3D_ZD_Output02:77' hd_max = [220; 220; 120; 120;  20;  20]*pi/180; */
/*  FOR MIRROR-LAW INSPIRED OUTPUTS! */
/* hd_min = [110; 306;  24;  -2;  -5;  -4]*pi/180; */
/* hd_max = [155; 415;  42;  41;   0;   7]*pi/180; */
/* 'ATRIAS3D_ZD_Output02:83' h0 = jacob_h0*q; */
for (i_0 = 0; i_0 < 6; i_0++) {
    h0[i_0] = 0.0;
    for (k = 0; k < 13; k++) {
        h0[i_0] += jacob_h0[6 * k + i_0] * q[k];
    }
}
/* 'ATRIAS3D_ZD_Output02:84' hd = bezierv(h_alpha, s); */
/* 'ATRIAS3D_ZD_Output02:86' sat_correction = (jacob_h0 - T1)*q; */
for (i_0 = 0; i_0 < 7; i_0++) {
    for (k = 0; k < 6; k++) {
        tmp_0[k + 6 * i_0] = 0.0;
    }
}
for (i_0 = 0; i_0 < 6; i_0++) {
    for (k = 0; k < 6; k++) {
        tmp_0[k + 6 * (i_0 + 7)] = T0[6 * i_0 + k];
    }
}
for (i_0 = 0; i_0 < 13; i_0++) {
    for (k = 0; k < 6; k++) {
        jacob_h0_0[k + 6 * i_0] = jacob_h0[6 * i_0 + k] - tmp_0[6 * i_0 + k];
    }
}
/* 'ATRIAS3D_ZD_Output02:87' hd = sat(hd, hd_min + sat_correction, hd_max + sat_correction); */
/* 'ATRIAS3D_ZD_Output02:88' y  = h0-hd; */
%if SLibCG_FcnCallArgAccessed(9,17,2,1)
%<SLibCG_AccessArg(9 ,17, 14)>
%endif

%<(SLibCGCallSubFcn("Walking01_withElmos_bezierv_a", ["h_alpha", "*s", "tmp"], 9, 17, 2))>;
for (i_0 = 0; i_0 < 6; i_0++) {
    sat_correction[i_0] = 0.0;
    for (k = 0; k < 13; k++) {
        sat_correction[i_0] += jacob_h0_0[6 * k + i_0] * q[k];
    }
    hd_min_0[i_0] = hd_min[i_0] + sat_correction[i_0];
    hd_max_0[i_0] = hd_max[i_0] + sat_correction[i_0];
}
%<(SLibCGCallSubFcn("Walking01_withElmos_sat_iu", ["tmp", "hd_min_0", "hd_max_0", "sat_correction"], 9, 17, 3))>;
for (i_0 = 0; i_0 < 6; i_0++) {
    y[i_0] = h0[i_0] - sat_correction[i_0];
}
/* 'ATRIAS3D_ZD_Output02:89' dy = jacob_h0*dq-beziervd(h_alpha,s).*ds; */
/* 'ATRIAS3D_ZD_Output02:90' d  = bezierva(h_alpha, s).*(ds.*ds); */
/* 'ATRIAS3D_ZD_Output02:91' if (length(s)>1) */
/* 'ATRIAS3D_ZD_Output02:93' else */
/* 'ATRIAS3D_ZD_Output02:94' jacob_h = jacob_h0 - beziervd(h_alpha, s)*dsdq; */
/*  Correction */
/* 'ATRIAS3D_ZD_Output02:98' h_alpha_corr = Output.HAlphaCorrection; */
/* 'ATRIAS3D_ZD_Output02:99' s_corr_max = Output.SMaxCorrection; */
/* 'ATRIAS3D_ZD_Output02:100' if Output.UseCorrection && any(s <= s_corr_max) */
if ((Output_UseCorrection != 0.0) && (!((*s <= Output_SMaxCorrection) == 0))) {
    /* 'ATRIAS3D_ZD_Output02:101' y       = y       -  polyv( h_alpha_corr, s, s_corr_max); */
%if SLibCG_FcnCallArgAccessed(9,17,1,0)
%<SLibCG_AccessArg(9 ,17, 13)>
%endif
%if SLibCG_FcnCallArgAccessed(9,17,1,1)
%<SLibCG_AccessArg(9 ,17, 14)>
%endif
%if SLibCG_FcnCallArgAccessed(9,17,1,2)
%<SLibCG_AccessArg(9 ,17, 12)>
%endif

    %<(SLibCGCallSubFcn("Walking01_withElmos_polyv_d", ["Output_HAlphaCorrection", "*s", "Output_SMaxCorrection", "tmp"], 9, 17, 1))>;
    for (i_0 = 0; i_0 < 6; i_0++) {
        y[i_0] -= tmp[i_0];
    }
    /* 'ATRIAS3D_ZD_Output02:102' dy      = dy      -  polyvd(h_alpha_corr, s, s_corr_max).*ds; */
    /* 'ATRIAS3D_ZD_Output02:103' d       = d       +  polyva(h_alpha_corr, s, s_corr_max).*(ds.*ds); */
    /* 'ATRIAS3D_ZD_Output02:104' if (length(s)>1) */
    /* 'ATRIAS3D_ZD_Output02:106' else */
    /* 'ATRIAS3D_ZD_Output02:107' jacob_h = jacob_h - polyvd(h_alpha_corr, s, s_corr_max)*dsdq; */
}
/* 'ATRIAS3D_ZD_Output02:110' jacob_jacobh0dq = zeros(6,13); */
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking0_ATRIAS3D_ZD_Output02_j(\
%assign comma = ""
%<comma>real_T t\
%assign comma = ", "
%<comma>const real_T q[13]\
%assign comma = ", "
%<comma>const real_T dq[13]\
%assign comma = ", "
%<comma>real_T ControlState_StanceLeg\
%assign comma = ", "
%<comma>const real_T Output_H0[78]\
%assign comma = ", "
%<comma>const real_T Output_HAlpha[36]\
%assign comma = ", "
%<comma>const real_T Output_ThetaLimits[2]\
%assign comma = ", "
%<comma>real_T Output_Theta_c0\
%assign comma = ", "
%<comma>real_T Output_Theta_ct\
%assign comma = ", "
%<comma>const real_T Output_Theta_cq[13]\
%assign comma = ", "
%<comma>real_T Output_SaturateS\
%assign comma = ", "
%<comma>real_T Output_UseCorrection\
%assign comma = ", "
%<comma>real_T Output_SMaxCorrection\
%assign comma = ", "
%<comma>const real_T Output_HAlphaCorrection[30]\
%assign comma = ", "
%<comma>real_T *s\
%assign comma = ", "
%<comma>real_T *ds\
%assign comma = ", "
%<comma>real_T h0[6]\
%assign comma = ", "
%<comma>real_T y[6]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 17, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_beziervd_k_Fcn18(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T x[5];
real_T y[5];
int32_T j;
static const int8_T b[5] = { 5, 20, 30, 20, 5 };
int32_T i;
/* 'beziervd:2' [n, m] = size(afra); */
/* 'beziervd:3' ns = size(s,1); */
/* 'beziervd:4' value=zeros(n,1); */
for (i = 0; i < 6; i++) {
    value[i] = 0.0;
}
/* 'beziervd:5' M = m-1; */
/* 'beziervd:6' if M==3 */
/* 'beziervd:10' elseif M==5 */
/* 'beziervd:11' k=[5 20 30 20 5]; */
/* %<"\%"> */
/* 'beziervd:24' x = ones(ns, M); */
/* 'beziervd:25' y = ones(ns, M); */
for (i = 0; i < 5; i++) {
    x[i] = 1.0;
    y[i] = 1.0;
}
/* 'beziervd:26' for i=1:M-1 */
/* 'beziervd:27' x(:,i+1)=s.*x(:,i); */
x[1] = s;
/* 'beziervd:28' y(:,i+1)=(1-s).*y(:,i); */
y[1] = 1.0 - s;
/* 'beziervd:27' x(:,i+1)=s.*x(:,i); */
x[2] = s * s;
/* 'beziervd:28' y(:,i+1)=(1-s).*y(:,i); */
y[2] = (1.0 - s) * (1.0 - s);
/* 'beziervd:27' x(:,i+1)=s.*x(:,i); */
x[3] = s * x[2];
/* 'beziervd:28' y(:,i+1)=(1-s).*y(:,i); */
y[3] = (1.0 - s) * y[2];
/* 'beziervd:27' x(:,i+1)=s.*x(:,i); */
x[4] = s * x[3];
/* 'beziervd:28' y(:,i+1)=(1-s).*y(:,i); */
y[4] = (1.0 - s) * y[3];
/* 'beziervd:30' idx = 1; */
/* 'beziervd:31' for i=1:n */
for (i = 0; i < 6; i++) {
    /* 'beziervd:32' value(i) = 0; */
    value[i] = 0.0;
    /* 'beziervd:33' for j=1:M */
    for (j = 0; j < 5; j++) {
        /* 'beziervd:34' value(i) = value(i) + (afra(i,j+1)-afra(i,j))*k(j)*x(idx,j)*y(idx,M+1-j); */
        value[i] += (afra[(1 + j) * 6 + i] - afra[6 * j + i]) * (real_T)b[j] * x[j] * y[4 - j];
    }
    /* 'beziervd:36' idx = idx+(ns==n); */
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withElmos_beziervd_k(\
%assign comma = ""
%<comma>const real_T afra[36]\
%assign comma = ", "
%<comma>real_T s\
%assign comma = ", "
%<comma>real_T value[6]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 18, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_bezier_f_Fcn19(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T value;
real_T x[20];
real_T y[20];
int32_T i;
static const int32_T b[20] = { 1, 19, 171, 969, 3876, 11628, 27132, 50388, 75582, 92378, 92378, 75582, 50388, 27132, 11628, 3876, 969, 171, 19, 1 };
/* 'bezier:2' [n, m] = size(afra); */
/* 'bezier:3' value=zeros(n,1); */
/* 'bezier:4' M = m-1; */
/* 'bezier:5' if M==3 */
/* 'bezier:23' else */
/* 'bezier:24' k = binom(M); */
/* %<"\%    "> */
/* 'bezier:27' x = ones(1, M+1); */
/* 'bezier:28' y = ones(1, M+1); */
for (i = 0; i < 20; i++) {
    x[i] = 1.0;
    y[i] = 1.0;
}
/* 'bezier:29' for i=1:M */
for (i = 0; i < 19; i++) {
    /* 'bezier:30' x(i+1)=s*x(i); */
    x[1 + i] = s * x[i];
    /* 'bezier:31' y(i+1)=(1-s)*y(i); */
    y[1 + i] = (1.0 - s) * y[i];
}
/* 'bezier:33' for i=1:n */
/* 'bezier:34' value(i) = 0; */
value = 0.0;
/* 'bezier:35' for j=1:M+1 */
for (i = 0; i < 20; i++) {
    /* 'bezier:36' value(i) = value(i) + afra(i, j)*k(j)*x(j)*y(M+2-j); */
    value += afra[i] * (real_T)b[i] * x[i] * y[19 - i];
}
return value;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static real_T Walking01_withElmos_bezier_f(\
%assign comma = ""
%<comma>const real_T afra[20]\
%assign comma = ", "
%<comma>real_T s\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 19, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_polyvd_l_Fcn20(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T tmp;
int32_T s_0;
int32_T i;
/* 'polyvd:2' if nargin<3 */
/* 'polyvd:5' a1=poly_cor(:,2); */
/* 'polyvd:6' a2=poly_cor(:,3); */
/* 'polyvd:7' a3=poly_cor(:,4); */
/* 'polyvd:8' a4=poly_cor(:,5); */
/* 'polyvd:9' value=a1+s.*(2*a2+s.*(3*a3+4*s.*a4)); */
/* 'polyvd:10' value=value.*(s<=s_corr_max); */
tmp = 4.0 * s;
s_0 = (s <= s_corr_max);
for (i = 0; i < 6; i++) {
    value[i] = (((poly_cor[18 + i] * 3.0 + poly_cor[24 + i] * tmp) * s + poly_cor[12 + i] * 2.0) * s + poly_cor[6 + i]) * (real_T)s_0;
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withElmos_polyvd_l(\
%assign comma = ""
%<comma>const real_T poly_cor[30]\
%assign comma = ", "
%<comma>real_T s\
%assign comma = ", "
%<comma>real_T s_corr_max\
%assign comma = ", "
%<comma>real_T value[6]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 20, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_sat_i_Fcn21(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T k;
real_T minval;
/* 'ATRIAS3D_ZD_Output03:168' y = max(lo, min(x, hi)); */
for (k = 0; k < 6; k++) {
    if ((x[k] <= hi[k]) || rtIsNaN(hi[k])) {
        minval = x[k];
    } else {
        minval = hi[k];
    }
    if ((lo[k] >= minval) || rtIsNaN(minval)) {
        y[k] = lo[k];
    } else {
        y[k] = minval;
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withElmos_sat_i(\
%assign comma = ""
%<comma>const real_T x[6]\
%assign comma = ", "
%<comma>const real_T lo[6]\
%assign comma = ", "
%<comma>const real_T hi[6]\
%assign comma = ", "
%<comma>real_T y[6]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 21, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_any_d_Fcn22(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
return !(x == 0);
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static boolean_T Walking01_withElmos_any_d(\
%assign comma = ""
%<comma>boolean_T x\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 22, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking0_ATRIAS3D_ZD_Output03_c_Fcn23(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T T0[36];
real_T c[15];
real_T h_alpha[36];
real_T h_alpha_high[36];
real_T qmod[13];
real_T jacob_hd[6];
real_T dhd[6];
boolean_T RSaturated;
real_T jacob_hdbar[6];
boolean_T idxsat[6];
real_T dsdq[13];
real_T delta_theta;
real_T r;
real_T hdbar[6];
real_T b;
real_T d;
real_T e;
real_T g;
static const real_T hd_min[6] = { 2.6179938779914944, 2.6179938779914944, 0.26179938779914941, 0.26179938779914941, -0.3490658503988659, -0.3490658503988659 };
static const real_T hd_max[6] = { 3.839724354387525, 3.839724354387525, 2.0943951023931953, 2.0943951023931953, 0.3490658503988659, 0.3490658503988659 };
static const real_T b_T0[36] = { 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };
static const real_T h[36] = { 0.0, 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 };
static const int8_T i[13] = { 0, 1, 2, 5, 6, 3, 4, 10, 11, 12, 7, 8, 9 };
static const real_T b_b[6] = { -1.0, -0.8, -0.6, -0.4, -0.2, 0.0 };
int32_T i_0;
real_T tmp[6];
real_T hd_max_0[6];
real_T tmp_0[6];
boolean_T s_0[6];
int32_T i_1;
real_T jacob_h0_0[78];
real_T jacob_hdbar_0[78];
int32_T f_data;
int32_T f_sizes[2];
int32_T tmp_data[6];
int32_T tmp_sizes;
int32_T tmp_data_0[6];
real_T h_alpha_data[36];
%assign _modelSS = ""

/* 'ATRIAS3D_ZD_Output03:4' Output = ControlParams.Output; */
/*  Define matrix to convert between motor and standard actuated coordinates */
/*  [uLAst; uLAsw; uKAst; uKAsw; u3st; u3sw] = T0*[u1R; u2R; u3R; u1L; u2L; u3L] */
/* 'ATRIAS3D_ZD_Output03:8' T0 = [0.5 0.5 0 0 0 0; 0 0 0 0.5 0.5 0; -1 1 0 0 0 0; 0 0 0 -1 1 0; 0 0 1 0 0 0; 0 0 0 0 0 1]; */
memcpy(&T0[0], &b_T0[0], 36U * sizeof(real_T));
/* 'ATRIAS3D_ZD_Output03:9' if (ControlState.StanceLeg==1) */
if (ControlState_StanceLeg == 1.0) {
    /* 'ATRIAS3D_ZD_Output03:10' T0 = T0([2 1 4 3 6 5],:); */
    memcpy(&T0[0], &h[0], 36U * sizeof(real_T));
}
/* 'ATRIAS3D_ZD_Output03:12' T1 = [zeros(6,7) T0]; */
/*     %<"\%\% Compute s and modify Bezier parameters to extend outside 0 <= s <= 1"> */
/* [Sy,Sq] = SymmetryMatrices(); */
/* 'ATRIAS3D_ZD_Output03:16' if (ControlState.StanceLeg==0) */
if (ControlState_StanceLeg == 0.0) {
    /* 'ATRIAS3D_ZD_Output03:17' c = [Output.Theta.c0 Output.Theta.ct Output.Theta.cq]; */
    c[0] = ControlParams_Output->Theta.c0;
    c[1] = ControlParams_Output->Theta.ct;
    for (i_1 = 0; i_1 < 13; i_1++) {
        c[i_1 + 2] = ControlParams_Output->Theta.cq[i_1];
    }
    /* 'ATRIAS3D_ZD_Output03:18' jacob_h0 = Output.H0; */
    for (i_1 = 0; i_1 < 78; i_1++) {
        jacob_h0[i_1] = ControlParams_Output->H0[i_1];
    }
} else {
    /* 'ATRIAS3D_ZD_Output03:19' else */
    /* 'ATRIAS3D_ZD_Output03:20' c = [Output.Theta.c0 Output.Theta.ct Output.Theta.cq(:,[1 2 3 6 7 4 5 11 12 13 8 9 10])]; */
    c[0] = ControlParams_Output->Theta.c0;
    c[1] = ControlParams_Output->Theta.ct;
    for (i_1 = 0; i_1 < 13; i_1++) {
        c[i_1 + 2] = ControlParams_Output->Theta.cq[i[i_1]];
    }
    /* 'ATRIAS3D_ZD_Output03:21' c(:,3:4) = -c(:,3:4); */
    c[2] = -c[2];
    c[3] = -c[3];
    /* 'ATRIAS3D_ZD_Output03:22' jacob_h0 = Output.H0(:,[1 2 3 6 7 4 5 11 12 13 8 9 10]); */
    for (i_1 = 0; i_1 < 13; i_1++) {
        for (i_0 = 0; i_0 < 6; i_0++) {
            jacob_h0[i_0 + 6 * i_1] = ControlParams_Output->H0[6 * i[i_1] + i_0];
        }
    }
    /* 'ATRIAS3D_ZD_Output03:23' jacob_h0(:,1:2) = -jacob_h0(:,1:2); */
    for (i_1 = 0; i_1 < 2; i_1++) {
        for (i_0 = 0; i_0 < 6; i_0++) {
            jacob_h0[i_0 + 6 * i_1] = -ControlParams_Output->H0[6 * i[i_1] + i_0];
        }
    }
}
/* 'ATRIAS3D_ZD_Output03:27' [s,ds,dsdq,theta,dtheta,delta_theta] = ATRIAS3D_ZD_s6(t-Output.Theta.t0, q, dq, Output.ThetaLimits, c); */
%if SLibCG_FcnCallArgAccessed(9,23,6,0)
%<SLibCG_AccessArg(9 ,23, 0)>
%<SLibCG_AccessArg(9 ,23, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(9,23,6,1)
%<SLibCG_AccessArg(9 ,23, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(9,23,6,2)
%<SLibCG_AccessArg(9 ,23, 2)>
%endif
%if SLibCG_FcnCallArgAccessed(9,23,6,3)
%<SLibCG_AccessArg(9 ,23, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(9,23,6,5)
%<SLibCG_AccessArg(9 ,23, 5)>
%endif
%if SLibCG_FcnCallArgAccessed(9,23,6,6)
%<SLibCG_AccessArg(9 ,23, 6)>
%endif
%if SLibCG_FcnCallArgAccessed(9,23,6,8)
%<SLibCG_AccessArg(9 ,23, 13)>
%endif

%<(SLibCGCallSubFcn("Walking01_with_ATRIAS3D_ZD_s6_b", ["t - ControlParams_Output->Theta.t0", "q", "dq", "ControlParams_Output->ThetaLimits", "c", "s", "ds", "dsdq", "theta", "&r", "&delta_theta"], 9, 23, 6))>;
/* 'ATRIAS3D_ZD_Output03:28' s_unsaturated = s; */
*s_unsaturated = *s;
/* 'ATRIAS3D_ZD_Output03:30' if (Output.EnforceIncreasingS) */
if ((ControlParams_Output->EnforceIncreasingS != 0.0) && (!(*s >= -1000.0))) {
    /* 'ATRIAS3D_ZD_Output03:31' s = max(s, sprev); */
    *s = -1000.0;
}
/* 'ATRIAS3D_ZD_Output03:34' h_alpha = Output.HAlpha; */
for (i_1 = 0; i_1 < 36; i_1++) {
    h_alpha[i_1] = ControlParams_Output->HAlpha[i_1];
}
/* 'ATRIAS3D_ZD_Output03:35' if (ControlState.StanceLeg==1) */
/* 'ATRIAS3D_ZD_Output03:39' if Output.SaturateS==1 */
if (ControlParams_Output->SaturateS == 1.0) {
    /* delta = 0.2; */
    /* p = [0.2  -0.4  0.2  0]; %<"\% coefficients of transition poly"> */
    /* [s, ds] = softsaturate(s, ds, delta, p); */
    /*  Modified Feb. 4th, 2014 for interpolative bezier table bounds. */
    /* 'ATRIAS3D_ZD_Output03:44' delta = 0.1; */
    /* 'ATRIAS3D_ZD_Output03:45' ds(s>1+delta) = 0; */
    e = *ds;
%if SLibCG_FcnCallArgAccessed(9,23,20,0)
%<SLibCG_AccessArg(9 ,23, 5)>
%endif

    %<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_en", ["*s > 1.1", "&f_data", "f_sizes"], 9, 23, 20))>;
    i_0 = f_sizes[0] * f_sizes[1];
    for (i_1 = 0; i_1 < i_0; i_1++) {
        e = 0.0;
    }
    /* 'ATRIAS3D_ZD_Output03:46' s(s>1+delta) = 1+delta; */
    b = *s;
%if SLibCG_FcnCallArgAccessed(9,23,21,0)
%<SLibCG_AccessArg(9 ,23, 5)>
%endif

    %<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_en", ["*s > 1.1", "&f_data", "f_sizes"], 9, 23, 21))>;
    i_0 = f_sizes[0] * f_sizes[1];
    for (i_1 = 0; i_1 < i_0; i_1++) {
        b = 1.1;
    }
    /* 'ATRIAS3D_ZD_Output03:47' ds(s<-delta) = 0; */
    g = e;
    %<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_en", ["b < -0.1", "&f_data", "f_sizes"], 9, 23, 22))>;
    i_0 = f_sizes[0] * f_sizes[1];
    for (i_1 = 0; i_1 < i_0; i_1++) {
        g = 0.0;
    }
    *ds = g;
    /* 'ATRIAS3D_ZD_Output03:48' s(s<-delta) = -delta; */
    d = b;
    %<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_en", ["b < -0.1", "&f_data", "f_sizes"], 9, 23, 23))>;
    i_0 = f_sizes[0] * f_sizes[1];
    for (i_1 = 0; i_1 < i_0; i_1++) {
        d = -0.1;
    }
    *s = d;
} else if (ControlParams_Output->SaturateS == 2.0) {
    /* 'ATRIAS3D_ZD_Output03:50' elseif Output.SaturateS==2 */
    /* 'ATRIAS3D_ZD_Output03:51' if (length(s)>1) */
    /* 'ATRIAS3D_ZD_Output03:54' else */
    /* 'ATRIAS3D_ZD_Output03:55' dqyTds = repmat((c(1,5)*delta_theta), 2, 1); */
    r = c[4] * delta_theta;
    /* 'ATRIAS3D_ZD_Output03:56' s6 = repmat(s, 6, 1); */
    /*  If (s>1), hold the desired knee angles constant and keep the */
    /*  torso angle fixed by decreasing the desired leg angles */
    /* 'ATRIAS3D_ZD_Output03:61' h_alpha_high = h_alpha(:,end)*[1 1 1 1 1 1]; */
    for (i_1 = 0; i_1 < 6; i_1++) {
        for (i_0 = 0; i_0 < 6; i_0++) {
            h_alpha_high[i_1 + 6 * i_0] = ControlParams_Output->HAlpha[30 + i_1];
        }
    }
    /* 'ATRIAS3D_ZD_Output03:62' h_alpha_high(1:2,:) = h_alpha_high(1:2,:)+dqyTds*(-1:0.2:0); */
    for (i_1 = 0; i_1 < 2; i_1++) {
        for (i_0 = 0; i_0 < 6; i_0++) {
            h_alpha_high[i_1 + 6 * i_0] += r * b_b[i_0];
        }
    }
    /* 'ATRIAS3D_ZD_Output03:63' h_alpha_high(1:2) = max(150*pi/180, h_alpha_high(1:2)); */
    r = h_alpha_high[1];
    if ((2.6179938779914944 >= h_alpha_high[0]) || rtIsNaN(h_alpha_high[0])) {
        h_alpha_high[0] = 2.6179938779914944;
    }
    if ((2.6179938779914944 >= r) || rtIsNaN(r)) {
        h_alpha_high[1] = 2.6179938779914944;
    } else {
        h_alpha_high[1] = r;
    }
    /* 'ATRIAS3D_ZD_Output03:64' h_alpha(s6>1,:) = h_alpha_high(s6>1,:); */
    for (i_1 = 0; i_1 < 6; i_1++) {
        idxsat[i_1] = (*s > 1.0);
        s_0[i_1] = (*s > 1.0);
    }
    %<(SLibCGCallSubFcn("Walking01_withE_eml_li_find_enu", ["idxsat", "tmp_data", "&tmp_sizes"], 9, 23, 16))>;
    %<(SLibCGCallSubFcn("Walking01_withE_eml_li_find_enu", ["s_0", "tmp_data_0", "&tmp_sizes"], 9, 23, 17))>;
    for (i_1 = 0; i_1 < 6; i_1++) {
        for (i_0 = 0; i_0 < tmp_sizes; i_0++) {
            h_alpha[(tmp_data[i_0] + 6 * i_1) - 1] = h_alpha_high[(6 * i_1 + tmp_data_0[i_0]) - 1];
        }
    }
    /*  If (s<0), hold all desired angles constant */
    /* 'ATRIAS3D_ZD_Output03:67' h_alpha_low = h_alpha(:,1)*[1 1 1 1 1 1]; */
    /* 'ATRIAS3D_ZD_Output03:68' h_alpha(s6<0,:) = h_alpha_low(s6<0,:); */
    for (i_1 = 0; i_1 < 6; i_1++) {
        idxsat[i_1] = (*s < 0.0);
        s_0[i_1] = (*s < 0.0);
    }
    %<(SLibCGCallSubFcn("Walking01_withE_eml_li_find_enu", ["idxsat", "tmp_data", "&tmp_sizes"], 9, 23, 18))>;
    %<(SLibCGCallSubFcn("Walking01_withE_eml_li_find_enu", ["s_0", "tmp_data_0", "&tmp_sizes"], 9, 23, 19))>;
    for (i_1 = 0; i_1 < 6; i_1++) {
        for (i_0 = 0; i_0 < 6; i_0++) {
            h_alpha_high[i_1 + 6 * i_0] = h_alpha[i_1];
        }
    }
    for (i_1 = 0; i_1 < 6; i_1++) {
        for (i_0 = 0; i_0 < tmp_sizes; i_0++) {
            h_alpha_data[i_0 + tmp_sizes * i_1] = h_alpha_high[(6 * i_1 + tmp_data_0[i_0]) - 1];
        }
    }
    for (i_1 = 0; i_1 < 6; i_1++) {
        for (i_0 = 0; i_0 < tmp_sizes; i_0++) {
            h_alpha[(tmp_data[i_0] + 6 * i_1) - 1] = h_alpha_data[tmp_sizes * i_1 + i_0];
        }
    }
} else {
    if (ControlParams_Output->SaturateS == 3.0) {
        /* 'ATRIAS3D_ZD_Output03:70' elseif Output.SaturateS==3 */
        /* 'ATRIAS3D_ZD_Output03:71' smin = Output.SLimits(1); */
        /* 'ATRIAS3D_ZD_Output03:72' smax = Output.SLimits(2); */
        /* 'ATRIAS3D_ZD_Output03:73' ds(s>smax) = 0; */
        e = *ds;
%if SLibCG_FcnCallArgAccessed(9,23,12,0)
%<SLibCG_AccessArg(9 ,23, 5)>
%<SLibCG_AccessArg(9 ,23, 4)>
%endif

        %<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_en", ["*s > ControlParams_Output->SLimits[1]", "&f_data", "f_sizes"], 9, 23, 12))>;
        i_0 = f_sizes[0] * f_sizes[1];
        for (i_1 = 0; i_1 < i_0; i_1++) {
            e = 0.0;
        }
        /* 'ATRIAS3D_ZD_Output03:74' s(s>smax)  = smax; */
        b = *s;
%if SLibCG_FcnCallArgAccessed(9,23,13,0)
%<SLibCG_AccessArg(9 ,23, 5)>
%<SLibCG_AccessArg(9 ,23, 4)>
%endif

        %<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_en", ["*s > ControlParams_Output->SLimits[1]", "&f_data", "f_sizes"], 9, 23, 13))>;
        i_0 = f_sizes[0] * f_sizes[1];
        for (i_1 = 0; i_1 < i_0; i_1++) {
            b = ControlParams_Output->SLimits[1];
        }
        /* 'ATRIAS3D_ZD_Output03:75' ds(s<smin) = 0; */
        g = e;
%if SLibCG_FcnCallArgAccessed(9,23,14,0)
%<SLibCG_AccessArg(9 ,23, 4)>
%endif

        %<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_en", ["b < ControlParams_Output->SLimits[0]", "&f_data", "f_sizes"], 9, 23, 14))>;
        i_0 = f_sizes[0] * f_sizes[1];
        for (i_1 = 0; i_1 < i_0; i_1++) {
            g = 0.0;
        }
        *ds = g;
        /* 'ATRIAS3D_ZD_Output03:76' s(s<smin)  = smin; */
        d = b;
%if SLibCG_FcnCallArgAccessed(9,23,15,0)
%<SLibCG_AccessArg(9 ,23, 4)>
%endif

        %<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_en", ["b < ControlParams_Output->SLimits[0]", "&f_data", "f_sizes"], 9, 23, 15))>;
        i_0 = f_sizes[0] * f_sizes[1];
        for (i_1 = 0; i_1 < i_0; i_1++) {
            d = ControlParams_Output->SLimits[0];
        }
        *s = d;
    }
}
/*     %<"\%\% Compute terms in controller"> */
/* 'ATRIAS3D_ZD_Output03:80' qmod = q; */
memcpy(&qmod[0], &q[0], 13U * sizeof(real_T));
/* 'ATRIAS3D_ZD_Output03:81' qmod(1) = sat(qmod(1), -Output.YawLimit, Output.YawLimit); */
/* 'ATRIAS3D_ZD_Output03:168' y = max(lo, min(x, hi)); */
if ((q[0] <= ControlParams_Output->YawLimit) || rtIsNaN(ControlParams_Output->YawLimit)) {
    r = q[0];
} else {
    r = ControlParams_Output->YawLimit;
}
if ((-ControlParams_Output->YawLimit >= r) || rtIsNaN(r)) {
    qmod[0] = -ControlParams_Output->YawLimit;
} else {
    qmod[0] = r;
}
/* 'ATRIAS3D_ZD_Output03:82' h0 = jacob_h0*qmod; */
/* 'ATRIAS3D_ZD_Output03:83' hd = bezierv(h_alpha, s); */
/* 'ATRIAS3D_ZD_Output03:84' jacob_hd  = beziervd(h_alpha,s); */
%if SLibCG_FcnCallArgAccessed(9,23,1,1)
%<SLibCG_AccessArg(9 ,23, 5)>
%endif

%<(SLibCGCallSubFcn("Walking01_withElmos_beziervd_k", ["h_alpha", "*s", "jacob_hd"], 9, 23, 1))>;
/* 'ATRIAS3D_ZD_Output03:85' jacob2_hd = bezierva(h_alpha,s); */
/* 'ATRIAS3D_ZD_Output03:86' dhd = jacob_hd.*ds; */
for (i_1 = 0; i_1 < 6; i_1++) {
    h0[i_1] = 0.0;
    for (i_0 = 0; i_0 < 13; i_0++) {
        h0[i_1] += jacob_h0[6 * i_0 + i_1] * qmod[i_0];
    }
    dhd[i_1] = jacob_hd[i_1] * *ds;
}
/* 'ATRIAS3D_ZD_Output03:88' jacob_h = jacob_h0 - jacob_hd*dsdq; */
/* 'ATRIAS3D_ZD_Output03:89' jacob_jacobhdqdq = -jacob2_hd.*(ds.*ds); */
/*     %<"\%\% Stabilizing output term"> */
/*  Allow outputs of the form */
/*    y = H0*q - hd(s(theta(q)), h_alpha) - hStabilizing(phi - phid(s(theta(q))), StabilizingHAlpha) */
/* 'ATRIAS3D_ZD_Output03:95' phi    = Output.Phi.cq * q; */
/* 'ATRIAS3D_ZD_Output03:96' dphi   = Output.Phi.cq * dq; */
/* 'ATRIAS3D_ZD_Output03:98' phid   = bezier(Output.PhiAlpha, s); */
/* 'ATRIAS3D_ZD_Output03:99' jacob_phid = bezierd(Output.PhiAlpha, s); */
/* 'ATRIAS3D_ZD_Output03:100' jacob2_phid = beziera(Output.PhiAlpha, s); */
/* 'ATRIAS3D_ZD_Output03:102' r      = phi - phid; */
r = 0.0;
for (i_1 = 0; i_1 < 13; i_1++) {
    r += ControlParams_Output->Phi.cq[i_1] * q[i_1];
}
%if SLibCG_FcnCallArgAccessed(9,23,2,0)
%<SLibCG_AccessArg(9 ,23, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(9,23,2,1)
%<SLibCG_AccessArg(9 ,23, 5)>
%endif

r -= %<(SLibCGCallSubFcn("Walking01_withElmos_bezier_f", ["ControlParams_Output->PhiAlpha", "*s"], 9, 23, 2))>;
/* 'ATRIAS3D_ZD_Output03:103' dr     = dphi - jacob_phid * ds; */
/* 'ATRIAS3D_ZD_Output03:104' RSaturated = false; */
RSaturated = false;
/* 'ATRIAS3D_ZD_Output03:105' if Output.SaturateR */
if (ControlParams_Output->SaturateR != 0.0) {
    /* 'ATRIAS3D_ZD_Output03:106' if (r > Output.RLimits(2)) */
    if (r > ControlParams_Output->RLimits[1]) {
        /* 'ATRIAS3D_ZD_Output03:107' r = Output.RLimits(2); */
        r = ControlParams_Output->RLimits[1];
        /* 'ATRIAS3D_ZD_Output03:108' dr = 0; */
        /* 'ATRIAS3D_ZD_Output03:109' RSaturated = true; */
        RSaturated = true;
    } else {
        if (r < ControlParams_Output->RLimits[0]) {
            /* 'ATRIAS3D_ZD_Output03:110' elseif (r < Output.RLimits(1)) */
            /* 'ATRIAS3D_ZD_Output03:111' r = Output.RLimits(1); */
            r = ControlParams_Output->RLimits[0];
            /* 'ATRIAS3D_ZD_Output03:112' dr = 0; */
            /* 'ATRIAS3D_ZD_Output03:113' RSaturated = true; */
            RSaturated = true;
        }
    }
}
/* 'ATRIAS3D_ZD_Output03:117' hdbar  = polyv(Output.HBarAlpha, r, inf); */
/* 'ATRIAS3D_ZD_Output03:118' if ~RSaturated */
if (!RSaturated) {
    /* 'ATRIAS3D_ZD_Output03:119' jacob_hdbar = polyvd(Output.HBarAlpha, r, inf); */
%if SLibCG_FcnCallArgAccessed(9,23,3,0)
%<SLibCG_AccessArg(9 ,23, 4)>
%endif

    %<(SLibCGCallSubFcn("Walking01_withElmos_polyvd_l", ["ControlParams_Output->HBarAlpha", "r", "%<LibGetMathConstant(LibRealNonFinite("inf"), FcnGetDataTypeIdFromName("double"))>", "jacob_hdbar"], 9, 23, 3))>;
    /* 'ATRIAS3D_ZD_Output03:120' jacob2_hdbar = polyva(Output.HBarAlpha, r, inf); */
} else {
    /* 'ATRIAS3D_ZD_Output03:121' else */
    /* 'ATRIAS3D_ZD_Output03:122' jacob_hdbar = zeros(6,1); */
    for (i_0 = 0; i_0 < 6; i_0++) {
        jacob_hdbar[i_0] = 0.0;
    }
    /* 'ATRIAS3D_ZD_Output03:123' jacob2_hdbar = zeros(6,1); */
}
/* 'ATRIAS3D_ZD_Output03:126' hdbar = sat(hdbar, Output.HBarLimits(:,1), Output.HBarLimits(:,2)); */
%if SLibCG_FcnCallArgAccessed(9,23,11,0)
%<SLibCG_AccessArg(9 ,23, 4)>
%endif

%<(SLibCGCallSubFcn("Walking01_withElmos_polyv_d", ["ControlParams_Output->HBarAlpha", "r", "%<LibGetMathConstant(LibRealNonFinite("inf"), FcnGetDataTypeIdFromName("double"))>", "tmp_0"], 9, 23, 11))>;
%if SLibCG_FcnCallArgAccessed(9,23,4,1)
%<SLibCG_AccessArg(9 ,23, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(9,23,4,2)
%<SLibCG_AccessArg(9 ,23, 4)>
%endif

%<(SLibCGCallSubFcn("Walking01_withElmos_sat_i", ["tmp_0", "*(real_T (*)[6])&ControlParams_Output->HBarLimits[0]", "*(real_T (*)[6])&ControlParams_Output->HBarLimits[6]", "hdbar"], 9, 23, 4))>;
/* 'ATRIAS3D_ZD_Output03:127' idxsat = (hdbar == Output.HBarLimits(:,1)) | (hdbar == Output.HBarLimits(:,2)); */
/* 'ATRIAS3D_ZD_Output03:128' jacob_hdbar(idxsat,:) = 0; */
for (i_1 = 0; i_1 < 6; i_1++) {
    idxsat[i_1] = ((hdbar[i_1] == ControlParams_Output->HBarLimits[i_1]) || (ControlParams_Output->HBarLimits[6 + i_1] == hdbar[i_1]));
}
%<(SLibCGCallSubFcn("Walking01_withE_eml_li_find_enu", ["idxsat", "tmp_data", "&i_0"], 9, 23, 24))>;
for (i_1 = 0; i_1 < i_0; i_1++) {
    jacob_hdbar[tmp_data[i_1] - 1] = 0.0;
}
/* 'ATRIAS3D_ZD_Output03:129' jacob2_hdbar(idxsat,:) = 0; */
/* 'ATRIAS3D_ZD_Output03:131' hd = hd + hdbar; */
/* 'ATRIAS3D_ZD_Output03:132' jacob_h = jacob_h - jacob_hdbar * (Output.Phi.cq - jacob_phid * dsdq); */
for (i_1 = 0; i_1 < 13; i_1++) {
    qmod[i_1] = ControlParams_Output->Phi.cq[i_1] - 0.0 * dsdq[i_1];
}
for (i_1 = 0; i_1 < 6; i_1++) {
    for (i_0 = 0; i_0 < 13; i_0++) {
        jacob_h0_0[i_1 + 6 * i_0] = jacob_h0[6 * i_0 + i_1] - jacob_hd[i_1] * dsdq[i_0];
    }
}
for (i_1 = 0; i_1 < 6; i_1++) {
    for (i_0 = 0; i_0 < 13; i_0++) {
        jacob_hdbar_0[i_1 + 6 * i_0] = jacob_hdbar[i_1] * qmod[i_0];
    }
}
for (i_1 = 0; i_1 < 13; i_1++) {
    for (i_0 = 0; i_0 < 6; i_0++) {
        jacob_h[i_0 + 6 * i_1] = jacob_h0_0[6 * i_1 + i_0] - jacob_hdbar_0[6 * i_1 + i_0];
    }
}
/* 'ATRIAS3D_ZD_Output03:133' jacob_jacobhdqdq = jacob_jacobhdqdq ... */
/* 'ATRIAS3D_ZD_Output03:134'         + jacob_hdbar * jacob2_phid * ds^2 ... */
/* 'ATRIAS3D_ZD_Output03:135'         + jacob2_hdbar * (-jacob_phid^2 * ds^2 - dphi^2 + jacob_phid * dphi * ds); */
/*     %<"\%\% Saturate the desired leg/knee/hip angles"> */
/* 'ATRIAS3D_ZD_Output03:138' hd_min = [150; 150;  15;  15; -20; -20]*pi/180; */
/* 'ATRIAS3D_ZD_Output03:139' hd_max = [220; 220; 120; 120;  20;  20]*pi/180; */
/* 'ATRIAS3D_ZD_Output03:140' sat_correction = (jacob_h0 - T1)*q; */
for (i_1 = 0; i_1 < 7; i_1++) {
    for (i_0 = 0; i_0 < 6; i_0++) {
        jacob_hdbar_0[i_0 + 6 * i_1] = 0.0;
    }
}
for (i_1 = 0; i_1 < 6; i_1++) {
    for (i_0 = 0; i_0 < 6; i_0++) {
        jacob_hdbar_0[i_0 + 6 * (i_1 + 7)] = T0[6 * i_1 + i_0];
    }
}
for (i_1 = 0; i_1 < 13; i_1++) {
    for (i_0 = 0; i_0 < 6; i_0++) {
        jacob_h0_0[i_0 + 6 * i_1] = jacob_h0[6 * i_1 + i_0] - jacob_hdbar_0[6 * i_1 + i_0];
    }
}
/* 'ATRIAS3D_ZD_Output03:141' hd = sat(hd, hd_min + sat_correction, hd_max + sat_correction); */
%if SLibCG_FcnCallArgAccessed(9,23,10,1)
%<SLibCG_AccessArg(9 ,23, 5)>
%endif

%<(SLibCGCallSubFcn("Walking01_withElmos_bezierv_a", ["h_alpha", "*s", "tmp_0"], 9, 23, 10))>;
for (i_1 = 0; i_1 < 6; i_1++) {
    jacob_hd[i_1] = 0.0;
    for (i_0 = 0; i_0 < 13; i_0++) {
        jacob_hd[i_1] += jacob_h0_0[6 * i_0 + i_1] * q[i_0];
    }
    tmp[i_1] = tmp_0[i_1] + hdbar[i_1];
    jacob_hdbar[i_1] = hd_min[i_1] + jacob_hd[i_1];
    hd_max_0[i_1] = hd_max[i_1] + jacob_hd[i_1];
}
%if SLibCG_FcnCallArgAccessed(9,23,5,3)
%<SLibCG_AccessArg(9 ,23, 8)>
%endif

%<(SLibCGCallSubFcn("Walking01_withElmos_sat_i", ["tmp", "jacob_hdbar", "hd_max_0", "y"], 9, 23, 5))>;
/* 'ATRIAS3D_ZD_Output03:142' idxsat = (hd == hd_min + sat_correction) | (hd == hd_max + sat_correction); */
for (i_0 = 0; i_0 < 6; i_0++) {
    idxsat[i_0] = ((hd_min[i_0] + jacob_hd[i_0] == y[i_0]) || (hd_max[i_0] + jacob_hd[i_0] == y[i_0]));
}
/* 'ATRIAS3D_ZD_Output03:143' dhd(idxsat) = 0; */
%<(SLibCGCallSubFcn("Walking01_withE_eml_li_find_enu", ["idxsat", "tmp_data", "&i_0"], 9, 23, 25))>;
for (i_1 = 0; i_1 < i_0; i_1++) {
    dhd[tmp_data[i_1] - 1] = 0.0;
}
/* 'ATRIAS3D_ZD_Output03:144' jacob_h(idxsat) = jacob_h0(idxsat); */
%<(SLibCGCallSubFcn("Walking01_withE_eml_li_find_enu", ["idxsat", "tmp_data", "&tmp_sizes"], 9, 23, 26))>;
%<(SLibCGCallSubFcn("Walking01_withE_eml_li_find_enu", ["idxsat", "tmp_data_0", "&tmp_sizes"], 9, 23, 27))>;
for (i_1 = 0; i_1 < tmp_sizes; i_1++) {
    jacob_h[tmp_data[i_1] - 1] = jacob_h0[tmp_data_0[i_1] - 1];
}
/*  jacob_hd(idxsat) = 0; */
/*     %<"\%\%"> */
/* 'ATRIAS3D_ZD_Output03:147' y  = h0-hd; */
for (i_1 = 0; i_1 < 6; i_1++) {
    y[i_1] = h0[i_1] - y[i_1];
}
/* 'ATRIAS3D_ZD_Output03:148' dy = jacob_h0*dq - dhd; */
for (i_1 = 0; i_1 < 6; i_1++) {
    r = 0.0;
    for (i_0 = 0; i_0 < 13; i_0++) {
        r += jacob_h0[6 * i_0 + i_1] * dq[i_0];
    }
    dy[i_1] = r - dhd[i_1];
}
/*  Correction */
/* 'ATRIAS3D_ZD_Output03:152' h_alpha_corr = Output.HAlphaCorrection; */
/* 'ATRIAS3D_ZD_Output03:153' s_corr_max = Output.SMaxCorrection; */
/* 'ATRIAS3D_ZD_Output03:154' if Output.UseCorrection && any(s <= s_corr_max) */
%if SLibCG_FcnCallArgAccessed(9,23,0,0)
%<SLibCG_AccessArg(9 ,23, 5)>
%<SLibCG_AccessArg(9 ,23, 4)>
%endif

if ((ControlParams_Output->UseCorrection != 0.0) && %<(SLibCGCallSubFcn("Walking01_withElmos_any_d", ["*s <= ControlParams_Output->SMaxCorrection"], 9, 23, 0))>) {
    /* 'ATRIAS3D_ZD_Output03:155' y       = y       -  polyv( h_alpha_corr, s, s_corr_max); */
%if SLibCG_FcnCallArgAccessed(9,23,9,0)
%<SLibCG_AccessArg(9 ,23, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(9,23,9,1)
%<SLibCG_AccessArg(9 ,23, 5)>
%endif
%if SLibCG_FcnCallArgAccessed(9,23,9,2)
%<SLibCG_AccessArg(9 ,23, 4)>
%endif

    %<(SLibCGCallSubFcn("Walking01_withElmos_polyv_d", ["ControlParams_Output->HAlphaCorrection", "*s", "ControlParams_Output->SMaxCorrection", "tmp_0"], 9, 23, 9))>;
    /* 'ATRIAS3D_ZD_Output03:156' dy      = dy      -  polyvd(h_alpha_corr, s, s_corr_max).*ds; */
%if SLibCG_FcnCallArgAccessed(9,23,8,0)
%<SLibCG_AccessArg(9 ,23, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(9,23,8,1)
%<SLibCG_AccessArg(9 ,23, 5)>
%endif
%if SLibCG_FcnCallArgAccessed(9,23,8,2)
%<SLibCG_AccessArg(9 ,23, 4)>
%endif

    %<(SLibCGCallSubFcn("Walking01_withElmos_polyvd_l", ["ControlParams_Output->HAlphaCorrection", "*s", "ControlParams_Output->SMaxCorrection", "tmp"], 9, 23, 8))>;
    for (i_1 = 0; i_1 < 6; i_1++) {
        y[i_1] -= tmp_0[i_1];
        dy[i_1] -= tmp[i_1] * *ds;
    }
    /* 'ATRIAS3D_ZD_Output03:157' jacob_jacobhdqdq = jacob_jacobhdqdq +  polyva(h_alpha_corr, s, s_corr_max).*(ds.*ds); */
    /* 'ATRIAS3D_ZD_Output03:158' if (length(s)>1) */
    /* 'ATRIAS3D_ZD_Output03:160' else */
    /* 'ATRIAS3D_ZD_Output03:161' jacob_h = jacob_h - polyvd(h_alpha_corr, s, s_corr_max)*dsdq; */
%if SLibCG_FcnCallArgAccessed(9,23,7,0)
%<SLibCG_AccessArg(9 ,23, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(9,23,7,1)
%<SLibCG_AccessArg(9 ,23, 5)>
%endif
%if SLibCG_FcnCallArgAccessed(9,23,7,2)
%<SLibCG_AccessArg(9 ,23, 4)>
%endif

    %<(SLibCGCallSubFcn("Walking01_withElmos_polyvd_l", ["ControlParams_Output->HAlphaCorrection", "*s", "ControlParams_Output->SMaxCorrection", "tmp_0"], 9, 23, 7))>;
    for (i_1 = 0; i_1 < 6; i_1++) {
        for (i_0 = 0; i_0 < 13; i_0++) {
            jacob_h[i_1 + 6 * i_0] -= tmp_0[i_1] * dsdq[i_0];
        }
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking0_ATRIAS3D_ZD_Output03_c(\
%assign comma = ""
%<comma>real_T t\
%assign comma = ", "
%<comma>const real_T q[13]\
%assign comma = ", "
%<comma>const real_T dq[13]\
%assign comma = ", "
%<comma>real_T ControlState_StanceLeg\
%assign comma = ", "
%<comma>const OutputParamsBus *ControlParams_Output\
%assign comma = ", "
%<comma>real_T *s\
%assign comma = ", "
%<comma>real_T *ds\
%assign comma = ", "
%<comma>real_T h0[6]\
%assign comma = ", "
%<comma>real_T y[6]\
%assign comma = ", "
%<comma>real_T dy[6]\
%assign comma = ", "
%<comma>real_T jacob_h0[78]\
%assign comma = ", "
%<comma>real_T jacob_h[78]\
%assign comma = ", "
%<comma>real_T *s_unsaturated\
%assign comma = ", "
%<comma>real_T *theta\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 23, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking_beziertableinterpolate2_Fcn24(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
sHmAB4PxSQg3wmqo1saFKWH_Walki_T stepBezier[6];
real_T spPlusSet[5];
real_T halphaColumnSetTemp[20];
int32_T b_i;
static const char_T msg[98] = { 'E', 'r', 'r', 'o', 'r', '!', ' ', 'C', 'o', 'n', 't', 'r', 'o', 'l', 'P', 'a', 'r', 'a', 'm', 's', '.', 'F', 'e', 'e', 'd', 'b', 'a', 'c', 'k', '.', 'R', 'I', 'O', ' ', '%', 'g', ' ', 'n', 'o', 't', ' ', 'r', 'e', 'c', 'o', 'g', 'n', 'i', 'z', 'e', 'd', ' ', 'a', 's', ' ', 'v', 'a', 'l', 'i', 'd', ' ', 's', 'e', 'l', 'e', 'c', 't', 'i', 'o', 'n', ' ', 'f', 'o', 'r', ' ', 'i', 'n', 't', 'e', 'r', 'p', 'o', 'l', 'a', 't', 'i', 'v', 'e', ' ', 'b', 'e', 'z', 'i', 'e', 'r', '!', '\x0a', '\x00' };
static const char_T msg2[33] = { 'A', 's', 's', 'i', 'g', 'n', 'i', 'n', 'g', ' ', '4', 'c', 'm', 'S', ' ', 'c', 'o', 'n', 't', 'r', 'o', 'l', ' ', 'i', 'n', ' ', 'p', 'l', 'a', 'c', 'e', '\x0a', '\x00' };
real_T x[5];
real_T xtmp;
int32_T low_ip1;
int32_T high_i;
int32_T mid_i;
static const real_T b[24] = { 3.5454950400599, 3.15417848729336, 0.254667358003798, 0.414903362656048, 3.46582412603665, 2.74830688442457, 0.70272514063489, 1.116921494399, 3.39354, 2.87796, 0.596111, 1.04437, 3.37945, 4.02207, 0.482812, 0.855403, 3.23236, 3.74049, 0.391096, 0.696856, 3.09154, 3.56994, 0.550965, 0.487677 };
static const real_T c[24] = { 3.57012901044516, 3.11747975862252, 0.381878616323664, 0.513345597891921, 3.42533172199634, 2.8603731111819, 0.6681269522852, 0.836641218766406, 3.39354, 2.87796, 0.596111, 1.04437, 3.37945, 4.02207, 0.482812, 0.855403, 3.23236, 3.74049, 0.391096, 0.696856, 3.09154, 3.56994, 0.550965, 0.487677 };
static const real_T d[24] = { 3.56994000000004, 3.09154000000035, 0.487676999998248, 0.550964999999577, 3.43187740968973, 2.9140538164357, 0.675564721751326, 0.756845637687275, 3.39354, 2.87796, 0.596111, 1.04437, 3.37945, 4.02207, 0.482812, 0.855403, 3.23236, 3.74049, 0.391096, 0.696856, 3.09154, 3.56994, 0.550965, 0.487677 };
static const real_T e[24] = { 3.56974644932167, 3.07297747728139, 0.570731240644985, 0.569144465667379, 3.44779894067081, 2.91055825087636, 0.688178841141528, 0.752778052509281, 3.39354, 2.87796, 0.596111, 1.04437, 3.37945, 4.02207, 0.482812, 0.855403, 3.23236, 3.74049, 0.391096, 0.696856, 3.09154, 3.56994, 0.550965, 0.487677 };
static const real_T f[24] = { 3.57551259902854, 3.04667193071562, 0.634463432692027, 0.58531247536492, 3.46423541019452, 2.87138223188993, 0.699022833492717, 0.772425342485748, 3.39354, 2.87796, 0.596111, 1.04437, 3.37945, 4.02207, 0.482812, 0.855403, 3.23236, 3.74049, 0.391096, 0.696856, 3.09154, 3.56994, 0.550965, 0.487677 };
static const real_T g[24] = { 3.46035041455478, 3.08124803329452, 0.304356574836397, 0.317889619949311, 3.46022307370201, 2.69439468861378, 0.635686846329621, 1.35681641873216, 3.38125, 2.95019, 0.532315, 0.947235, 3.15038, 3.99772, 0.608682, 0.797885, 3.10332, 3.63566, 0.350348, 0.796106, 3.01329, 3.49056, 0.526534, 0.515658 };
static const real_T h[24] = { 3.48558960603127, 3.03665552105148, 0.413994301094, 0.471714708678728, 3.40902426998661, 2.83498642672937, 0.650645821206378, 0.895163833268652, 3.38125, 2.95019, 0.532315, 0.947235, 3.15038, 3.99772, 0.608682, 0.797885, 3.10332, 3.63566, 0.350348, 0.796106, 3.01329, 3.49056, 0.526534, 0.515658 };
static const real_T l[24] = { 3.49055999999997, 3.01329000000027, 0.515657999998245, 0.526533999999455, 3.40433567035172, 2.90531812733559, 0.672309596090129, 0.741853575881061, 3.38125, 2.95019, 0.532315, 0.947235, 3.15038, 3.99772, 0.608682, 0.797885, 3.10332, 3.63566, 0.350348, 0.796106, 3.01329, 3.49056, 0.526534, 0.515658 };
static const real_T m[24] = { 3.49309376307264, 2.99949560968401, 0.596582661823303, 0.546406257179468, 3.41728718615845, 2.91161558102436, 0.678330695118829, 0.709688203116856, 3.38125, 2.95019, 0.532315, 0.947235, 3.15038, 3.99772, 0.608682, 0.797885, 3.10332, 3.63566, 0.350348, 0.796106, 3.01329, 3.49056, 0.526534, 0.515658 };
static const real_T n[24] = { 3.50148776216125, 2.96935894288884, 0.651044268024143, 0.565477036421621, 3.43754353868782, 2.86740195339426, 0.670429464935497, 0.725971337612633, 3.38125, 2.95019, 0.532315, 0.947235, 3.15038, 3.99772, 0.608682, 0.797885, 3.10332, 3.63566, 0.350348, 0.796106, 3.01329, 3.49056, 0.526534, 0.515658 };
static const real_T o[24] = { 3.57785705069653, 3.26272479765068, 0.229131524549162, 0.287962554931851, 3.37832999558392, 2.47576802652352, 0.712895463164868, 1.34172271688962, 3.63492, 3.79718, 0.284129, 0.746367, 3.22031, 3.77154, 0.661957, 0.834272, 3.17686, 3.6834, 0.387404, 0.765084, 3.08939, 3.56118, 0.560108, 0.489272 };
static const real_T p[24] = { 3.56187906680849, 3.13304426873421, 0.380990655598159, 0.496880714901298, 3.44000310360732, 2.75917426306341, 0.671739960465328, 0.976124079486289, 3.63492, 3.79718, 0.284129, 0.746367, 3.22031, 3.77154, 0.661957, 0.834272, 3.17686, 3.6834, 0.387404, 0.765084, 3.08939, 3.56118, 0.560108, 0.489272 };
static const real_T q[24] = { 3.5611799999999, 3.08939000000021, 0.489271999998361, 0.560107999999545, 3.49301211082539, 2.98050504908016, 0.639998133894733, 0.784441877204877, 3.63492, 3.79718, 0.284129, 0.746367, 3.22031, 3.77154, 0.661957, 0.834272, 3.17686, 3.6834, 0.387404, 0.765084, 3.08939, 3.56118, 0.560108, 0.489272 };
static const real_T s[24] = { 3.57202155464132, 3.10076860527039, 0.56292574708373, 0.566793376146665, 3.54194918513446, 3.15181478258618, 0.603373973702065, 0.687961818026883, 3.63492, 3.79718, 0.284129, 0.746367, 3.22031, 3.77154, 0.661957, 0.834272, 3.17686, 3.6834, 0.387404, 0.765084, 3.08939, 3.56118, 0.560108, 0.489272 };
static const real_T t[24] = { 3.59265421324105, 3.14258626125961, 0.605401288255448, 0.55790407966053, 3.58812915385993, 3.28175954372438, 0.560030488059349, 0.643276999369453, 3.63492, 3.79718, 0.284129, 0.746367, 3.22031, 3.77154, 0.661957, 0.834272, 3.17686, 3.6834, 0.387404, 0.765084, 3.08939, 3.56118, 0.560108, 0.489272 };
static const sHmAB4PxSQg3wmqo1saFKWH_Walki_T u[6] = { { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, 0.0 }, { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, 0.0 }, { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, 0.0 }, { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, 0.0 }, { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, 0.0 }, { { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 }, 0.0 } };
int32_T i;
real_T Vq_idx_0;
real_T Vq_idx_1;
real_T Vq_idx_2;
real_T Vq_idx_3;
/* codegen */
/*  Updated to handle a case statement to choose which controller to use for */
/*  updating bezier parameters. April 3rd, 2014 BAG. */
/*  The idea behind this function is to return a set of bezier parameters  */
/*  (h_alpha), corresponding to sPlus corresponding to a new step after */
/*  impact. The motivation for this function is to have a set of bezier */
/*  parameters corresponding to varying perturbed next step initial */
/*  conditions that can be interpolated via s to generate a new set of bezier */
/*  parameters appropriate for the current initial conditions of the walking */
/*  robot post-impact. Ideally, if ending conditions match on all of the */
/*  bezier parameters used for this function (currently hard coded), then the */
/*  robot should always return to the nominal gait given the absence of more */
/*  disturbances. */
/*  BAG August 29th, 2013. */
/*  January 30th, 2014 BAG. Made changes to make compatible with simulink. */
/*  stepBezier2 = robusthalphafielddefault; */
/* 'beziertableinterpolate2:20' stepBezier = bezierTableCurrent2(controlNum); */
/*  Updated to handle a case statement to choose which controller to use for */
/*  updating bezier parameters. April 3rd, 2014 BAG. */
/* 'bezierTableCurrent2:5' st = struct('halpha',zeros(4,6),'spPlus',0); */
/* 'bezierTableCurrent2:6' stepBezier = repmat(st,6,1); */
for (i = 0; i < 6; i++) {
    stepBezier[i] = u[i];
}
/*  January 30th, 2014. BAG */
/*  Added Bezier tables from Quals II research. */
/*  Messages used if case does not match any pre-defined controller. */
/* 'bezierTableCurrent2:12' msg = ['Error! ControlParams.Feedback.RIO %<"\%g not recognized as valid selection for interpolative bezier!\' char([10 0]) ];"> */
/* 'bezierTableCurrent2:13' msg2 = ['Assigning 4cmS control in place' char([10 0]) ]; */
/* 'bezierTableCurrent2:15' switch controlNum */
switch ((int32_T)controlNum) {
  case 1:
    /* 'bezierTableCurrent2:16' case 1 */
    /*  4cmS */
    /*  4cm control disturbance max */
    /*  2 cm S -> 4 cm S */
    /*  Z0 = [1.33568; 3.39354; 3.37945; 3.23236; 3.09154; 2.87796; 4.02207; 3.74049; 3.56994; 0.596111; 0.482812; 0.391096; 0.550965; 1.04437; 0.855403; 0.696856; 0.487677]; */
    /*  ThetaLimits [1.31436093861886,1.79276093861886;]; */
    /* 'bezierTableCurrent2:24' stepBezier(2).spPlus = [-0.112709212511353;]; */
    stepBezier[1].spPlus = -0.112709212511353;
    /* 'bezierTableCurrent2:25' stepBezier(2).halpha = [3.57551259902854,3.46423541019452,3.39354000000000,3.37945000000000,3.23236000000000,3.09154000000000; */
    /* 'bezierTableCurrent2:26'             3.04667193071562,2.87138223188993,2.87796000000000,4.02207000000000,3.74049000000000,3.56994000000000; */
    /* 'bezierTableCurrent2:27'             0.634463432692027,0.699022833492717,0.596111000000000,0.482812000000000,0.391096000000000,0.550965000000000; */
    /* 'bezierTableCurrent2:28'             0.585312475364920,0.772425342485748,1.04437000000000,0.855403000000000,0.696856000000000,0.487677000000000;]; */
    for (i = 0; i < 24; i++) {
        stepBezier[1].halpha[i] = f[i];
    }
    /* 'bezierTableCurrent2:30' stepBezier(3).spPlus = [-0.0565185420256428;]; */
    stepBezier[2].spPlus = -0.0565185420256428;
    /* 'bezierTableCurrent2:31' stepBezier(3).halpha = [3.56974644932167,3.44779894067081,3.39354000000000,3.37945000000000,3.23236000000000,3.09154000000000; */
    /* 'bezierTableCurrent2:32'             3.07297747728139,2.91055825087636,2.87796000000000,4.02207000000000,3.74049000000000,3.56994000000000; */
    /* 'bezierTableCurrent2:33'             0.570731240644985,0.688178841141528,0.596111000000000,0.482812000000000,0.391096000000000,0.550965000000000; */
    /* 'bezierTableCurrent2:34'             0.569144465667379,0.752778052509281,1.04437000000000,0.855403000000000,0.696856000000000,0.487677000000000;]; */
    for (i = 0; i < 24; i++) {
        stepBezier[2].halpha[i] = e[i];
    }
    /* 'bezierTableCurrent2:36' stepBezier(4).spPlus = 0; */
    stepBezier[3].spPlus = 0.0;
    /* 'bezierTableCurrent2:37' stepBezier(4).halpha = [3.56994000000004,3.43187740968973,3.39354000000000,3.37945000000000,3.23236000000000,3.09154000000000; */
    /* 'bezierTableCurrent2:38'             3.09154000000035,2.91405381643570,2.87796000000000,4.02207000000000,3.74049000000000,3.56994000000000; */
    /* 'bezierTableCurrent2:39'             0.487676999998248,0.675564721751326,0.596111000000000,0.482812000000000,0.391096000000000,0.550965000000000; */
    /* 'bezierTableCurrent2:40'             0.550964999999577,0.756845637687275,1.04437000000000,0.855403000000000,0.696856000000000,0.487677000000000;]; */
    for (i = 0; i < 24; i++) {
        stepBezier[3].halpha[i] = d[i];
    }
    /* 'bezierTableCurrent2:42' stepBezier(5).spPlus = [0.0485070021484834;]; */
    stepBezier[4].spPlus = 0.0485070021484834;
    /* 'bezierTableCurrent2:43' stepBezier(5).halpha = [3.57012901044516,3.42533172199634,3.39354000000000,3.37945000000000,3.23236000000000,3.09154000000000;3.11747975862252,2.86037311118190,2.87796000000000,4.02207000000000,3.74049000000000,3.56994000000000;0.381878616323664,0.668126952285200,0.596111000000000,0.482812000000000,0.391096000000000,0.550965000000000;0.513345597891921,0.836641218766406,1.04437000000000,0.855403000000000,0.696856000000000,0.487677000000000;]; */
    for (i = 0; i < 24; i++) {
        stepBezier[4].halpha[i] = c[i];
    }
    /* 'bezierTableCurrent2:45' stepBezier(6).spPlus = [0.0755116545848371;]; */
    stepBezier[5].spPlus = 0.0755116545848371;
    /* 'bezierTableCurrent2:46' stepBezier(6).halpha = [3.54549504005990,3.46582412603665,3.39354000000000,3.37945000000000,3.23236000000000,3.09154000000000; */
    /* 'bezierTableCurrent2:47'             3.15417848729336,2.74830688442457,2.87796000000000,4.02207000000000,3.74049000000000,3.56994000000000; */
    /* 'bezierTableCurrent2:48'             0.254667358003798,0.702725140634890,0.596111000000000,0.482812000000000,0.391096000000000,0.550965000000000; */
    /* 'bezierTableCurrent2:49'             0.414903362656048,1.11692149439900,1.04437000000000,0.855403000000000,0.696856000000000,0.487677000000000;]; */
    for (i = 0; i < 24; i++) {
        stepBezier[5].halpha[i] = b[i];
    }
    break;
  case 2:
    /* 'bezierTableCurrent2:52' case 2 */
    /*  Periodic */
    /*  4cm control disturbance max */
    /*  Z0 = [1.01681; 3.63492; 3.22031; 3.17686; 3.08939; 3.79718; 3.77154; 3.6834; 3.56118; 0.284129; 0.661957; 0.387404; 0.560108; 0.746367; 0.834272; 0.765084; 0.489272]; */
    /*  ThetaLimits [1.31511790024505,1.78690790024505;]; */
    /* 'bezierTableCurrent2:59' stepBezier(2).spPlus =  -0.109426147959518; */
    stepBezier[1].spPlus = -0.109426147959518;
    /* 'bezierTableCurrent2:60' stepBezier(2).halpha = [3.59265421324105,3.58812915385993,3.63492000000000,3.22031000000000,3.17686000000000,3.08939000000000; */
    /* 'bezierTableCurrent2:61'             3.14258626125961,3.28175954372438,3.79718000000000,3.77154000000000,3.68340000000000,3.56118000000000; */
    /* 'bezierTableCurrent2:62'             0.605401288255448,0.560030488059349,0.284129000000000,0.661957000000000,0.387404000000000,0.560108000000000; */
    /* 'bezierTableCurrent2:63'             0.557904079660530,0.643276999369453,0.746367000000000,0.834272000000000,0.765084000000000,0.489272000000000;]; */
    for (i = 0; i < 24; i++) {
        stepBezier[1].halpha[i] = t[i];
    }
    /* 'bezierTableCurrent2:65' stepBezier(3).spPlus = [-0.0533909140488557;]; */
    stepBezier[2].spPlus = -0.0533909140488557;
    /* 'bezierTableCurrent2:66' stepBezier(3).halpha = [3.57202155464132,3.54194918513446,3.63492000000000,3.22031000000000,3.17686000000000,3.08939000000000; */
    /* 'bezierTableCurrent2:67'             3.10076860527039,3.15181478258618,3.79718000000000,3.77154000000000,3.68340000000000,3.56118000000000; */
    /* 'bezierTableCurrent2:68'             0.562925747083730,0.603373973702065,0.284129000000000,0.661957000000000,0.387404000000000,0.560108000000000; */
    /* 'bezierTableCurrent2:69'             0.566793376146665,0.687961818026883,0.746367000000000,0.834272000000000,0.765084000000000,0.489272000000000;]; */
    for (i = 0; i < 24; i++) {
        stepBezier[2].halpha[i] = s[i];
    }
    /* 'bezierTableCurrent2:71' stepBezier(4).spPlus =  0; */
    stepBezier[3].spPlus = 0.0;
    /* 'bezierTableCurrent2:72' stepBezier(4).halpha = [3.56117999999990,3.49301211082539,3.63492000000000,3.22031000000000,3.17686000000000,3.08939000000000; */
    /* 'bezierTableCurrent2:73'             3.08939000000021,2.98050504908016,3.79718000000000,3.77154000000000,3.68340000000000,3.56118000000000; */
    /* 'bezierTableCurrent2:74'             0.489271999998361,0.639998133894733,0.284129000000000,0.661957000000000,0.387404000000000,0.560108000000000; */
    /* 'bezierTableCurrent2:75'             0.560107999999545,0.784441877204877,0.746367000000000,0.834272000000000,0.765084000000000,0.489272000000000;]; */
    for (i = 0; i < 24; i++) {
        stepBezier[3].halpha[i] = q[i];
    }
    /* 'bezierTableCurrent2:77' stepBezier(5).spPlus =   [0.0484310931123467;]; */
    stepBezier[4].spPlus = 0.0484310931123467;
    /* 'bezierTableCurrent2:78' stepBezier(5).halpha = [3.56187906680849,3.44000310360732,3.63492000000000,3.22031000000000,3.17686000000000,3.08939000000000; */
    /* 'bezierTableCurrent2:79'             3.13304426873421,2.75917426306341,3.79718000000000,3.77154000000000,3.68340000000000,3.56118000000000; */
    /* 'bezierTableCurrent2:80'             0.380990655598159,0.671739960465328,0.284129000000000,0.661957000000000,0.387404000000000,0.560108000000000; */
    /* 'bezierTableCurrent2:81'             0.496880714901298,0.976124079486289,0.746367000000000,0.834272000000000,0.765084000000000,0.489272000000000;]; */
    for (i = 0; i < 24; i++) {
        stepBezier[4].halpha[i] = p[i];
    }
    /* 'bezierTableCurrent2:83' stepBezier(6).spPlus =  [0.0900164728211668;]; */
    stepBezier[5].spPlus = 0.0900164728211668;
    /* 'bezierTableCurrent2:84' stepBezier(6).halpha = [3.57785705069653,3.37832999558392,3.63492000000000,3.22031000000000,3.17686000000000,3.08939000000000; */
    /* 'bezierTableCurrent2:85'             3.26272479765068,2.47576802652352,3.79718000000000,3.77154000000000,3.68340000000000,3.56118000000000; */
    /* 'bezierTableCurrent2:86'             0.229131524549162,0.712895463164868,0.284129000000000,0.661957000000000,0.387404000000000,0.560108000000000; */
    /* 'bezierTableCurrent2:87'             0.287962554931851,1.34172271688962,0.746367000000000,0.834272000000000,0.765084000000000,0.489272000000000;]; */
    for (i = 0; i < 24; i++) {
        stepBezier[5].halpha[i] = o[i];
    }
    break;
  case 3:
    /* 'bezierTableCurrent2:89' case 3 */
    /*  4cmNS */
    /*  4cm control disturbance max */
    /*  Periodic -> 4 cm NS */
    /*  Z0 = [1.0344; 3.38125; 3.15038; 3.10332; 3.01329; 2.95019; 3.99772; 3.63566; 3.49056; 0.532315; 0.608682; 0.350348; 0.526534; 0.947235; 0.797885; 0.796106; 0.515658]; */
    /*  ThetaLimits [1.32918148303917,1.80645148303917;]; */
    /* 'bezierTableCurrent2:97' stepBezier(2).spPlus = [-0.128304460757538;]; */
    stepBezier[1].spPlus = -0.128304460757538;
    /* 'bezierTableCurrent2:98' stepBezier(2).halpha = [3.50148776216125,3.43754353868782,3.38125000000000,3.15038000000000,3.10332000000000,3.01329000000000; */
    /* 'bezierTableCurrent2:99'             2.96935894288884,2.86740195339426,2.95019000000000,3.99772000000000,3.63566000000000,3.49056000000000; */
    /* 'bezierTableCurrent2:100'             0.651044268024143,0.670429464935497,0.532315000000000,0.608682000000000,0.350348000000000,0.526534000000000; */
    /* 'bezierTableCurrent2:101'             0.565477036421621,0.725971337612633,0.947235000000000,0.797885000000000,0.796106000000000,0.515658000000000;]; */
    for (i = 0; i < 24; i++) {
        stepBezier[1].halpha[i] = n[i];
    }
    /* 'bezierTableCurrent2:103' stepBezier(3).spPlus = [-0.0610666951879475;]; */
    stepBezier[2].spPlus = -0.0610666951879475;
    /* 'bezierTableCurrent2:104' stepBezier(3).halpha = [3.49309376307264,3.41728718615845,3.38125000000000,3.15038000000000,3.10332000000000,3.01329000000000; */
    /* 'bezierTableCurrent2:105'             2.99949560968401,2.91161558102436,2.95019000000000,3.99772000000000,3.63566000000000,3.49056000000000; */
    /* 'bezierTableCurrent2:106'             0.596582661823303,0.678330695118829,0.532315000000000,0.608682000000000,0.350348000000000,0.526534000000000; */
    /* 'bezierTableCurrent2:107'             0.546406257179468,0.709688203116856,0.947235000000000,0.797885000000000,0.796106000000000,0.515658000000000;]; */
    for (i = 0; i < 24; i++) {
        stepBezier[2].halpha[i] = m[i];
    }
    /* 'bezierTableCurrent2:109' stepBezier(4).spPlus = 0; */
    stepBezier[3].spPlus = 0.0;
    /* 'bezierTableCurrent2:110' stepBezier(4).halpha = [3.49055999999997,3.40433567035172,3.38125000000000,3.15038000000000,3.10332000000000,3.01329000000000; */
    /* 'bezierTableCurrent2:111'             3.01329000000027,2.90531812733559,2.95019000000000,3.99772000000000,3.63566000000000,3.49056000000000; */
    /* 'bezierTableCurrent2:112'             0.515657999998245,0.672309596090129,0.532315000000000,0.608682000000000,0.350348000000000,0.526534000000000; */
    /* 'bezierTableCurrent2:113'             0.526533999999455,0.741853575881061,0.947235000000000,0.797885000000000,0.796106000000000,0.515658000000000;]; */
    for (i = 0; i < 24; i++) {
        stepBezier[3].halpha[i] = l[i];
    }
    /* 'bezierTableCurrent2:115' stepBezier(5).spPlus = [0.0471342686437857;]; */
    stepBezier[4].spPlus = 0.0471342686437857;
    /* 'bezierTableCurrent2:116' stepBezier(5).halpha = [3.48558960603127,3.40902426998661,3.38125000000000,3.15038000000000,3.10332000000000,3.01329000000000; */
    /* 'bezierTableCurrent2:117'             3.03665552105148,2.83498642672937,2.95019000000000,3.99772000000000,3.63566000000000,3.49056000000000; */
    /* 'bezierTableCurrent2:118'             0.413994301094000,0.650645821206378,0.532315000000000,0.608682000000000,0.350348000000000,0.526534000000000; */
    /* 'bezierTableCurrent2:119'             0.471714708678728,0.895163833268652,0.947235000000000,0.797885000000000,0.796106000000000,0.515658000000000;]; */
    for (i = 0; i < 24; i++) {
        stepBezier[4].halpha[i] = h[i];
    }
    /* 'bezierTableCurrent2:121' stepBezier(6).spPlus = [0.0693694437364348;]; */
    stepBezier[5].spPlus = 0.0693694437364348;
    /* 'bezierTableCurrent2:122' stepBezier(6).halpha = [3.46035041455478,3.46022307370201,3.38125000000000,3.15038000000000,3.10332000000000,3.01329000000000; */
    /* 'bezierTableCurrent2:123'             3.08124803329452,2.69439468861378,2.95019000000000,3.99772000000000,3.63566000000000,3.49056000000000; */
    /* 'bezierTableCurrent2:124'             0.304356574836397,0.635686846329621,0.532315000000000,0.608682000000000,0.350348000000000,0.526534000000000; */
    /* 'bezierTableCurrent2:125'             0.317889619949311,1.35681641873216,0.947235000000000,0.797885000000000,0.796106000000000,0.515658000000000;]; */
    for (i = 0; i < 24; i++) {
        stepBezier[5].halpha[i] = g[i];
    }
    break;
  default:
    /* 'bezierTableCurrent2:127' otherwise */
    /*  fprintf(' Error! ControlParams.Feedback.RIO %<"\%g not recognized as valid selection for interpolative bezier!\\n\', controlNum)"> */
    /* 'bezierTableCurrent2:129' coder.ceval('printf', coder.rref(msg), controlNum); */
    printf(msg, controlNum);
    /*  fprintf(' Assigning 4cmS control in place\n') */
    /* 'bezierTableCurrent2:131' coder.ceval('printf', coder.rref(msg2), controlNum); */
    printf(msg2, controlNum);
    /* 'bezierTableCurrent2:133' stepBezier(2).spPlus = [-0.112709212511353;]; */
    stepBezier[1].spPlus = -0.112709212511353;
    /* 'bezierTableCurrent2:134' stepBezier(2).halpha = [3.57551259902854,3.46423541019452,3.39354000000000,3.37945000000000,3.23236000000000,3.09154000000000; */
    /* 'bezierTableCurrent2:135'             3.04667193071562,2.87138223188993,2.87796000000000,4.02207000000000,3.74049000000000,3.56994000000000; */
    /* 'bezierTableCurrent2:136'             0.634463432692027,0.699022833492717,0.596111000000000,0.482812000000000,0.391096000000000,0.550965000000000; */
    /* 'bezierTableCurrent2:137'             0.585312475364920,0.772425342485748,1.04437000000000,0.855403000000000,0.696856000000000,0.487677000000000;]; */
    for (i = 0; i < 24; i++) {
        stepBezier[1].halpha[i] = f[i];
    }
    /* 'bezierTableCurrent2:139' stepBezier(3).spPlus = [-0.0565185420256428;]; */
    stepBezier[2].spPlus = -0.0565185420256428;
    /* 'bezierTableCurrent2:140' stepBezier(3).halpha = [3.56974644932167,3.44779894067081,3.39354000000000,3.37945000000000,3.23236000000000,3.09154000000000; */
    /* 'bezierTableCurrent2:141'             3.07297747728139,2.91055825087636,2.87796000000000,4.02207000000000,3.74049000000000,3.56994000000000; */
    /* 'bezierTableCurrent2:142'             0.570731240644985,0.688178841141528,0.596111000000000,0.482812000000000,0.391096000000000,0.550965000000000; */
    /* 'bezierTableCurrent2:143'             0.569144465667379,0.752778052509281,1.04437000000000,0.855403000000000,0.696856000000000,0.487677000000000;]; */
    for (i = 0; i < 24; i++) {
        stepBezier[2].halpha[i] = e[i];
    }
    /* 'bezierTableCurrent2:145' stepBezier(4).spPlus = 0; */
    stepBezier[3].spPlus = 0.0;
    /* 'bezierTableCurrent2:146' stepBezier(4).halpha = [3.56994000000004,3.43187740968973,3.39354000000000,3.37945000000000,3.23236000000000,3.09154000000000; */
    /* 'bezierTableCurrent2:147'             3.09154000000035,2.91405381643570,2.87796000000000,4.02207000000000,3.74049000000000,3.56994000000000; */
    /* 'bezierTableCurrent2:148'             0.487676999998248,0.675564721751326,0.596111000000000,0.482812000000000,0.391096000000000,0.550965000000000; */
    /* 'bezierTableCurrent2:149'             0.550964999999577,0.756845637687275,1.04437000000000,0.855403000000000,0.696856000000000,0.487677000000000;]; */
    for (i = 0; i < 24; i++) {
        stepBezier[3].halpha[i] = d[i];
    }
    /* 'bezierTableCurrent2:151' stepBezier(5).spPlus = [0.0485070021484834;]; */
    stepBezier[4].spPlus = 0.0485070021484834;
    /* 'bezierTableCurrent2:152' stepBezier(5).halpha = [3.57012901044516,3.42533172199634,3.39354000000000,3.37945000000000,3.23236000000000,3.09154000000000;3.11747975862252,2.86037311118190,2.87796000000000,4.02207000000000,3.74049000000000,3.56994000000000;0.381878616323664,0.668126952285200,0.596111000000000,0.482812000000000,0.391096000000000,0.550965000000000;0.513345597891921,0.836641218766406,1.04437000000000,0.855403000000000,0.696856000000000,0.487677000000000;]; */
    for (i = 0; i < 24; i++) {
        stepBezier[4].halpha[i] = c[i];
    }
    /* 'bezierTableCurrent2:154' stepBezier(6).spPlus = [0.0755116545848371;]; */
    stepBezier[5].spPlus = 0.0755116545848371;
    /* 'bezierTableCurrent2:155' stepBezier(6).halpha = [3.54549504005990,3.46582412603665,3.39354000000000,3.37945000000000,3.23236000000000,3.09154000000000; */
    /* 'bezierTableCurrent2:156'             3.15417848729336,2.74830688442457,2.87796000000000,4.02207000000000,3.74049000000000,3.56994000000000; */
    /* 'bezierTableCurrent2:157'             0.254667358003798,0.702725140634890,0.596111000000000,0.482812000000000,0.391096000000000,0.550965000000000; */
    /* 'bezierTableCurrent2:158'             0.414903362656048,1.11692149439900,1.04437000000000,0.855403000000000,0.696856000000000,0.487677000000000;]; */
    for (i = 0; i < 24; i++) {
        stepBezier[5].halpha[i] = b[i];
    }
    break;
}
/* 'beziertableinterpolate2:22' n = length(stepBezier); */
/*  Build up set of spPlus values corresponding to individual halphas */
/* 'beziertableinterpolate2:25' spPlusSet = zeros(n-1,1); */
/* 'beziertableinterpolate2:26' for i = 2:n */
for (i = 0; i < 5; i++) {
    /* 'beziertableinterpolate2:27' spPlusSet(i-1) = stepBezier(i).spPlus; */
    spPlusSet[i] = stepBezier[i + 1].spPlus;
}
/*  If spPlusCurrent is outside of min and max of set, use end point */
/* 'beziertableinterpolate2:31' if (spPlusCurrent < stepBezier(2).spPlus) */
if (spPlusCurrent < stepBezier[1].spPlus) {
    /* 'beziertableinterpolate2:32' halphaInterpolated = stepBezier(2).halpha; */
    for (i = 0; i < 24; i++) {
        halphaInterpolated[i] = stepBezier[1].halpha[i];
    }
    /* fprintf('\nerror, spPlusCurrent: %<"\%g is less than minimum of set: \%g, using closest value\\n\\n\', spPlusCurrent, stepBezier2(2).spPlus)"> */
} else {
    /* 'beziertableinterpolate2:35' else */
    /* 'beziertableinterpolate2:35' if (spPlusCurrent > stepBezier(n).spPlus) */
    if (spPlusCurrent > stepBezier[5].spPlus) {
        /* 'beziertableinterpolate2:36' halphaInterpolated = stepBezier(n).halpha; */
        for (i = 0; i < 24; i++) {
            halphaInterpolated[i] = stepBezier[5].halpha[i];
        }
        /* fprintf('\nerror, spPlusCurrent: %<"\%g is more than maximum of set: \%g, using closest value\\n\\n\', spPlusCurrent, stepBezier2(n).spPlus)"> */
    } else {
        /*  Build new interpolated halpha */
        /* 'beziertableinterpolate2:43' halphaInterpolated = zeros(4,6); */
        /* 'beziertableinterpolate2:44' halphaColumnSetTemp = zeros(5,4); */
        /* 'beziertableinterpolate2:45' for i = 1:6 */
        for (b_i = 0; b_i < 6; b_i++) {
            /* 'beziertableinterpolate2:47' for j = 2:n */
            for (i = 0; i < 5; i++) {
                /* 'beziertableinterpolate2:48' halphaColumnSetTemp(j-1,:) = stepBezier(j).halpha(:,i)'; */
                halphaColumnSetTemp[i] = stepBezier[i + 1].halpha[b_i << 2];
                halphaColumnSetTemp[i + 5] = stepBezier[i + 1].halpha[(b_i << 2) + 1];
                halphaColumnSetTemp[i + 10] = stepBezier[i + 1].halpha[(b_i << 2) + 2];
                halphaColumnSetTemp[i + 15] = stepBezier[i + 1].halpha[(b_i << 2) + 3];
            }
            /* 'beziertableinterpolate2:51' halphaInterpolated(:,i) = interp1(spPlusSet,halphaColumnSetTemp,spPlusCurrent)'; */
            for (i = 0; i < 5; i++) {
                x[i] = spPlusSet[i];
            }
            Vq_idx_0 = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
            Vq_idx_1 = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
            Vq_idx_2 = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
            Vq_idx_3 = %<LibGetMathConstant(LibRealNonFinite("nan"), FcnGetDataTypeIdFromName("double"))>;
            if (spPlusSet[1] < spPlusSet[0]) {
                xtmp = x[0];
                x[0] = x[4];
                x[4] = xtmp;
                xtmp = x[1];
                x[1] = x[3];
                x[3] = xtmp;
                for (i = 0; i < 4; i++) {
                    low_ip1 = i * 5;
                    xtmp = halphaColumnSetTemp[low_ip1];
                    halphaColumnSetTemp[low_ip1] = halphaColumnSetTemp[low_ip1 + 4];
                    halphaColumnSetTemp[low_ip1 + 4] = xtmp;
                    xtmp = halphaColumnSetTemp[low_ip1 + 1];
                    halphaColumnSetTemp[low_ip1 + 1] = halphaColumnSetTemp[low_ip1 + 3];
                    halphaColumnSetTemp[low_ip1 + 3] = xtmp;
                }
            }
            if ((!rtIsNaN(spPlusCurrent)) && (!((spPlusCurrent > x[4]) || (spPlusCurrent < x[0])))) {
                i = 1;
                low_ip1 = 2;
                high_i = 5;
                while (high_i > low_ip1) {
                    mid_i = (i + high_i) >> 1;
                    if (spPlusCurrent >= x[mid_i - 1]) {
                        i = mid_i;
                        low_ip1 = mid_i + 1;
                    } else {
                        high_i = mid_i;
                    }
                }
                xtmp = (spPlusCurrent - x[i - 1]) / (x[i] - x[i - 1]);
                if (halphaColumnSetTemp[i - 1] == halphaColumnSetTemp[i]) {
                    Vq_idx_0 = halphaColumnSetTemp[i - 1];
                } else {
                    Vq_idx_0 = (1.0 - xtmp) * halphaColumnSetTemp[i - 1] + xtmp * halphaColumnSetTemp[i];
                }
                if (halphaColumnSetTemp[i + 4] == halphaColumnSetTemp[i + 5]) {
                    Vq_idx_1 = halphaColumnSetTemp[i + 4];
                } else {
                    Vq_idx_1 = (1.0 - xtmp) * halphaColumnSetTemp[i + 4] + halphaColumnSetTemp[i + 5] * xtmp;
                }
                if (halphaColumnSetTemp[i + 9] == halphaColumnSetTemp[i + 10]) {
                    Vq_idx_2 = halphaColumnSetTemp[i + 9];
                } else {
                    Vq_idx_2 = (1.0 - xtmp) * halphaColumnSetTemp[i + 9] + halphaColumnSetTemp[i + 10] * xtmp;
                }
                if (halphaColumnSetTemp[i + 14] == halphaColumnSetTemp[i + 15]) {
                    Vq_idx_3 = halphaColumnSetTemp[i + 14];
                } else {
                    Vq_idx_3 = (1.0 - xtmp) * halphaColumnSetTemp[i + 14] + halphaColumnSetTemp[i + 15] * xtmp;
                }
            }
            halphaInterpolated[b_i << 2] = Vq_idx_0;
            halphaInterpolated[1 + (b_i << 2)] = Vq_idx_1;
            halphaInterpolated[2 + (b_i << 2)] = Vq_idx_2;
            halphaInterpolated[3 + (b_i << 2)] = Vq_idx_3;
        }
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking_beziertableinterpolate2(\
%assign comma = ""
%<comma>real_T spPlusCurrent\
%assign comma = ", "
%<comma>real_T controlNum\
%assign comma = ", "
%<comma>real_T halphaInterpolated[24]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 24, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_updateVelocityControl_Fcn25(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T HipDistCur;
real_T b_q[13];
static const int8_T b[13] = { 0, 1, 2, 5, 6, 3, 4, 10, 11, 12, 7, 8, 9 };
int32_T i;
/* 'updateVelocityControl:4' Discrete = ControlParams.Discrete; */
*Discrete = *ControlParams_Discrete;
/*  Compute velocity estimate */
/* 'updateVelocityControl:7' HipDistCur = computeHipDist(q, 1 - ControlState.StanceLeg); */
memcpy(&b_q[0], &q[0], 13U * sizeof(real_T));
/* 'updateVelocityControl:25' if (StanceLeg==1) */
if (1.0 - ControlState_StanceLeg == 1.0) {
    /* 'updateVelocityControl:26' q = q([1 2 3 6 7 4 5 11 12 13 8 9 10]); */
    for (i = 0; i < 13; i++) {
        b_q[i] = q[b[i]];
    }
}
/* 'updateVelocityControl:29' KA = q(5)-q(4); */
/* 'updateVelocityControl:30' L  = cos(KA/2); */
/* 'updateVelocityControl:31' theta = pi - q(3) - (q(5)+q(4))/2; */
/* 'updateVelocityControl:33' hipDist = L*sin(theta); */
HipDistCur = sin((3.1415926535897931 - b_q[2]) - (b_q[4] + b_q[3]) / 2.0) * cos((b_q[4] - b_q[3]) / 2.0);
/* 'updateVelocityControl:8' dt = t - Discrete.TLastUpdate; */
/* 'updateVelocityControl:9' dx = HipDistCur - Discrete.VelocityControlHipDistPrev; */
/* 'updateVelocityControl:10' v  = dx/dt; */
/*  Compute update */
/* 'updateVelocityControl:13' DeltaTorso = ControlParams.Discrete.VelocityControlTorsoDelta; */
/* 'updateVelocityControl:14' DeltaTorso = DeltaTorso - ControlParams.Supervisory.VelocityControlTorsoGain*(v - ControlParams.Supervisory.VelocityControlTorsoV0); */
/* 'updateVelocityControl:15' DeltaTorso = sat(DeltaTorso, ControlParams.Supervisory.VelocityControlTorsoMin, ControlParams.Supervisory.VelocityControlTorsoMax); */
/* 'sat:3' y = max(lo, min(x, hi)); */
/*  Update */
/* 'updateVelocityControl:18' Discrete.TLastUpdate = t; */
Discrete->TLastUpdate = t;
/* 'updateVelocityControl:19' Discrete.VelocityControlHipDistCur = HipDistCur; */
Discrete->VelocityControlHipDistCur = HipDistCur;
/* 'updateVelocityControl:20' Discrete.VelocityControlHipDistPrev = computeHipDist(q, ControlState.StanceLeg); */
memcpy(&b_q[0], &q[0], 13U * sizeof(real_T));
/* 'updateVelocityControl:25' if (StanceLeg==1) */
if (ControlState_StanceLeg == 1.0) {
    /* 'updateVelocityControl:26' q = q([1 2 3 6 7 4 5 11 12 13 8 9 10]); */
    for (i = 0; i < 13; i++) {
        b_q[i] = q[b[i]];
    }
}
/* 'updateVelocityControl:29' KA = q(5)-q(4); */
/* 'updateVelocityControl:30' L  = cos(KA/2); */
/* 'updateVelocityControl:31' theta = pi - q(3) - (q(5)+q(4))/2; */
/* 'updateVelocityControl:33' hipDist = L*sin(theta); */
Discrete->VelocityControlHipDistPrev = sin((3.1415926535897931 - b_q[2]) - (b_q[4] + b_q[3]) / 2.0) * cos((b_q[4] - b_q[3]) / 2.0);
/* 'updateVelocityControl:21' Discrete.VelocityControlTorsoDelta = DeltaTorso; */
HipDistCur = ControlParams_Discrete->VelocityControlTorsoDelta - ((HipDistCur - ControlParams_Discrete->VelocityControlHipDistPrev) / (t - ControlParams_Discrete->TLastUpdate) - ControlParams_Supervisory_Vel_2) * ControlParams_Supervisory_Vel_1;
if (!((HipDistCur <= ControlParams_Supervisory_Veloc) || rtIsNaN(ControlParams_Supervisory_Veloc))) {
    HipDistCur = ControlParams_Supervisory_Veloc;
}
if ((ControlParams_Supervisory_Vel_0 >= HipDistCur) || rtIsNaN(HipDistCur)) {
    Discrete->VelocityControlTorsoDelta = ControlParams_Supervisory_Vel_0;
} else {
    Discrete->VelocityControlTorsoDelta = HipDistCur;
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_updateVelocityControl(\
%assign comma = ""
%<comma>real_T t\
%assign comma = ", "
%<comma>const real_T q[13]\
%assign comma = ", "
%<comma>real_T ControlState_StanceLeg\
%assign comma = ", "
%<comma>real_T ControlParams_Supervisory_Veloc\
%assign comma = ", "
%<comma>real_T ControlParams_Supervisory_Vel_0\
%assign comma = ", "
%<comma>real_T ControlParams_Supervisory_Vel_1\
%assign comma = ", "
%<comma>real_T ControlParams_Supervisory_Vel_2\
%assign comma = ", "
%<comma>const DiscreteParamsBus *ControlParams_Discrete\
%assign comma = ", "
%<comma>DiscreteParamsBus *Discrete\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 25, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking_ATRIAS3D_ZD_Output03_c0_Fcn26(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T c[15];
real_T dsdq[13];
real_T theta;
real_T dtheta;
real_T delta_theta;
real_T b;
real_T d;
real_T e;
real_T g;
static const int8_T i[13] = { 0, 1, 2, 5, 6, 3, 4, 10, 11, 12, 7, 8, 9 };
int32_T i_0;
int32_T loop_ub;
int32_T f_data;
int32_T f_sizes[2];
%assign _modelSS = ""

/* 'ATRIAS3D_ZD_Output03:4' Output = ControlParams.Output; */
/*  Define matrix to convert between motor and standard actuated coordinates */
/*  [uLAst; uLAsw; uKAst; uKAsw; u3st; u3sw] = T0*[u1R; u2R; u3R; u1L; u2L; u3L] */
/* 'ATRIAS3D_ZD_Output03:8' T0 = [0.5 0.5 0 0 0 0; 0 0 0 0.5 0.5 0; -1 1 0 0 0 0; 0 0 0 -1 1 0; 0 0 1 0 0 0; 0 0 0 0 0 1]; */
/* 'ATRIAS3D_ZD_Output03:9' if (ControlState.StanceLeg==1) */
/* 'ATRIAS3D_ZD_Output03:12' T1 = [zeros(6,7) T0]; */
/*     %<"\%\% Compute s and modify Bezier parameters to extend outside 0 <= s <= 1"> */
/* [Sy,Sq] = SymmetryMatrices(); */
/* 'ATRIAS3D_ZD_Output03:16' if (ControlState.StanceLeg==0) */
if (ControlState_StanceLeg == 0.0) {
    /* 'ATRIAS3D_ZD_Output03:17' c = [Output.Theta.c0 Output.Theta.ct Output.Theta.cq]; */
    c[0] = ControlParams_Output_Theta_c0;
    c[1] = ControlParams_Output_Theta_ct;
    memcpy(&c[2], &ControlParams_Output_Theta_cq[0], 13U * sizeof(real_T));
    /* 'ATRIAS3D_ZD_Output03:18' jacob_h0 = Output.H0; */
} else {
    /* 'ATRIAS3D_ZD_Output03:19' else */
    /* 'ATRIAS3D_ZD_Output03:20' c = [Output.Theta.c0 Output.Theta.ct Output.Theta.cq(:,[1 2 3 6 7 4 5 11 12 13 8 9 10])]; */
    c[0] = ControlParams_Output_Theta_c0;
    c[1] = ControlParams_Output_Theta_ct;
    for (i_0 = 0; i_0 < 13; i_0++) {
        c[i_0 + 2] = ControlParams_Output_Theta_cq[i[i_0]];
    }
    /* 'ATRIAS3D_ZD_Output03:21' c(:,3:4) = -c(:,3:4); */
    c[2] = -c[2];
    c[3] = -c[3];
    /* 'ATRIAS3D_ZD_Output03:22' jacob_h0 = Output.H0(:,[1 2 3 6 7 4 5 11 12 13 8 9 10]); */
    /* 'ATRIAS3D_ZD_Output03:23' jacob_h0(:,1:2) = -jacob_h0(:,1:2); */
}
/* 'ATRIAS3D_ZD_Output03:27' [s,ds,dsdq,theta,dtheta,delta_theta] = ATRIAS3D_ZD_s6(t-Output.Theta.t0, q, dq, Output.ThetaLimits, c); */
%if SLibCG_FcnCallArgAccessed(9,26,0,0)
%<SLibCG_AccessArg(9 ,26, 0)>
%<SLibCG_AccessArg(9 ,26, 8)>
%endif
%if SLibCG_FcnCallArgAccessed(9,26,0,1)
%<SLibCG_AccessArg(9 ,26, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(9,26,0,2)
%<SLibCG_AccessArg(9 ,26, 2)>
%endif
%if SLibCG_FcnCallArgAccessed(9,26,0,3)
%<SLibCG_AccessArg(9 ,26, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(9,26,0,5)
%<SLibCG_AccessArg(9 ,26, 12)>
%endif
%if SLibCG_FcnCallArgAccessed(9,26,0,6)
%<SLibCG_AccessArg(9 ,26, 13)>
%endif

%<(SLibCGCallSubFcn("Walking01_with_ATRIAS3D_ZD_s6_b", ["t - ControlParams_Output_Theta_t0", "q", "dq", "ControlParams_Output_ThetaLimit", "c", "s", "ds", "dsdq", "&theta", "&dtheta", "&delta_theta"], 9, 26, 0))>;
/* 'ATRIAS3D_ZD_Output03:28' s_unsaturated = s; */
/* 'ATRIAS3D_ZD_Output03:30' if (Output.EnforceIncreasingS) */
if ((ControlParams_Output_EnforceInc != 0.0) && (!(*s >= -1000.0))) {
    /* 'ATRIAS3D_ZD_Output03:31' s = max(s, sprev); */
    *s = -1000.0;
}
/* 'ATRIAS3D_ZD_Output03:34' h_alpha = Output.HAlpha; */
/* 'ATRIAS3D_ZD_Output03:35' if (ControlState.StanceLeg==1) */
/* 'ATRIAS3D_ZD_Output03:39' if Output.SaturateS==1 */
if (ControlParams_Output_SaturateS == 1.0) {
    /* delta = 0.2; */
    /* p = [0.2  -0.4  0.2  0]; %<"\% coefficients of transition poly"> */
    /* [s, ds] = softsaturate(s, ds, delta, p); */
    /*  Modified Feb. 4th, 2014 for interpolative bezier table bounds. */
    /* 'ATRIAS3D_ZD_Output03:44' delta = 0.1; */
    /* 'ATRIAS3D_ZD_Output03:45' ds(s>1+delta) = 0; */
    e = *ds;
%if SLibCG_FcnCallArgAccessed(9,26,5,0)
%<SLibCG_AccessArg(9 ,26, 12)>
%endif

    %<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_en", ["*s > 1.1", "&f_data", "f_sizes"], 9, 26, 5))>;
    loop_ub = f_sizes[0] * f_sizes[1];
    for (i_0 = 0; i_0 < loop_ub; i_0++) {
        e = 0.0;
    }
    /* 'ATRIAS3D_ZD_Output03:46' s(s>1+delta) = 1+delta; */
    b = *s;
%if SLibCG_FcnCallArgAccessed(9,26,6,0)
%<SLibCG_AccessArg(9 ,26, 12)>
%endif

    %<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_en", ["*s > 1.1", "&f_data", "f_sizes"], 9, 26, 6))>;
    loop_ub = f_sizes[0] * f_sizes[1];
    for (i_0 = 0; i_0 < loop_ub; i_0++) {
        b = 1.1;
    }
    /* 'ATRIAS3D_ZD_Output03:47' ds(s<-delta) = 0; */
    g = e;
    %<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_en", ["b < -0.1", "&f_data", "f_sizes"], 9, 26, 7))>;
    loop_ub = f_sizes[0] * f_sizes[1];
    for (i_0 = 0; i_0 < loop_ub; i_0++) {
        g = 0.0;
    }
    *ds = g;
    /* 'ATRIAS3D_ZD_Output03:48' s(s<-delta) = -delta; */
    d = b;
    %<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_en", ["b < -0.1", "&f_data", "f_sizes"], 9, 26, 8))>;
    loop_ub = f_sizes[0] * f_sizes[1];
    for (i_0 = 0; i_0 < loop_ub; i_0++) {
        d = -0.1;
    }
    *s = d;
} else if ((!(ControlParams_Output_SaturateS == 2.0)) && (ControlParams_Output_SaturateS == 3.0)) {
    /* 'ATRIAS3D_ZD_Output03:70' elseif Output.SaturateS==3 */
    /* 'ATRIAS3D_ZD_Output03:71' smin = Output.SLimits(1); */
    /* 'ATRIAS3D_ZD_Output03:72' smax = Output.SLimits(2); */
    /* 'ATRIAS3D_ZD_Output03:73' ds(s>smax) = 0; */
    e = *ds;
%if SLibCG_FcnCallArgAccessed(9,26,1,0)
%<SLibCG_AccessArg(9 ,26, 12)>
%<SLibCG_AccessArg(9 ,26, 10)>
%endif

    %<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_en", ["*s > ControlParams_Output_SLimits[1]", "&f_data", "f_sizes"], 9, 26, 1))>;
    loop_ub = f_sizes[0] * f_sizes[1];
    for (i_0 = 0; i_0 < loop_ub; i_0++) {
        e = 0.0;
    }
    /* 'ATRIAS3D_ZD_Output03:74' s(s>smax)  = smax; */
    b = *s;
%if SLibCG_FcnCallArgAccessed(9,26,2,0)
%<SLibCG_AccessArg(9 ,26, 12)>
%<SLibCG_AccessArg(9 ,26, 10)>
%endif

    %<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_en", ["*s > ControlParams_Output_SLimits[1]", "&f_data", "f_sizes"], 9, 26, 2))>;
    loop_ub = f_sizes[0] * f_sizes[1];
    for (i_0 = 0; i_0 < loop_ub; i_0++) {
        b = ControlParams_Output_SLimits[1];
    }
    /* 'ATRIAS3D_ZD_Output03:75' ds(s<smin) = 0; */
    g = e;
%if SLibCG_FcnCallArgAccessed(9,26,3,0)
%<SLibCG_AccessArg(9 ,26, 10)>
%endif

    %<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_en", ["b < ControlParams_Output_SLimits[0]", "&f_data", "f_sizes"], 9, 26, 3))>;
    loop_ub = f_sizes[0] * f_sizes[1];
    for (i_0 = 0; i_0 < loop_ub; i_0++) {
        g = 0.0;
    }
    *ds = g;
    /* 'ATRIAS3D_ZD_Output03:76' s(s<smin)  = smin; */
    d = b;
%if SLibCG_FcnCallArgAccessed(9,26,4,0)
%<SLibCG_AccessArg(9 ,26, 10)>
%endif

    %<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_en", ["b < ControlParams_Output_SLimits[0]", "&f_data", "f_sizes"], 9, 26, 4))>;
    loop_ub = f_sizes[0] * f_sizes[1];
    for (i_0 = 0; i_0 < loop_ub; i_0++) {
        d = ControlParams_Output_SLimits[0];
    }
    *s = d;
} else {
    /* 'ATRIAS3D_ZD_Output03:64' h_alpha(s6>1,:) = h_alpha_high(s6>1,:); */
    /*  If (s<0), hold all desired angles constant */
    /* 'ATRIAS3D_ZD_Output03:67' h_alpha_low = h_alpha(:,1)*[1 1 1 1 1 1]; */
    /* 'ATRIAS3D_ZD_Output03:68' h_alpha(s6<0,:) = h_alpha_low(s6<0,:); */
    /* 'ATRIAS3D_ZD_Output03:50' elseif Output.SaturateS==2 */
    /* 'ATRIAS3D_ZD_Output03:51' if (length(s)>1) */
    /* 'ATRIAS3D_ZD_Output03:54' else */
    /* 'ATRIAS3D_ZD_Output03:55' dqyTds = repmat((c(1,5)*delta_theta), 2, 1); */
    /* 'ATRIAS3D_ZD_Output03:56' s6 = repmat(s, 6, 1); */
    /*  If (s>1), hold the desired knee angles constant and keep the */
    /*  torso angle fixed by decreasing the desired leg angles */
    /* 'ATRIAS3D_ZD_Output03:61' h_alpha_high = h_alpha(:,end)*[1 1 1 1 1 1]; */
    /* 'ATRIAS3D_ZD_Output03:62' h_alpha_high(1:2,:) = h_alpha_high(1:2,:)+dqyTds*(-1:0.2:0); */
    /* 'ATRIAS3D_ZD_Output03:63' h_alpha_high(1:2) = max(150*pi/180, h_alpha_high(1:2)); */
}
/*     %<"\%\% Compute terms in controller"> */
/* 'ATRIAS3D_ZD_Output03:80' qmod = q; */
/* 'ATRIAS3D_ZD_Output03:81' qmod(1) = sat(qmod(1), -Output.YawLimit, Output.YawLimit); */
/* 'ATRIAS3D_ZD_Output03:82' h0 = jacob_h0*qmod; */
/* 'ATRIAS3D_ZD_Output03:83' hd = bezierv(h_alpha, s); */
/* 'ATRIAS3D_ZD_Output03:84' jacob_hd  = beziervd(h_alpha,s); */
/* 'ATRIAS3D_ZD_Output03:85' jacob2_hd = bezierva(h_alpha,s); */
/* 'ATRIAS3D_ZD_Output03:86' dhd = jacob_hd.*ds; */
/* 'ATRIAS3D_ZD_Output03:88' jacob_h = jacob_h0 - jacob_hd*dsdq; */
/* 'ATRIAS3D_ZD_Output03:89' jacob_jacobhdqdq = -jacob2_hd.*(ds.*ds); */
/*     %<"\%\% Stabilizing output term"> */
/*  Allow outputs of the form */
/*    y = H0*q - hd(s(theta(q)), h_alpha) - hStabilizing(phi - phid(s(theta(q))), StabilizingHAlpha) */
/* 'ATRIAS3D_ZD_Output03:95' phi    = Output.Phi.cq * q; */
/* 'ATRIAS3D_ZD_Output03:96' dphi   = Output.Phi.cq * dq; */
/* 'ATRIAS3D_ZD_Output03:98' phid   = bezier(Output.PhiAlpha, s); */
/* 'ATRIAS3D_ZD_Output03:99' jacob_phid = bezierd(Output.PhiAlpha, s); */
/* 'ATRIAS3D_ZD_Output03:100' jacob2_phid = beziera(Output.PhiAlpha, s); */
/* 'ATRIAS3D_ZD_Output03:102' r      = phi - phid; */
/* 'ATRIAS3D_ZD_Output03:103' dr     = dphi - jacob_phid * ds; */
/* 'ATRIAS3D_ZD_Output03:104' RSaturated = false; */
/* 'ATRIAS3D_ZD_Output03:105' if Output.SaturateR */
/* 'ATRIAS3D_ZD_Output03:117' hdbar  = polyv(Output.HBarAlpha, r, inf); */
/* 'ATRIAS3D_ZD_Output03:118' if ~RSaturated */
/* 'ATRIAS3D_ZD_Output03:126' hdbar = sat(hdbar, Output.HBarLimits(:,1), Output.HBarLimits(:,2)); */
/* 'ATRIAS3D_ZD_Output03:127' idxsat = (hdbar == Output.HBarLimits(:,1)) | (hdbar == Output.HBarLimits(:,2)); */
/* 'ATRIAS3D_ZD_Output03:128' jacob_hdbar(idxsat,:) = 0; */
/* 'ATRIAS3D_ZD_Output03:129' jacob2_hdbar(idxsat,:) = 0; */
/* 'ATRIAS3D_ZD_Output03:131' hd = hd + hdbar; */
/* 'ATRIAS3D_ZD_Output03:132' jacob_h = jacob_h - jacob_hdbar * (Output.Phi.cq - jacob_phid * dsdq); */
/* 'ATRIAS3D_ZD_Output03:133' jacob_jacobhdqdq = jacob_jacobhdqdq ... */
/* 'ATRIAS3D_ZD_Output03:134'         + jacob_hdbar * jacob2_phid * ds^2 ... */
/* 'ATRIAS3D_ZD_Output03:135'         + jacob2_hdbar * (-jacob_phid^2 * ds^2 - dphi^2 + jacob_phid * dphi * ds); */
/*     %<"\%\% Saturate the desired leg/knee/hip angles"> */
/* 'ATRIAS3D_ZD_Output03:138' hd_min = [150; 150;  15;  15; -20; -20]*pi/180; */
/* 'ATRIAS3D_ZD_Output03:139' hd_max = [220; 220; 120; 120;  20;  20]*pi/180; */
/* 'ATRIAS3D_ZD_Output03:140' sat_correction = (jacob_h0 - T1)*q; */
/* 'ATRIAS3D_ZD_Output03:141' hd = sat(hd, hd_min + sat_correction, hd_max + sat_correction); */
/* 'ATRIAS3D_ZD_Output03:142' idxsat = (hd == hd_min + sat_correction) | (hd == hd_max + sat_correction); */
/* 'ATRIAS3D_ZD_Output03:143' dhd(idxsat) = 0; */
/* 'ATRIAS3D_ZD_Output03:144' jacob_h(idxsat) = jacob_h0(idxsat); */
/*  jacob_hd(idxsat) = 0; */
/*     %<"\%\%"> */
/* 'ATRIAS3D_ZD_Output03:147' y  = h0-hd; */
/* 'ATRIAS3D_ZD_Output03:148' dy = jacob_h0*dq - dhd; */
/*  Correction */
/* 'ATRIAS3D_ZD_Output03:152' h_alpha_corr = Output.HAlphaCorrection; */
/* 'ATRIAS3D_ZD_Output03:153' s_corr_max = Output.SMaxCorrection; */
/* 'ATRIAS3D_ZD_Output03:154' if Output.UseCorrection && any(s <= s_corr_max) */
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking_ATRIAS3D_ZD_Output03_c0(\
%assign comma = ""
%<comma>real_T t\
%assign comma = ", "
%<comma>const real_T q[13]\
%assign comma = ", "
%<comma>const real_T dq[13]\
%assign comma = ", "
%<comma>real_T ControlState_StanceLeg\
%assign comma = ", "
%<comma>const real_T ControlParams_Output_ThetaLimit[2]\
%assign comma = ", "
%<comma>real_T ControlParams_Output_Theta_c0\
%assign comma = ", "
%<comma>real_T ControlParams_Output_Theta_ct\
%assign comma = ", "
%<comma>const real_T ControlParams_Output_Theta_cq[13]\
%assign comma = ", "
%<comma>real_T ControlParams_Output_Theta_t0\
%assign comma = ", "
%<comma>real_T ControlParams_Output_SaturateS\
%assign comma = ", "
%<comma>const real_T ControlParams_Output_SLimits[2]\
%assign comma = ", "
%<comma>real_T ControlParams_Output_EnforceInc\
%assign comma = ", "
%<comma>real_T *s\
%assign comma = ", "
%<comma>real_T *ds\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 26, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01__ATRIAS3D_ZD_Output02_Fcn27(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T T0[36];
real_T c[15];
real_T h_alpha[36];
real_T h_alpha_high[36];
real_T sat_correction[6];
real_T dsdq[13];
real_T dtheta;
real_T delta_theta;
real_T b;
real_T d;
real_T e;
real_T g;
int32_T k;
static const real_T b_T0[36] = { 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };
static const real_T i[36] = { 0.0, 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 };
static const int8_T j[13] = { 0, 1, 2, 5, 6, 3, 4, 10, 11, 12, 7, 8, 9 };
static const real_T b_b[6] = { -1.0, -0.8, -0.6, -0.4, -0.2, 0.0 };
static const real_T hd_min[6] = { 2.6179938779914944, 2.6179938779914944, 0.26179938779914941, 0.26179938779914941, -0.3490658503988659, -0.3490658503988659 };
static const real_T hd_max[6] = { 3.839724354387525, 3.839724354387525, 2.0943951023931953, 2.0943951023931953, 0.3490658503988659, 0.3490658503988659 };
real_T tmp[6];
real_T hd_min_0[6];
real_T hd_max_0[6];
boolean_T b_s[6];
boolean_T b_s_0[6];
int32_T i_0;
real_T tmp_0[78];
real_T jacob_h0_0[78];
int32_T s_0;
int32_T tmp_data[6];
int32_T tmp_sizes;
int32_T tmp_data_0[6];
real_T h_alpha_data[36];
%assign _modelSS = ""

/*  Define matrix to convert between motor and standard actuated coordinates */
/*  [uLAst; uLAsw; uKAst; uKAsw; u3st; u3sw] = T0*[u1R; u2R; u3R; u1L; u2L; u3L] */
/* 'ATRIAS3D_ZD_Output02:6' T0 = [0.5 0.5 0 0 0 0; 0 0 0 0.5 0.5 0; -1 1 0 0 0 0; 0 0 0 -1 1 0; 0 0 1 0 0 0; 0 0 0 0 0 1]; */
memcpy(&T0[0], &b_T0[0], 36U * sizeof(real_T));
/* 'ATRIAS3D_ZD_Output02:7' if (ControlState.StanceLeg==1) */
if (ControlState_StanceLeg == 1.0) {
    /* 'ATRIAS3D_ZD_Output02:8' T0 = T0([2 1 4 3 6 5],:); */
    memcpy(&T0[0], &i[0], 36U * sizeof(real_T));
}
/* 'ATRIAS3D_ZD_Output02:10' T1 = [zeros(6,7) T0]; */
/*     %<"\%\% Compute s and modify Bezier parameters to extend outside 0 <= s <= 1"> */
/* [Sy,Sq] = SymmetryMatrices(); */
/* 'ATRIAS3D_ZD_Output02:14' if (ControlState.StanceLeg==0) */
if (ControlState_StanceLeg == 0.0) {
    /* 'ATRIAS3D_ZD_Output02:15' c = [Output.Theta.c0 Output.Theta.ct Output.Theta.cq]; */
    c[0] = Output_Theta_c0;
    c[1] = Output_Theta_ct;
    memcpy(&c[2], &Output_Theta_cq[0], 13U * sizeof(real_T));
    /* 'ATRIAS3D_ZD_Output02:16' jacob_h0 = Output.H0; */
    memcpy(&jacob_h0[0], &Output_H0[0], 78U * sizeof(real_T));
} else {
    /* 'ATRIAS3D_ZD_Output02:17' else */
    /* 'ATRIAS3D_ZD_Output02:18' c = [Output.Theta.c0 Output.Theta.ct Output.Theta.cq(:,[1 2 3 6 7 4 5 11 12 13 8 9 10])]; */
    c[0] = Output_Theta_c0;
    c[1] = Output_Theta_ct;
    for (i_0 = 0; i_0 < 13; i_0++) {
        c[i_0 + 2] = Output_Theta_cq[j[i_0]];
    }
    /* 'ATRIAS3D_ZD_Output02:19' c(:,3:4) = -c(:,3:4); */
    c[2] = -c[2];
    c[3] = -c[3];
    /* 'ATRIAS3D_ZD_Output02:20' jacob_h0 = Output.H0(:,[1 2 3 6 7 4 5 11 12 13 8 9 10]); */
    for (i_0 = 0; i_0 < 13; i_0++) {
        for (k = 0; k < 6; k++) {
            jacob_h0[k + 6 * i_0] = Output_H0[6 * j[i_0] + k];
        }
    }
    /* 'ATRIAS3D_ZD_Output02:21' jacob_h0(:,1:2) = -jacob_h0(:,1:2); */
    for (i_0 = 0; i_0 < 2; i_0++) {
        for (k = 0; k < 6; k++) {
            jacob_h0[k + 6 * i_0] = -Output_H0[6 * j[i_0] + k];
        }
    }
    /* jacob_h0 = Output.H0; */
    /* jacob_h0 = Sy*jacob_h0*Sq; */
}
/* 'ATRIAS3D_ZD_Output02:28' [s,ds,dsdq,theta,dtheta,delta_theta] = ATRIAS3D_ZD_s6(t, q, dq, Output.ThetaLimits, c); */
%if SLibCG_FcnCallArgAccessed(9,27,0,0)
%<SLibCG_AccessArg(9 ,27, 0)>
%endif
%if SLibCG_FcnCallArgAccessed(9,27,0,1)
%<SLibCG_AccessArg(9 ,27, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(9,27,0,2)
%<SLibCG_AccessArg(9 ,27, 2)>
%endif
%if SLibCG_FcnCallArgAccessed(9,27,0,3)
%<SLibCG_AccessArg(9 ,27, 6)>
%endif
%if SLibCG_FcnCallArgAccessed(9,27,0,5)
%<SLibCG_AccessArg(9 ,27, 14)>
%endif
%if SLibCG_FcnCallArgAccessed(9,27,0,6)
%<SLibCG_AccessArg(9 ,27, 15)>
%endif
%if SLibCG_FcnCallArgAccessed(9,27,0,8)
%<SLibCG_AccessArg(9 ,27, 22)>
%endif

%<(SLibCGCallSubFcn("Walking01_with_ATRIAS3D_ZD_s6_b", ["t", "q", "dq", "Output_ThetaLimits", "c", "s", "ds", "dsdq", "theta", "&dtheta", "&delta_theta"], 9, 27, 0))>;
/* 'ATRIAS3D_ZD_Output02:29' s_unsaturated = s; */
*s_unsaturated = *s;
/* 'ATRIAS3D_ZD_Output02:31' h_alpha = Output.HAlpha; */
memcpy(&h_alpha[0], &Output_HAlpha[0], 36U * sizeof(real_T));
/* 'ATRIAS3D_ZD_Output02:32' if (ControlState.StanceLeg==1) */
/* 'ATRIAS3D_ZD_Output02:36' if Output.SaturateS==1 */
if (Output_SaturateS == 1.0) {
    /* delta = 0.2; */
    /* p = [0.2  -0.4  0.2  0]; %<"\% coefficients of transition poly"> */
    /* [s, ds] = softsaturate(s, ds, delta, p); */
    /*  Modified Feb. 4th, 2014 for interpolative bezier table bounds. */
    /* 'ATRIAS3D_ZD_Output02:41' delta = 0.1; */
    /* 'ATRIAS3D_ZD_Output02:42' ds(s>1+delta) = 0; */
    e = *ds;
    k = 0;
    if (*s > 1.1) {
        k = 1;
    }
    for (i_0 = 0; i_0 < k; i_0++) {
        e = 0.0;
    }
    /* 'ATRIAS3D_ZD_Output02:43' s(s>1+delta) = 1+delta; */
    b = *s;
    k = 0;
    if (*s > 1.1) {
        k = 1;
    }
    for (i_0 = 0; i_0 < k; i_0++) {
        b = 1.1;
    }
    /* 'ATRIAS3D_ZD_Output02:44' ds(s<-delta) = 0; */
    g = e;
    k = 0;
    if (b < -0.1) {
        k = 1;
    }
    for (i_0 = 0; i_0 < k; i_0++) {
        g = 0.0;
    }
    *ds = g;
    /* 'ATRIAS3D_ZD_Output02:45' s(s<-delta) = -delta; */
    d = b;
    k = 0;
    if (b < -0.1) {
        k = 1;
    }
    for (i_0 = 0; i_0 < k; i_0++) {
        d = -0.1;
    }
    *s = d;
} else if (Output_SaturateS == 2.0) {
    /* 'ATRIAS3D_ZD_Output02:47' elseif Output.SaturateS==2 */
    /* 'ATRIAS3D_ZD_Output02:48' if (length(s)>1) */
    /* 'ATRIAS3D_ZD_Output02:51' else */
    /* 'ATRIAS3D_ZD_Output02:52' dqyTds = repmat((c(1,5)*delta_theta), 2, 1); */
    dtheta = c[4] * delta_theta;
    /* 'ATRIAS3D_ZD_Output02:53' s6 = repmat(s, 6, 1); */
    /*  If (s>1), hold the desired knee angles constant and keep the */
    /*  torso angle fixed by decreasing the desired leg angles */
    /* 'ATRIAS3D_ZD_Output02:58' h_alpha_high = h_alpha(:,end)*[1 1 1 1 1 1]; */
    for (i_0 = 0; i_0 < 6; i_0++) {
        for (k = 0; k < 6; k++) {
            h_alpha_high[i_0 + 6 * k] = Output_HAlpha[30 + i_0];
        }
    }
    /* 'ATRIAS3D_ZD_Output02:59' h_alpha_high(1:2,:) = h_alpha_high(1:2,:)+dqyTds*(-1:0.2:0); */
    for (i_0 = 0; i_0 < 2; i_0++) {
        for (k = 0; k < 6; k++) {
            h_alpha_high[i_0 + 6 * k] += dtheta * b_b[k];
        }
    }
    /* 'ATRIAS3D_ZD_Output02:60' h_alpha_high(1:2) = max(150*pi/180, h_alpha_high(1:2)); */
    dtheta = h_alpha_high[1];
    if ((2.6179938779914944 >= h_alpha_high[0]) || rtIsNaN(h_alpha_high[0])) {
        h_alpha_high[0] = 2.6179938779914944;
    }
    if ((2.6179938779914944 >= dtheta) || rtIsNaN(dtheta)) {
        h_alpha_high[1] = 2.6179938779914944;
    } else {
        h_alpha_high[1] = dtheta;
    }
    /* 'ATRIAS3D_ZD_Output02:61' h_alpha(s6>1,:) = h_alpha_high(s6>1,:); */
    for (i_0 = 0; i_0 < 6; i_0++) {
        b_s[i_0] = (*s > 1.0);
        b_s_0[i_0] = (*s > 1.0);
    }
    %<(SLibCGCallSubFcn("Walking01_withE_eml_li_find_enu", ["b_s", "tmp_data", "&tmp_sizes"], 9, 27, 5))>;
    %<(SLibCGCallSubFcn("Walking01_withE_eml_li_find_enu", ["b_s_0", "tmp_data_0", "&tmp_sizes"], 9, 27, 6))>;
    for (i_0 = 0; i_0 < 6; i_0++) {
        for (k = 0; k < tmp_sizes; k++) {
            h_alpha[(tmp_data[k] + 6 * i_0) - 1] = h_alpha_high[(6 * i_0 + tmp_data_0[k]) - 1];
        }
    }
    /*  If (s<0), hold all desired angles constant */
    /* 'ATRIAS3D_ZD_Output02:64' h_alpha_low = h_alpha(:,1)*[1 1 1 1 1 1]; */
    /* 'ATRIAS3D_ZD_Output02:65' h_alpha(s6<0,:) = h_alpha_low(s6<0,:); */
    for (i_0 = 0; i_0 < 6; i_0++) {
        b_s[i_0] = (*s < 0.0);
        b_s_0[i_0] = (*s < 0.0);
    }
    %<(SLibCGCallSubFcn("Walking01_withE_eml_li_find_enu", ["b_s", "tmp_data", "&tmp_sizes"], 9, 27, 7))>;
    %<(SLibCGCallSubFcn("Walking01_withE_eml_li_find_enu", ["b_s_0", "tmp_data_0", "&tmp_sizes"], 9, 27, 8))>;
    for (i_0 = 0; i_0 < 6; i_0++) {
        for (k = 0; k < 6; k++) {
            h_alpha_high[i_0 + 6 * k] = h_alpha[i_0];
        }
    }
    for (i_0 = 0; i_0 < 6; i_0++) {
        for (k = 0; k < tmp_sizes; k++) {
            h_alpha_data[k + tmp_sizes * i_0] = h_alpha_high[(6 * i_0 + tmp_data_0[k]) - 1];
        }
    }
    for (i_0 = 0; i_0 < 6; i_0++) {
        for (k = 0; k < tmp_sizes; k++) {
            h_alpha[(tmp_data[k] + 6 * i_0) - 1] = h_alpha_data[tmp_sizes * i_0 + k];
        }
    }
} else {
    if (Output_SaturateS == 3.0) {
        /* 'ATRIAS3D_ZD_Output02:67' elseif Output.SaturateS==3 */
        /* 'ATRIAS3D_ZD_Output02:68' delta = 0.02; */
        /* 'ATRIAS3D_ZD_Output02:69' ds(s>1+delta) = 0; */
        e = *ds;
        k = 0;
        if (*s > 1.02) {
            k = 1;
        }
        for (i_0 = 0; i_0 < k; i_0++) {
            e = 0.0;
        }
        /* 'ATRIAS3D_ZD_Output02:70' s(s>1+delta)  = 1+delta; */
        b = *s;
        k = 0;
        if (*s > 1.02) {
            k = 1;
        }
        for (i_0 = 0; i_0 < k; i_0++) {
            b = 1.02;
        }
        /* 'ATRIAS3D_ZD_Output02:71' ds(s<-delta)  = 0; */
        g = e;
        k = 0;
        if (b < -0.02) {
            k = 1;
        }
        for (i_0 = 0; i_0 < k; i_0++) {
            g = 0.0;
        }
        *ds = g;
        /* 'ATRIAS3D_ZD_Output02:72' s(s<-delta)   = -delta; */
        d = b;
        k = 0;
        if (b < -0.02) {
            k = 1;
        }
        for (i_0 = 0; i_0 < k; i_0++) {
            d = -0.02;
        }
        *s = d;
    }
}
/*     %<"\%\% Compute terms in controller"> */
/* 'ATRIAS3D_ZD_Output02:76' hd_min = [150; 150;  15;  15; -20; -20]*pi/180; */
/* 'ATRIAS3D_ZD_Output02:77' hd_max = [220; 220; 120; 120;  20;  20]*pi/180; */
/*  FOR MIRROR-LAW INSPIRED OUTPUTS! */
/* hd_min = [110; 306;  24;  -2;  -5;  -4]*pi/180; */
/* hd_max = [155; 415;  42;  41;   0;   7]*pi/180; */
/* 'ATRIAS3D_ZD_Output02:83' h0 = jacob_h0*q; */
for (i_0 = 0; i_0 < 6; i_0++) {
    h0[i_0] = 0.0;
    for (k = 0; k < 13; k++) {
        h0[i_0] += jacob_h0[6 * k + i_0] * q[k];
    }
}
/* 'ATRIAS3D_ZD_Output02:84' hd = bezierv(h_alpha, s); */
/* 'ATRIAS3D_ZD_Output02:86' sat_correction = (jacob_h0 - T1)*q; */
for (i_0 = 0; i_0 < 7; i_0++) {
    for (k = 0; k < 6; k++) {
        tmp_0[k + 6 * i_0] = 0.0;
    }
}
for (i_0 = 0; i_0 < 6; i_0++) {
    for (k = 0; k < 6; k++) {
        tmp_0[k + 6 * (i_0 + 7)] = T0[6 * i_0 + k];
    }
}
for (i_0 = 0; i_0 < 13; i_0++) {
    for (k = 0; k < 6; k++) {
        jacob_h0_0[k + 6 * i_0] = jacob_h0[6 * i_0 + k] - tmp_0[6 * i_0 + k];
    }
}
/* 'ATRIAS3D_ZD_Output02:87' hd = sat(hd, hd_min + sat_correction, hd_max + sat_correction); */
/* 'ATRIAS3D_ZD_Output02:88' y  = h0-hd; */
%if SLibCG_FcnCallArgAccessed(9,27,3,1)
%<SLibCG_AccessArg(9 ,27, 14)>
%endif

%<(SLibCGCallSubFcn("Walking01_withElmos_bezierv_a", ["h_alpha", "*s", "tmp"], 9, 27, 3))>;
for (i_0 = 0; i_0 < 6; i_0++) {
    sat_correction[i_0] = 0.0;
    for (k = 0; k < 13; k++) {
        sat_correction[i_0] += jacob_h0_0[6 * k + i_0] * q[k];
    }
    hd_min_0[i_0] = hd_min[i_0] + sat_correction[i_0];
    hd_max_0[i_0] = hd_max[i_0] + sat_correction[i_0];
}
%<(SLibCGCallSubFcn("Walking01_withElmos_sat_iu", ["tmp", "hd_min_0", "hd_max_0", "sat_correction"], 9, 27, 4))>;
for (i_0 = 0; i_0 < 6; i_0++) {
    y[i_0] = h0[i_0] - sat_correction[i_0];
}
/* 'ATRIAS3D_ZD_Output02:89' dy = jacob_h0*dq-beziervd(h_alpha,s).*ds; */
%if SLibCG_FcnCallArgAccessed(9,27,2,1)
%<SLibCG_AccessArg(9 ,27, 14)>
%endif

%<(SLibCGCallSubFcn("Walking01_withElmos_beziervd_k", ["h_alpha", "*s", "tmp"], 9, 27, 2))>;
for (i_0 = 0; i_0 < 6; i_0++) {
    dtheta = 0.0;
    for (k = 0; k < 13; k++) {
        dtheta += jacob_h0[6 * k + i_0] * dq[k];
    }
    dy[i_0] = dtheta - tmp[i_0] * *ds;
}
/* 'ATRIAS3D_ZD_Output02:90' d  = bezierva(h_alpha, s).*(ds.*ds); */
/* 'ATRIAS3D_ZD_Output02:91' if (length(s)>1) */
/* 'ATRIAS3D_ZD_Output02:93' else */
/* 'ATRIAS3D_ZD_Output02:94' jacob_h = jacob_h0 - beziervd(h_alpha, s)*dsdq; */
%if SLibCG_FcnCallArgAccessed(9,27,1,1)
%<SLibCG_AccessArg(9 ,27, 14)>
%endif

%<(SLibCGCallSubFcn("Walking01_withElmos_beziervd_k", ["h_alpha", "*s", "tmp"], 9, 27, 1))>;
for (i_0 = 0; i_0 < 6; i_0++) {
    for (k = 0; k < 13; k++) {
        jacob_h[i_0 + 6 * k] = jacob_h0[6 * k + i_0] - tmp[i_0] * dsdq[k];
    }
}
/*  Correction */
/* 'ATRIAS3D_ZD_Output02:98' h_alpha_corr = Output.HAlphaCorrection; */
/* 'ATRIAS3D_ZD_Output02:99' s_corr_max = Output.SMaxCorrection; */
/* 'ATRIAS3D_ZD_Output02:100' if Output.UseCorrection && any(s <= s_corr_max) */
if ((Output_UseCorrection != 0.0) && (!((*s <= Output_SMaxCorrection) == 0))) {
    /* 'ATRIAS3D_ZD_Output02:101' y       = y       -  polyv( h_alpha_corr, s, s_corr_max); */
    /* 'polyv:2' if nargin<3 */
    /* 'polyv:5' a0=poly_cor(:,1); */
    /* 'polyv:6' a1=poly_cor(:,2); */
    /* 'polyv:7' a2=poly_cor(:,3); */
    /* 'polyv:8' a3=poly_cor(:,4); */
    /* 'polyv:9' a4=poly_cor(:,5); */
    /* 'polyv:10' value=a0+s.*(a1+s.*(a2+s.*(a3+s.*a4))); */
    /* 'polyv:11' value=value.*(s<=s_corr_max); */
    k = (*s <= Output_SMaxCorrection);
    /* 'ATRIAS3D_ZD_Output02:102' dy      = dy      -  polyvd(h_alpha_corr, s, s_corr_max).*ds; */
    /* 'polyvd:2' if nargin<3 */
    /* 'polyvd:5' a1=poly_cor(:,2); */
    /* 'polyvd:6' a2=poly_cor(:,3); */
    /* 'polyvd:7' a3=poly_cor(:,4); */
    /* 'polyvd:8' a4=poly_cor(:,5); */
    /* 'polyvd:9' value=a1+s.*(2*a2+s.*(3*a3+4*s.*a4)); */
    /* 'polyvd:10' value=value.*(s<=s_corr_max); */
    dtheta = 4.0 * *s;
    tmp_sizes = (*s <= Output_SMaxCorrection);
    /* 'ATRIAS3D_ZD_Output02:103' d       = d       +  polyva(h_alpha_corr, s, s_corr_max).*(ds.*ds); */
    /* 'ATRIAS3D_ZD_Output02:104' if (length(s)>1) */
    /* 'ATRIAS3D_ZD_Output02:106' else */
    /* 'ATRIAS3D_ZD_Output02:107' jacob_h = jacob_h - polyvd(h_alpha_corr, s, s_corr_max)*dsdq; */
    /* 'polyvd:2' if nargin<3 */
    /* 'polyvd:5' a1=poly_cor(:,2); */
    /* 'polyvd:6' a2=poly_cor(:,3); */
    /* 'polyvd:7' a3=poly_cor(:,4); */
    /* 'polyvd:8' a4=poly_cor(:,5); */
    /* 'polyvd:9' value=a1+s.*(2*a2+s.*(3*a3+4*s.*a4)); */
    /* 'polyvd:10' value=value.*(s<=s_corr_max); */
    delta_theta = 4.0 * *s;
    s_0 = (*s <= Output_SMaxCorrection);
    for (i_0 = 0; i_0 < 6; i_0++) {
        sat_correction[i_0] = (((Output_HAlphaCorrection[18 + i_0] * 3.0 + Output_HAlphaCorrection[24 + i_0] * delta_theta) * *s + Output_HAlphaCorrection[12 + i_0] * 2.0) * *s + Output_HAlphaCorrection[6 + i_0]) * (real_T)s_0;
        y[i_0] -= ((((Output_HAlphaCorrection[24 + i_0] * *s + Output_HAlphaCorrection[18 + i_0]) * *s + Output_HAlphaCorrection[12 + i_0]) * *s + Output_HAlphaCorrection[6 + i_0]) * *s + Output_HAlphaCorrection[i_0]) * (real_T)k;
        dy[i_0] -= (((Output_HAlphaCorrection[18 + i_0] * 3.0 + Output_HAlphaCorrection[24 + i_0] * dtheta) * *s + Output_HAlphaCorrection[12 + i_0] * 2.0) * *s + Output_HAlphaCorrection[6 + i_0]) * (real_T)tmp_sizes * *ds;
    }
    for (i_0 = 0; i_0 < 6; i_0++) {
        for (k = 0; k < 13; k++) {
            jacob_h[i_0 + 6 * k] -= sat_correction[i_0] * dsdq[k];
        }
    }
}
/* 'ATRIAS3D_ZD_Output02:110' jacob_jacobh0dq = zeros(6,13); */
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01__ATRIAS3D_ZD_Output02(\
%assign comma = ""
%<comma>real_T t\
%assign comma = ", "
%<comma>const real_T q[13]\
%assign comma = ", "
%<comma>const real_T dq[13]\
%assign comma = ", "
%<comma>real_T ControlState_StanceLeg\
%assign comma = ", "
%<comma>const real_T Output_H0[78]\
%assign comma = ", "
%<comma>const real_T Output_HAlpha[36]\
%assign comma = ", "
%<comma>const real_T Output_ThetaLimits[2]\
%assign comma = ", "
%<comma>real_T Output_Theta_c0\
%assign comma = ", "
%<comma>real_T Output_Theta_ct\
%assign comma = ", "
%<comma>const real_T Output_Theta_cq[13]\
%assign comma = ", "
%<comma>real_T Output_SaturateS\
%assign comma = ", "
%<comma>real_T Output_UseCorrection\
%assign comma = ", "
%<comma>real_T Output_SMaxCorrection\
%assign comma = ", "
%<comma>const real_T Output_HAlphaCorrection[30]\
%assign comma = ", "
%<comma>real_T *s\
%assign comma = ", "
%<comma>real_T *ds\
%assign comma = ", "
%<comma>real_T h0[6]\
%assign comma = ", "
%<comma>real_T y[6]\
%assign comma = ", "
%<comma>real_T dy[6]\
%assign comma = ", "
%<comma>real_T jacob_h0[78]\
%assign comma = ", "
%<comma>real_T jacob_h[78]\
%assign comma = ", "
%<comma>real_T *s_unsaturated\
%assign comma = ", "
%<comma>real_T *theta\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 27, fcnProtoType)>
%return fcnBuff
%endfunction

%function Wal_updateBasicWalkingControl04_Fcn28(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T hd_posing[6];
real_T h_alpha[36];
real_T h_alpha_tweak[36];
real_T HAlphaUpdate[36];
real_T unusedU9;
real_T unusedUa;
real_T y_prev[6];
real_T h0[6];
real_T jacob_h0[78];
real_T jacob_h[78];
real_T s_unsaturated;
real_T ThetaPlus;
static const real_T b[6] = { 1.0, 0.8, 0.6, 0.4, 0.19999999999999996, 0.0 };
static const real_T b_b[36] = { 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.19999999999999996, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
static const real_T c_b[36] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.8, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };
static const real_T d_b[6] = { 0.0, 0.2, 0.4, 0.6, 0.8, 1.0 };
static const int8_T a[36] = { 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1 };
int32_T i;
real_T tmp[24];
real_T hd_posing_0[6];
int32_T i_0;
int32_T i_1;
%assign _modelSS = ""

/*  BAG20141014 Updated to handle a symmetric start into transition. */
/*  Updated to handle RIO and non-RIO operation based on */
/*  ControlParams.Feedback.RIO. April 3rd, 2014 BAG. */
/*  Updated to handle interpolative Bezier tables for RIO. January 30th, */
/*  2014 BAG. */
/*  Default discrete output */
/* 'updateBasicWalkingControl04:10' Discrete = ControlParams.Discrete; */
*Discrete = ControlParams->Discrete;
/* 'updateBasicWalkingControl04:12' if (ControlState.ControllerMode==1) */
if (ControlState_ControllerMode == 1.0) {
    /*  POSING */
    /* 'updateBasicWalkingControl04:13' Output = AllOutputs(1); */
    *Output = AllOutputs[0];
    /* 'updateBasicWalkingControl04:15' if ~ControlParams.Supervisory.UseGaitTransition */
    if (!(ControlParams->Supervisory.UseGaitTransition != 0.0)) {
        /* 'updateBasicWalkingControl04:16' Output.HAlpha = AllOutputs(4).HAlpha(:,1)*[1 1 1 1 1 1]; */
        for (i = 0; i < 6; i++) {
            for (i_0 = 0; i_0 < 6; i_0++) {
                Output->HAlpha[i + 6 * i_0] = AllOutputs[3].HAlpha[i];
            }
        }
    }
    /* 'updateBasicWalkingControl04:19' if 0 && (ControlParams.Supervisory.UsePosingControl) */
} else if (ControlState_ControllerMode == 2.0) {
    /* 'updateBasicWalkingControl04:23' elseif (ControlState.ControllerMode==2) */
    /*  INITIATION */
    /*  The initiation control is a time-based control which starts at */
    /*  the posing configuration and injects energy to initiate motion. */
    /* 'updateBasicWalkingControl04:27' Output = AllOutputs(2); */
    *Output = AllOutputs[1];
    /* 'updateBasicWalkingControl04:28' Output.ThetaLimits = Output.Theta.ct*[0 ControlParams.Supervisory.TStepInitial]; */
    Output->ThetaLimits[0] = AllOutputs[1].Theta.ct * 0.0;
    Output->ThetaLimits[1] = AllOutputs[1].Theta.ct * ControlParams->Supervisory.TStepInitial;
    /* 'updateBasicWalkingControl04:29' Output.Theta.t0 = t; */
    Output->Theta.t0 = t;
    /* 'updateBasicWalkingControl04:31' KAInjection = ControlParams.Supervisory.KAInjection; */
    /* 'updateBasicWalkingControl04:32' s2 = 0:0.2:1; */
    /* 'updateBasicWalkingControl04:33' hd_posing = ControlParamsPrev.Output.HAlpha(:,1); */
    /* 'updateBasicWalkingControl04:34' hd_initiation = hd_posing + [0; 0; KAInjection; 0; 0]*pi/180; */
    /* 'updateBasicWalkingControl04:35' Output.HAlpha = hd_posing*(1-s2) + hd_initiation*s2; */
    hd_posing_0[0] = 0.0;
    hd_posing_0[1] = 0.0;
    hd_posing_0[2] = ControlParams->Supervisory.KAInjection[0];
    hd_posing_0[3] = ControlParams->Supervisory.KAInjection[1];
    hd_posing_0[4] = 0.0;
    hd_posing_0[5] = 0.0;
    for (i = 0; i < 6; i++) {
        hd_posing[i] = hd_posing_0[i] * 3.1415926535897931 / 180.0 + ControlParamsPrev->Output.HAlpha[i];
    }
    for (i = 0; i < 6; i++) {
        for (i_0 = 0; i_0 < 6; i_0++) {
            h_alpha_tweak[i + 6 * i_0] = ControlParamsPrev->Output.HAlpha[i] * b[i_0];
        }
    }
    for (i = 0; i < 6; i++) {
        for (i_0 = 0; i_0 < 6; i_0++) {
            h_alpha[i + 6 * i_0] = hd_posing[i] * d_b[i_0];
        }
    }
    for (i = 0; i < 6; i++) {
        for (i_0 = 0; i_0 < 6; i_0++) {
            Output->HAlpha[i_0 + 6 * i] = h_alpha_tweak[6 * i + i_0] + h_alpha[6 * i + i_0];
        }
    }
    /* 'updateBasicWalkingControl04:36' Discrete.TLastUpdate = t; */
    Discrete->TLastUpdate = t;
} else if (ControlState_ControllerMode == 3.0) {
    /* 'updateBasicWalkingControl04:38' elseif (ControlState.ControllerMode==3) */
    /*  TRANSITION */
    /*  The transition control is a state-based control which is */
    /*  triggered when the robot has sufficient velocity. It is designed */
    /*  to take the robot toward the walking gait. */
    /* [s,ds,dsdq,theta,dtheta,delta_theta,sbar,y,dy,d,jacob_h,hd,jacob_jacobh0dq,swap] = ATRIAS3D_ZD_Output(t,q,dq,stance_leg,theta_limits_prev,h_alpha_prev,select_control); */
    /* 'updateBasicWalkingControl04:45' Output = AllOutputs(3); */
    *Output = AllOutputs[2];
    /* 'updateBasicWalkingControl04:46' [~,~,h0,~,~,~,~,~,theta] = ATRIAS3D_ZD_Output02(t, q, dq, ControlState, Output); */
%if SLibCG_FcnCallArgAccessed(9,28,5,0)
%<SLibCG_AccessArg(9 ,28, 0)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,5,1)
%<SLibCG_AccessArg(9 ,28, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,5,2)
%<SLibCG_AccessArg(9 ,28, 2)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,5,3)
%<SLibCG_AccessArg(9 ,28, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,5,4)
%<SLibCG_AccessArg(9 ,28, 8)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,5,5)
%<SLibCG_AccessArg(9 ,28, 8)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,5,6)
%<SLibCG_AccessArg(9 ,28, 8)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,5,7)
%<SLibCG_AccessArg(9 ,28, 8)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,5,8)
%<SLibCG_AccessArg(9 ,28, 8)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,5,9)
%<SLibCG_AccessArg(9 ,28, 8)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,5,10)
%<SLibCG_AccessArg(9 ,28, 8)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,5,11)
%<SLibCG_AccessArg(9 ,28, 8)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,5,12)
%<SLibCG_AccessArg(9 ,28, 8)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,5,13)
%<SLibCG_AccessArg(9 ,28, 8)>
%endif

    %<(SLibCGCallSubFcn("Walking01__ATRIAS3D_ZD_Output02", ["t", "q", "dq", "ControlState_StanceLeg", "AllOutputs[2].H0", "AllOutputs[2].HAlpha", "AllOutputs[2].ThetaLimits", "AllOutputs[2].Theta.c0", "AllOutputs[2].Theta.ct", "AllOutputs[2].Theta.cq", "AllOutputs[2].SaturateS", "AllOutputs[2].UseCorrection", "AllOutputs[2].SMaxCorrection", "AllOutputs[2].HAlphaCorrection", "&unusedU9", "&unusedUa", "h0", "hd_posing", "y_prev", "jacob_h0", "jacob_h", "&s_unsaturated", "&ThetaPlus"], 9, 28, 5))>;
    /* 'updateBasicWalkingControl04:46' ~ */
    /* 'updateBasicWalkingControl04:48' theta_max = max(Output.ThetaLimits(:,2), theta+ControlParams.Supervisory.MinDeltaThetaTransition*pi/180); */
    /* 'updateBasicWalkingControl04:49' Output.ThetaLimits = [theta theta_max]; */
    Output->ThetaLimits[0] = ThetaPlus;
    unusedU9 = ControlParams->Supervisory.MinDeltaThetaTransition * 3.1415926535897931 / 180.0 + ThetaPlus;
    if ((AllOutputs[2].ThetaLimits[1] >= unusedU9) || rtIsNaN(unusedU9)) {
        Output->ThetaLimits[1] = AllOutputs[2].ThetaLimits[1];
    } else {
        Output->ThetaLimits[1] = unusedU9;
    }
    /* 'updateBasicWalkingControl04:51' s2 = 0:0.2:1; */
    /* 'updateBasicWalkingControl04:52' hd_injection = ControlParamsPrev.Output.HAlpha(:,end); */
    /* 'updateBasicWalkingControl04:53' hd_nom = AllOutputs(4).HAlpha(:,1); */
    /* 'updateBasicWalkingControl04:54' hd_nom(6) = Output.HAlpha(6,6); */
    /* 'updateBasicWalkingControl04:55' h_alpha = Output.HAlpha; */
    /* BGB 2014-06-06 */
    /* 'updateBasicWalkingControl04:58' h_update = diag([1 1 1 1 1 1])*(h0-h_alpha(:,1))*(1-s2); */
    /* h_update(3) = min(h_update(3), 0); */
    /* 'updateBasicWalkingControl04:60' h_alpha = h_alpha + h_update; */
    /*         %<"\%{"> */
    /*         h_alpha(1:2,:) = h_alpha(1:2,:) + (h0(1:2)-h_alpha(1:2,1))*(1-s2); */
    /*         h_alpha(3:4,:) = h_alpha(3:4,:) + (h0(3:4)-h_alpha(3:4,1))*(1-s2); */
    /*         h_alpha(5:6,:) = hd_injection(5:6)*(1-s2) + hd_nom(5:6)*s2; */
    /*          */
    /*         h_alpha(5,:) = h_alpha(5,:) + (h0(5)-h_alpha(5,1))*(1-s2); */
    /*         %<"\%}"> */
    /* END BGB 2014-06-06 */
    /* 'updateBasicWalkingControl04:70' Output.HAlpha = h_alpha; */
    for (i = 0; i < 6; i++) {
        hd_posing[i] = h0[i] - AllOutputs[2].HAlpha[i];
    }
    for (i = 0; i < 6; i++) {
        hd_posing_0[i] = 0.0;
        for (i_0 = 0; i_0 < 6; i_0++) {
            hd_posing_0[i] += (real_T)a[6 * i_0 + i] * hd_posing[i_0];
        }
    }
    for (i = 0; i < 6; i++) {
        for (i_0 = 0; i_0 < 6; i_0++) {
            Output->HAlpha[i + 6 * i_0] = AllOutputs[2].HAlpha[6 * i_0 + i] + hd_posing_0[i] * b[i_0];
        }
    }
    /* 'updateBasicWalkingControl04:71' Discrete.TLastUpdate = t; */
    Discrete->TLastUpdate = t;
} else {
    /* 'updateBasicWalkingControl04:73' else */
    /* if (ControlState.ControllerMode==4) %<"\% BASIC WALKING"> */
    /* 'updateBasicWalkingControl04:75' if (~ControlState.InDoubleSupport) */
    if (!(ControlState_InDoubleSupport != 0.0)) {
        /* 'updateBasicWalkingControl04:76' if (ControlState.StepCount < ControlParams.Supervisory.StartSecondGaitOnStep) */
        if (ControlState_StepCount < ControlParams->Supervisory.StartSecondGaitOnStep) {
            /* 'updateBasicWalkingControl04:77' Output = AllOutputs(4); */
            *Output = AllOutputs[3];
            /*  BASIC WALKING, SINGLE SUPPORT */
        } else {
            /* 'updateBasicWalkingControl04:78' else */
            /* 'updateBasicWalkingControl04:79' Output = AllOutputs(5); */
            *Output = AllOutputs[4];
            /*  BASIC WALKING, SINGLE SUPPORT */
        }
        /* 'updateBasicWalkingControl04:82' if (ControlState.StepCount == ControlParams.Supervisory.StartSecondGaitOnStep) */
        if (ControlState_StepCount == ControlParams->Supervisory.StartSecondGaitOnStep) {
            /*  Let the feedforward torque ramp linearly from the torque */
            /*  along the previous output to that along the new output */
            /* 'updateBasicWalkingControl04:85' s2 = (0:0.2:1); */
            /* 'updateBasicWalkingControl04:86' Output.HAlphaStar = AllOutputs(4).HAlphaStar * diag(1-s2) + AllOutputs(5).HAlphaStar * diag(s2); */
            for (i = 0; i < 6; i++) {
                for (i_0 = 0; i_0 < 6; i_0++) {
                    h_alpha_tweak[i + 6 * i_0] = 0.0;
                    for (i_1 = 0; i_1 < 6; i_1++) {
                        h_alpha_tweak[i + 6 * i_0] += AllOutputs[3].HAlphaStar[6 * i_1 + i] * b_b[6 * i_0 + i_1];
                    }
                }
            }
            for (i = 0; i < 6; i++) {
                for (i_0 = 0; i_0 < 6; i_0++) {
                    h_alpha[i + 6 * i_0] = 0.0;
                    for (i_1 = 0; i_1 < 6; i_1++) {
                        h_alpha[i + 6 * i_0] += AllOutputs[4].HAlphaStar[6 * i_1 + i] * c_b[6 * i_0 + i_1];
                    }
                }
            }
            for (i = 0; i < 6; i++) {
                for (i_0 = 0; i_0 < 6; i_0++) {
                    Output->HAlphaStar[i_0 + 6 * i] = h_alpha_tweak[6 * i + i_0] + h_alpha[6 * i + i_0];
                }
            }
        }
        /* 'updateBasicWalkingControl04:89' sprev = -1000; */
        /* 'updateBasicWalkingControl04:90' ControlParams.Output = Output; */
        /* 'updateBasicWalkingControl04:91' [s,ds,h0,y,dy,jacob_h0,jacob_h,s_unsaturated,ThetaPlus] = ATRIAS3D_ZD_Output03(t, q, dq, ControlState, ControlParams, sprev); */
%if SLibCG_FcnCallArgAccessed(9,28,2,0)
%<SLibCG_AccessArg(9 ,28, 0)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,2,1)
%<SLibCG_AccessArg(9 ,28, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,2,2)
%<SLibCG_AccessArg(9 ,28, 2)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,2,3)
%<SLibCG_AccessArg(9 ,28, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,2,4)
%<SLibCG_AccessArg(9 ,28, 12)>
%endif

        %<(SLibCGCallSubFcn("Walking0_ATRIAS3D_ZD_Output03_c", ["t", "q", "dq", "ControlState_StanceLeg", "Output", "&unusedU9", "&unusedUa", "h0", "hd_posing", "y_prev", "jacob_h0", "jacob_h", "&s_unsaturated", "&ThetaPlus"], 9, 28, 2))>;
        /*  Redesign HAlpha */
        /* 'updateBasicWalkingControl04:94' h_alpha = Output.HAlpha; */
        for (i = 0; i < 36; i++) {
            h_alpha[i] = Output->HAlpha[i];
        }
        /* 'updateBasicWalkingControl04:95' h_alpha_tweak = applyGaitTweaks2(ControlState, ControlParams, 1); */
%if SLibCG_FcnCallArgAccessed(9,28,1,0)
%<SLibCG_AccessArg(9 ,28, 3)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,1,1)
%<SLibCG_AccessArg(9 ,28, 7)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,1,2)
%<SLibCG_AccessArg(9 ,28, 12)>
%endif

        %<(SLibCGCallSubFcn("Walking01_wi_applyGaitTweaks2_p", ["ControlState_ControllerMode", "ControlParams->Supervisory.GaitTweaks", "Output->H0", "1.0", "h_alpha_tweak"], 9, 28, 1))>;
        /* 'updateBasicWalkingControl04:97' if ~(ControlParams.Feedback.RIO) */
        if (!(ControlParams->Feedback.RIO != 0.0)) {
            /*  If RIO is 0, adapt h_alpha using standard procedure. */
            /* 'updateBasicWalkingControl04:100' if (ControlStatePrev.ControllerMode~=0) */
            if (ControlStatePrev_ControllerMode != 0.0) {
                /*  0=RESET     */
                /*  Event-based velocity control */
                /* 'updateBasicWalkingControl04:103' Discrete = updateVelocityControl(t, q, ControlState, ControlParams); */
%if SLibCG_FcnCallArgAccessed(9,28,0,0)
%<SLibCG_AccessArg(9 ,28, 0)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,0,1)
%<SLibCG_AccessArg(9 ,28, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,0,2)
%<SLibCG_AccessArg(9 ,28, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,0,3)
%<SLibCG_AccessArg(9 ,28, 7)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,0,4)
%<SLibCG_AccessArg(9 ,28, 7)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,0,5)
%<SLibCG_AccessArg(9 ,28, 7)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,0,6)
%<SLibCG_AccessArg(9 ,28, 7)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,0,7)
%<SLibCG_AccessArg(9 ,28, 7)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,0,8)
%<SLibCG_AccessArg(9 ,28, 13)>
%endif

                %<(SLibCGCallSubFcn("Walking01_updateVelocityControl", ["t", "q", "ControlState_StanceLeg", "ControlParams->Supervisory.VelocityControlTorsoMax", "ControlParams->Supervisory.VelocityControlTorsoMin", "ControlParams->Supervisory.VelocityControlTorsoGain", "ControlParams->Supervisory.VelocityControlTorsoV0", "&ControlParams->Discrete", "Discrete"], 9, 28, 0))>;
                /* 'updateBasicWalkingControl04:104' if (ControlState.StepCount >= ControlParams.Supervisory.TorsoBackOnStep) */
                if (ControlState_StepCount >= ControlParams->Supervisory.TorsoBackOnStep) {
                    /* 'updateBasicWalkingControl04:105' h_alpha(1:2,:) = h_alpha(1:2,:) - ControlParams.Supervisory.TorsoBackAngle*pi/180; */
                    unusedU9 = ControlParams->Supervisory.TorsoBackAngle * 3.1415926535897931 / 180.0;
                    for (i = 0; i < 6; i++) {
                        h_alpha[6 * i] = Output->HAlpha[6 * i] - unusedU9;
                        h_alpha[1 + 6 * i] = Output->HAlpha[6 * i + 1] - unusedU9;
                    }
                    /* 'updateBasicWalkingControl04:106' h_alpha(1:2,:) = h_alpha(1:2,:) + Discrete.VelocityControlTorsoDelta*pi/180; */
                    unusedU9 = Discrete->VelocityControlTorsoDelta * 3.1415926535897931 / 180.0;
                    for (i = 0; i < 6; i++) {
                        h_alpha[6 * i] += unusedU9;
                        h_alpha[1 + 6 * i] += unusedU9;
                    }
                } else {
                    /* 'updateBasicWalkingControl04:107' else */
                    /* 'updateBasicWalkingControl04:108' Discrete.VelocityControlTorsoDelta = 0; */
                    Discrete->VelocityControlTorsoDelta = 0.0;
                }
                /*  Error zeroing */
                /* 'updateBasicWalkingControl04:112' if (ControlParams.Supervisory.RunMode >= 1) */
                if (ControlParams->Supervisory.RunMode >= 1.0) {
                    /*  make s start at 0 */
                    /* 'updateBasicWalkingControl04:114' Output.ThetaLimits(:,1) = ThetaPlus; */
                    Output->ThetaLimits[0] = ThetaPlus;
                    /* 'updateBasicWalkingControl04:115' Output.ThetaLimits(:,2) = max(Output.ThetaLimits(:,2), ThetaPlus + ControlParams.Supervisory.MinDeltaTheta); */
                    unusedU9 = ThetaPlus + ControlParams->Supervisory.MinDeltaTheta;
                    if (!((Output->ThetaLimits[1] >= unusedU9) || rtIsNaN(unusedU9))) {
                        Output->ThetaLimits[1] = unusedU9;
                    }
                    /* 'updateBasicWalkingControl04:117' s2 = 0:0.2:1; */
                    /* 'updateBasicWalkingControl04:118' M=5; */
                    /* 'updateBasicWalkingControl04:119' HAlphaUpdate = (ControlParams.Supervisory.ErrorZeroFactor .* (h0 - h_alpha_tweak(:,1) - h_alpha(:,1)))*(1-s2); */
                    for (i = 0; i < 6; i++) {
                        hd_posing_0[i] = ((h0[i] - h_alpha_tweak[i]) - h_alpha[i]) * ControlParams->Supervisory.ErrorZeroFactor[i];
                    }
                    for (i = 0; i < 6; i++) {
                        for (i_0 = 0; i_0 < 6; i_0++) {
                            HAlphaUpdate[i + 6 * i_0] = hd_posing_0[i] * b[i_0];
                        }
                    }
                    /*  Position only */
                    /* 'updateBasicWalkingControl04:121' if 1 */
                    /* 'updateBasicWalkingControl04:122' ControlParams.Output = Output; */
                    /* 'updateBasicWalkingControl04:123' [~,ds] = ATRIAS3D_ZD_Output03(t, q, dq, ControlState, ControlParams, sprev); */
%if SLibCG_FcnCallArgAccessed(9,28,6,0)
%<SLibCG_AccessArg(9 ,28, 0)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,6,1)
%<SLibCG_AccessArg(9 ,28, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,6,2)
%<SLibCG_AccessArg(9 ,28, 2)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,6,3)
%<SLibCG_AccessArg(9 ,28, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,6,4)
%<SLibCG_AccessArg(9 ,28, 12)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,6,5)
%<SLibCG_AccessArg(9 ,28, 12)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,6,6)
%<SLibCG_AccessArg(9 ,28, 12)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,6,7)
%<SLibCG_AccessArg(9 ,28, 12)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,6,8)
%<SLibCG_AccessArg(9 ,28, 12)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,6,9)
%<SLibCG_AccessArg(9 ,28, 12)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,6,10)
%<SLibCG_AccessArg(9 ,28, 12)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,6,11)
%<SLibCG_AccessArg(9 ,28, 12)>
%endif

                    %<(SLibCGCallSubFcn("Walking_ATRIAS3D_ZD_Output03_c0", ["t", "q", "dq", "ControlState_StanceLeg", "Output->ThetaLimits", "Output->Theta.c0", "Output->Theta.ct", "Output->Theta.cq", "Output->Theta.t0", "Output->SaturateS", "Output->SLimits", "Output->EnforceIncreasingS", "&unusedU9", "&unusedUa"], 9, 28, 6))>;
                    /* 'updateBasicWalkingControl04:123' ~ */
                    /* HAlphaUpdate(:,2) = (h_alpha(:,1) + h_alpha_tweak(:,1) + HAlphaUpdate(:,1)) + ControlParams.Supervisory.ErrorVelZeroFactor .* (jacob_h0*dq)/(M*ds) - h_alpha_tweak(:,2) - h_alpha(:,2);  %<"\% Position and velocity"> */
                    /* 'updateBasicWalkingControl04:125' HAlphaUpdate(:,2) = HAlphaUpdate(:,1) ... */
                    /* 'updateBasicWalkingControl04:126'                                 + ControlParams.Supervisory.ErrorVelZeroFactor ... */
                    /* 'updateBasicWalkingControl04:127'                                 .* ((jacob_h0*dq)/(M*ds) - ((h_alpha(:,2) + h_alpha_tweak(:,2)) - (h_alpha(:,1) + h_alpha_tweak(:,1)))); */
                    unusedU9 = 5.0 * unusedUa;
                    for (i = 0; i < 6; i++) {
                        unusedUa = 0.0;
                        for (i_0 = 0; i_0 < 13; i_0++) {
                            unusedUa += jacob_h0[6 * i_0 + i] * dq[i_0];
                        }
                        hd_posing_0[i] = unusedUa / unusedU9 - ((h_alpha[6 + i] + h_alpha_tweak[6 + i]) - (h_alpha[i] + h_alpha_tweak[i]));
                    }
                    for (i = 0; i < 6; i++) {
                        hd_posing[i] = ControlParams->Supervisory.ErrorVelZeroFactor[i] * hd_posing_0[i] + HAlphaUpdate[i];
                    }
                    for (i = 0; i < 6; i++) {
                        HAlphaUpdate[6 + i] = hd_posing[i];
                    }
                    /*  Position and velocity */
                    /* 'updateBasicWalkingControl04:129' h_alpha = h_alpha + HAlphaUpdate; */
                    for (i = 0; i < 36; i++) {
                        h_alpha[i] += HAlphaUpdate[i];
                    }
                }
            }
        } else {
            /* 'updateBasicWalkingControl04:132' else */
            /*  Adaptive Bezier Parameters. */
            /*  h_alpha = bezierinterpolate(spPlusCurrent,bezierTable); */
            /* 'updateBasicWalkingControl04:135' h_alpha(1:4,:) = beziertableinterpolate2(s(1),ControlParams.Feedback.RIO); */
%if SLibCG_FcnCallArgAccessed(9,28,8,1)
%<SLibCG_AccessArg(9 ,28, 7)>
%endif

            %<(SLibCGCallSubFcn("Walking_beziertableinterpolate2", ["unusedU9", "ControlParams->Feedback.RIO", "tmp"], 9, 28, 8))>;
            for (i = 0; i < 6; i++) {
                h_alpha[6 * i] = tmp[i << 2];
                h_alpha[1 + 6 * i] = tmp[(i << 2) + 1];
                h_alpha[2 + 6 * i] = tmp[(i << 2) + 2];
                h_alpha[3 + 6 * i] = tmp[(i << 2) + 3];
            }
        }
        /* 'updateBasicWalkingControl04:139' Output.HAlpha = h_alpha; */
        for (i = 0; i < 36; i++) {
            Output->HAlpha[i] = h_alpha[i];
        }
    } else {
        /* 'updateBasicWalkingControl04:141' else */
        /* 'updateBasicWalkingControl04:142' Output = AllOutputs(5); */
        *Output = AllOutputs[4];
        /*  BASIC WALKING, DOUBLE SUPPORT */
        /*  Make desired angles continuous */
        /* 'updateBasicWalkingControl04:145' OutputPrev = ControlParamsPrev.Output; */
        /* 'updateBasicWalkingControl04:146' h_alpha = ControlParamsPrev.Output.HAlpha; */
        for (i = 0; i < 36; i++) {
            h_alpha[i] = ControlParamsPrev->Output.HAlpha[i];
        }
        /* 'updateBasicWalkingControl04:147' u_ff    = ControlParamsPrev.Feedback.u_ff; */
        /* 'updateBasicWalkingControl04:148' if (ControlStatePrev.ControllerMode==4) */
        if (ControlStatePrev_ControllerMode == 4.0) {
            /* h_alpha_tweak = applyGaitTweaks(0*h_alpha, ControlParamsPrev.Supervisory.GaitTweaks, 4); */
            /* 'updateBasicWalkingControl04:150' h_alpha_tweak = applyGaitTweaks2(ControlState, ControlParams, 1); */
            /* 'updateBasicWalkingControl04:151' [~, h_alpha] = computeLateralControl(q, dq, ControlState.StanceLeg, u_ff, h_alpha+h_alpha_tweak, ControlState, ControlParams); */
            for (i = 0; i < 6; i++) {
                hd_posing[i] = ControlParamsPrev->Feedback.u_ff[i];
            }
%if SLibCG_FcnCallArgAccessed(9,28,7,0)
%<SLibCG_AccessArg(9 ,28, 3)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,7,1)
%<SLibCG_AccessArg(9 ,28, 7)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,7,2)
%<SLibCG_AccessArg(9 ,28, 7)>
%endif

            %<(SLibCGCallSubFcn("Walking01_wi_applyGaitTweaks2_p", ["ControlState_ControllerMode", "ControlParams->Supervisory.GaitTweaks", "ControlParams->Output.H0", "1.0", "h_alpha_tweak"], 9, 28, 7))>;
            for (i = 0; i < 36; i++) {
                h_alpha[i] = ControlParamsPrev->Output.HAlpha[i] + h_alpha_tweak[i];
            }
%if SLibCG_FcnCallArgAccessed(9,28,3,0)
%<SLibCG_AccessArg(9 ,28, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,3,1)
%<SLibCG_AccessArg(9 ,28, 2)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,3,2)
%<SLibCG_AccessArg(9 ,28, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,3,5)
%<SLibCG_AccessArg(9 ,28, 6)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,3,6)
%<SLibCG_AccessArg(9 ,28, 7)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,3,7)
%<SLibCG_AccessArg(9 ,28, 7)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,3,8)
%<SLibCG_AccessArg(9 ,28, 7)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,3,9)
%<SLibCG_AccessArg(9 ,28, 7)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,3,10)
%<SLibCG_AccessArg(9 ,28, 7)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,3,11)
%<SLibCG_AccessArg(9 ,28, 7)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,3,12)
%<SLibCG_AccessArg(9 ,28, 7)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,3,13)
%<SLibCG_AccessArg(9 ,28, 7)>
%endif

            %<(SLibCGCallSubFcn("Walking01_computeLateralControl", ["q", "dq", "ControlState_StanceLeg", "hd_posing", "h_alpha", "ControlState_StepCount", "ControlParams->Supervisory.TorsoBackOnStep", "ControlParams->Feedback.kp_lat", "ControlParams->Feedback.q3d_min_lat", "ControlParams->Feedback.q3d_max_lat", "ControlParams->Feedback.w_torso_lat", "ControlParams->Feedback.LateralControlMode", "ControlParams->Feedback.lat_bias", "ControlParams->Feedback.lat_bias2"], 9, 28, 3))>;
            /* 'updateBasicWalkingControl04:151' ~ */
        }
        /* 'updateBasicWalkingControl04:153' OutputPrev.HAlpha = h_alpha; */
        /* 'updateBasicWalkingControl04:155' [~,~,h0_prev, y_prev] = ATRIAS3D_ZD_Output02(t, q, dq, ControlStatePrev, OutputPrev); */
%if SLibCG_FcnCallArgAccessed(9,28,4,0)
%<SLibCG_AccessArg(9 ,28, 0)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,4,1)
%<SLibCG_AccessArg(9 ,28, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,4,2)
%<SLibCG_AccessArg(9 ,28, 2)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,4,3)
%<SLibCG_AccessArg(9 ,28, 10)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,4,4)
%<SLibCG_AccessArg(9 ,28, 11)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,4,6)
%<SLibCG_AccessArg(9 ,28, 11)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,4,7)
%<SLibCG_AccessArg(9 ,28, 11)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,4,8)
%<SLibCG_AccessArg(9 ,28, 11)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,4,9)
%<SLibCG_AccessArg(9 ,28, 11)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,4,10)
%<SLibCG_AccessArg(9 ,28, 11)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,4,11)
%<SLibCG_AccessArg(9 ,28, 11)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,4,12)
%<SLibCG_AccessArg(9 ,28, 11)>
%endif
%if SLibCG_FcnCallArgAccessed(9,28,4,13)
%<SLibCG_AccessArg(9 ,28, 11)>
%endif

        %<(SLibCGCallSubFcn("Walking0_ATRIAS3D_ZD_Output02_j", ["t", "q", "dq", "ControlStatePrev_StanceLeg", "ControlParamsPrev->Output.H0", "h_alpha", "ControlParamsPrev->Output.ThetaLimits", "ControlParamsPrev->Output.Theta.c0", "ControlParamsPrev->Output.Theta.ct", "ControlParamsPrev->Output.Theta.cq", "ControlParamsPrev->Output.SaturateS", "ControlParamsPrev->Output.UseCorrection", "ControlParamsPrev->Output.SMaxCorrection", "ControlParamsPrev->Output.HAlphaCorrection", "&unusedU9", "&unusedUa", "hd_posing", "y_prev"], 9, 28, 4))>;
        /* 'updateBasicWalkingControl04:155' ~ */
        /* 'updateBasicWalkingControl04:156' hd_prev = h0_prev - y_prev; */
        /* 'updateBasicWalkingControl04:157' Output.HAlpha = hd_prev*[1 1 1 1 1 1]; */
        for (i = 0; i < 6; i++) {
            hd_posing_0[i] = hd_posing[i] - y_prev[i];
        }
        for (i = 0; i < 6; i++) {
            for (i_0 = 0; i_0 < 6; i_0++) {
                Output->HAlpha[i + 6 * i_0] = hd_posing_0[i];
            }
        }
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Wal_updateBasicWalkingControl04(\
%assign comma = ""
%<comma>real_T t\
%assign comma = ", "
%if SLibCG_ArgAccessed(9, 28, 1)
%<comma>const real_T q[13]\
%assign comma = ", "
%endif
%<comma>const real_T dq[13]\
%assign comma = ", "
%<comma>real_T ControlState_ControllerMode\
%assign comma = ", "
%if SLibCG_ArgAccessed(9, 28, 4)
%<comma>real_T ControlState_StanceLeg\
%assign comma = ", "
%endif
%<comma>real_T ControlState_InDoubleSupport\
%assign comma = ", "
%<comma>real_T ControlState_StepCount\
%assign comma = ", "
%<comma>const ControlParamsBus *ControlParams\
%assign comma = ", "
%<comma>const OutputParamsBus AllOutputs[5]\
%assign comma = ", "
%<comma>real_T ControlStatePrev_ControllerMode\
%assign comma = ", "
%if SLibCG_ArgAccessed(9, 28, 10)
%<comma>real_T ControlStatePrev_StanceLeg\
%assign comma = ", "
%endif
%<comma>const ControlParamsBus *ControlParamsPrev\
%assign comma = ", "
%<comma>OutputParamsBus *Output\
%assign comma = ", "
%<comma>DiscreteParamsBus *Discrete\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 28, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElm_updateControl_Fcn29(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
OutputParamsBus b;
DiscreteParamsBus c;
%assign _modelSS = ""

/* MATLAB Function 'updateControl': '<S215>:112' */
/* '<S215>:112:3' ControlState.StepCount = TransitionStepCount + WalkingStepCount; */
Walking01_withElmos_B.ControlState.StepCount = Walking01_withElmos_DW.TransitionStepCount + Walking01_withElmos_DW.WalkingStepCount;
/* '<S215>:112:4' [ControlParams.Output, ControlParams.Discrete] = updateBasicWalkingControl04(t, q, dq, ControlState, ControlParams, AllOutputs, ControlStatePrev, ControlParamsPrev); */
%if SLibCG_FcnCallArgAccessed(9,29,0,0)
%<SLibCG_AccessArg(9 ,29, 0)>
%endif

%<(SLibCGCallSubFcn("Wal_updateBasicWalkingControl04", ["t", "Walking01_withElmos_B.q", "Walking01_withElmos_B.dq_clean", "Walking01_withElmos_B.ControlState.ControllerMode", "Walking01_withElmos_B.ControlState.StanceLeg", "Walking01_withElmos_B.ControlState.InDoubleSupport", "Walking01_withElmos_B.ControlState.StepCount", "&Walking01_withElmos_B.ControlParams", "Walking01_withElmos_B.VectorConcatenate", "Walking01_withElmos_DW.ControlStatePrev.ControllerMode", "Walking01_withElmos_DW.ControlStatePrev.StanceLeg", "&Walking01_withElmos_DW.ControlParamsPrev", "&b", "&c"], 9, 29, 0))>;
Walking01_withElmos_B.ControlParams.Output = b;
Walking01_withElmos_B.ControlParams.Discrete = c;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withElm_updateControl(\
%assign comma = ""
%<comma>real_T t\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 29, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walki_serializeControlParamsBus_Fcn30(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T i;
/* 'serializeControlParamsBus:3' if coder.target('MATLAB') */
/* 'serializeControlParamsBus:5' else */
/* 'serializeControlParamsBus:6' A = coder.nullcopy(zeros(476, 1)); */
/* 'serializeControlParamsBus:8' A(1) = S.Supervisory.EnableSwapOnKAAccel; */
A[0] = S->Supervisory.EnableSwapOnKAAccel;
/* 'serializeControlParamsBus:9' A(2) = S.Supervisory.EnableSwapOnKASpring; */
A[1] = S->Supervisory.EnableSwapOnKASpring;
/* 'serializeControlParamsBus:10' A(3) = S.Supervisory.EnableBackwardSwap; */
A[2] = S->Supervisory.EnableBackwardSwap;
/* 'serializeControlParamsBus:11' A(4) = S.Supervisory.ImpactThresholdKAAccel; */
A[3] = S->Supervisory.ImpactThresholdKAAccel;
/* 'serializeControlParamsBus:12' A(5) = S.Supervisory.ImpactThresholdKASpringAbs; */
A[4] = S->Supervisory.ImpactThresholdKASpringAbs;
/* 'serializeControlParamsBus:13' A(6) = S.Supervisory.ImpactThresholdKASpringRel; */
A[5] = S->Supervisory.ImpactThresholdKASpringRel;
/* 'serializeControlParamsBus:14' A(7) = S.Supervisory.SwapThresholdS; */
A[6] = S->Supervisory.SwapThresholdS;
/* 'serializeControlParamsBus:15' A(8) = S.Supervisory.AllowDoubleSupport; */
A[7] = S->Supervisory.AllowDoubleSupport;
/* 'serializeControlParamsBus:16' A(9) = S.Supervisory.UseGaitTransition; */
A[8] = S->Supervisory.UseGaitTransition;
/* 'serializeControlParamsBus:17' A(10) = S.Supervisory.NumTransitionSteps; */
A[9] = S->Supervisory.NumTransitionSteps;
/* 'serializeControlParamsBus:18' A(11) = S.Supervisory.TransitionThresholdTorsoVel; */
A[10] = S->Supervisory.TransitionThresholdTorsoVel;
/* 'serializeControlParamsBus:19' A(12:13) = S.Supervisory.KAInjection; */
A[11] = S->Supervisory.KAInjection[0];
A[12] = S->Supervisory.KAInjection[1];
/* 'serializeControlParamsBus:20' A(14) = S.Supervisory.MinDeltaThetaTransition; */
A[13] = S->Supervisory.MinDeltaThetaTransition;
/* 'serializeControlParamsBus:21' A(15) = S.Supervisory.StartSecondGaitOnStep; */
A[14] = S->Supervisory.StartSecondGaitOnStep;
/* 'serializeControlParamsBus:22' A(16:21) = S.Supervisory.VBLAParams; */
for (i = 0; i < 6; i++) {
    A[i + 15] = S->Supervisory.VBLAParams[i];
}
/* 'serializeControlParamsBus:23' A(22:34) = S.Supervisory.BalanceParams; */
for (i = 0; i < 13; i++) {
    A[i + 21] = S->Supervisory.BalanceParams[i];
}
/* 'serializeControlParamsBus:24' A(35:39) = S.Supervisory.GaitTweaks; */
for (i = 0; i < 5; i++) {
    A[i + 34] = S->Supervisory.GaitTweaks[i];
}
/* 'serializeControlParamsBus:25' A(40) = S.Supervisory.TStepInitial; */
A[39] = S->Supervisory.TStepInitial;
/* 'serializeControlParamsBus:26' A(41) = S.Supervisory.TMaxUpdate; */
A[40] = S->Supervisory.TMaxUpdate;
/* 'serializeControlParamsBus:27' A(42) = S.Supervisory.RunMode; */
A[41] = S->Supervisory.RunMode;
/* 'serializeControlParamsBus:28' A(43) = S.Supervisory.UseAbsoluteSwingLA; */
A[42] = S->Supervisory.UseAbsoluteSwingLA;
/* 'serializeControlParamsBus:29' A(44:49) = S.Supervisory.ErrorZeroFactor; */
for (i = 0; i < 6; i++) {
    A[i + 43] = S->Supervisory.ErrorZeroFactor[i];
}
/* 'serializeControlParamsBus:30' A(50:55) = S.Supervisory.ErrorVelZeroFactor; */
for (i = 0; i < 6; i++) {
    A[i + 49] = S->Supervisory.ErrorVelZeroFactor[i];
}
/* 'serializeControlParamsBus:31' A(56) = S.Supervisory.StanceLegInit; */
A[55] = S->Supervisory.StanceLegInit;
/* 'serializeControlParamsBus:32' A(57) = S.Supervisory.ControllerModeInit; */
A[56] = S->Supervisory.ControllerModeInit;
/* 'serializeControlParamsBus:33' A(58) = S.Supervisory.UsePosingControl; */
A[57] = S->Supervisory.UsePosingControl;
/* 'serializeControlParamsBus:34' A(59) = S.Supervisory.TPosing; */
A[58] = S->Supervisory.TPosing;
/* 'serializeControlParamsBus:35' A(60) = S.Supervisory.TorsoBackAngle; */
A[59] = S->Supervisory.TorsoBackAngle;
/* 'serializeControlParamsBus:36' A(61) = S.Supervisory.TorsoBackOnStep; */
A[60] = S->Supervisory.TorsoBackOnStep;
/* 'serializeControlParamsBus:37' A(62) = S.Supervisory.EnergyControlGain; */
A[61] = S->Supervisory.EnergyControlGain;
/* 'serializeControlParamsBus:38' A(63) = S.Supervisory.EnergyControlPhi0; */
A[62] = S->Supervisory.EnergyControlPhi0;
/* 'serializeControlParamsBus:39' A(64) = S.Supervisory.VelocityControlTorsoMax; */
A[63] = S->Supervisory.VelocityControlTorsoMax;
/* 'serializeControlParamsBus:40' A(65) = S.Supervisory.VelocityControlTorsoMin; */
A[64] = S->Supervisory.VelocityControlTorsoMin;
/* 'serializeControlParamsBus:41' A(66) = S.Supervisory.VelocityControlTorsoGain; */
A[65] = S->Supervisory.VelocityControlTorsoGain;
/* 'serializeControlParamsBus:42' A(67) = S.Supervisory.VelocityControlTorsoV0; */
A[66] = S->Supervisory.VelocityControlTorsoV0;
/* 'serializeControlParamsBus:43' A(68) = S.Supervisory.MinDeltaTheta; */
A[67] = S->Supervisory.MinDeltaTheta;
/* 'serializeControlParamsBus:44' A(69) = S.Supervisory.Theta0; */
A[68] = S->Supervisory.Theta0;
/* 'serializeControlParamsBus:45' A(70) = S.Supervisory.KThetaPlus; */
A[69] = S->Supervisory.KThetaPlus;
/* 'serializeControlParamsBus:46' A(71) = S.Supervisory.KThetaMinus; */
A[70] = S->Supervisory.KThetaMinus;
/* 'serializeControlParamsBus:47' A(72) = S.Supervisory.RollPhaseVelocityThresh; */
A[71] = S->Supervisory.RollPhaseVelocityThresh;
/* 'serializeControlParamsBus:48' A(73) = S.Supervisory.RollPhaseSThresh; */
A[72] = S->Supervisory.RollPhaseSThresh;
/* 'serializeControlParamsBus:49' A(74) = S.Supervisory.MaxError; */
A[73] = S->Supervisory.MaxError;
/* 'serializeControlParamsBus:50' A(75) = S.Supervisory.MaxErrorVel; */
A[74] = S->Supervisory.MaxErrorVel;
/* 'serializeControlParamsBus:51' A(76) = S.Supervisory.MaxErrorCount; */
A[75] = S->Supervisory.MaxErrorCount;
/* 'serializeControlParamsBus:52' A(77:82) = S.Supervisory.K1MidStanceUpdate; */
for (i = 0; i < 6; i++) {
    A[i + 76] = S->Supervisory.K1MidStanceUpdate[i];
}
/* 'serializeControlParamsBus:53' A(83:88) = S.Supervisory.K2MidStanceUpdate; */
for (i = 0; i < 6; i++) {
    A[i + 82] = S->Supervisory.K2MidStanceUpdate[i];
}
/* 'serializeControlParamsBus:54' A(89) = S.Supervisory.EnableVelocityBasedUpdate; */
A[88] = S->Supervisory.EnableVelocityBasedUpdate;
/* 'serializeControlParamsBus:55' A(90:95) = S.Supervisory.VelocityBasedUpdateK1; */
for (i = 0; i < 6; i++) {
    A[i + 89] = S->Supervisory.VelocityBasedUpdateK1[i];
}
/* 'serializeControlParamsBus:56' A(96:101) = S.Supervisory.VelocityBasedUpdateK2; */
for (i = 0; i < 6; i++) {
    A[i + 95] = S->Supervisory.VelocityBasedUpdateK2[i];
}
/* 'serializeControlParamsBus:57' A(102) = S.Supervisory.VelocityBasedUpdateDTheta0; */
A[101] = S->Supervisory.VelocityBasedUpdateDTheta0;
/* 'serializeControlParamsBus:58' A(103:114) = S.Supervisory.VelocityBasedUpdateLimits(:); */
for (i = 0; i < 12; i++) {
    A[102 + i] = S->Supervisory.VelocityBasedUpdateLimits[i];
}
/* 'serializeControlParamsBus:59' A(115) = S.Supervisory.DesiredYawOffset; */
A[114] = S->Supervisory.DesiredYawOffset;
/* 'serializeControlParamsBus:60' A(116) = S.Discrete.TLastUpdate; */
A[115] = S->Discrete.TLastUpdate;
/* 'serializeControlParamsBus:61' A(117) = S.Discrete.VelocityControlLADelta; */
A[116] = S->Discrete.VelocityControlLADelta;
/* 'serializeControlParamsBus:62' A(118) = S.Discrete.VelocityControlTorsoDelta; */
A[117] = S->Discrete.VelocityControlTorsoDelta;
/* 'serializeControlParamsBus:63' A(119) = S.Discrete.VelocityControlHipDistCur; */
A[118] = S->Discrete.VelocityControlHipDistCur;
/* 'serializeControlParamsBus:64' A(120) = S.Discrete.VelocityControlHipDistPrev; */
A[119] = S->Discrete.VelocityControlHipDistPrev;
/* 'serializeControlParamsBus:65' A(121) = S.Discrete.VirtualSpringMode; */
A[120] = S->Discrete.VirtualSpringMode;
/* 'serializeControlParamsBus:66' A(122) = S.Discrete.VirtualSpringStiffness; */
A[121] = S->Discrete.VirtualSpringStiffness;
/* 'serializeControlParamsBus:67' A(123) = S.Discrete.VirtualSpringDamping; */
A[122] = S->Discrete.VirtualSpringDamping;
/* 'serializeControlParamsBus:68' A(124) = S.Discrete.VirtualSpringModAmplitude; */
A[123] = S->Discrete.VirtualSpringModAmplitude;
/* 'serializeControlParamsBus:69' A(125) = S.Discrete.VirtualSpringModRate; */
A[124] = S->Discrete.VirtualSpringModRate;
/* 'serializeControlParamsBus:70' A(126) = S.Discrete.VirtualSpringRestPos; */
A[125] = S->Discrete.VirtualSpringRestPos;
/* 'serializeControlParamsBus:71' A(127:204) = S.Output.H0(:); */
for (i = 0; i < 78; i++) {
    A[126 + i] = S->Output.H0[i];
}
/* 'serializeControlParamsBus:72' A(205:240) = S.Output.HAlpha(:); */
for (i = 0; i < 36; i++) {
    A[204 + i] = S->Output.HAlpha[i];
}
/* 'serializeControlParamsBus:73' A(241:242) = S.Output.ThetaLimits; */
A[240] = S->Output.ThetaLimits[0];
A[241] = S->Output.ThetaLimits[1];
/* 'serializeControlParamsBus:74' A(243) = S.Output.Theta.c0; */
A[242] = S->Output.Theta.c0;
/* 'serializeControlParamsBus:75' A(244) = S.Output.Theta.ct; */
A[243] = S->Output.Theta.ct;
/* 'serializeControlParamsBus:76' A(245:257) = S.Output.Theta.cq; */
for (i = 0; i < 13; i++) {
    A[244 + i] = S->Output.Theta.cq[i];
}
/* 'serializeControlParamsBus:77' A(258) = S.Output.Theta.t0; */
A[257] = S->Output.Theta.t0;
/* 'serializeControlParamsBus:78' A(259:265) = S.Output.Theta.cz; */
for (i = 0; i < 7; i++) {
    A[258 + i] = S->Output.Theta.cz[i];
}
/* 'serializeControlParamsBus:79' A(266) = S.Output.SaturateS; */
A[265] = S->Output.SaturateS;
/* 'serializeControlParamsBus:80' A(267:268) = S.Output.SLimits; */
A[266] = S->Output.SLimits[0];
A[267] = S->Output.SLimits[1];
/* 'serializeControlParamsBus:81' A(269) = S.Output.EnforceIncreasingS; */
A[268] = S->Output.EnforceIncreasingS;
/* 'serializeControlParamsBus:82' A(270) = S.Output.UseCorrection; */
A[269] = S->Output.UseCorrection;
/* 'serializeControlParamsBus:83' A(271) = S.Output.SMaxCorrection; */
A[270] = S->Output.SMaxCorrection;
/* 'serializeControlParamsBus:84' A(272:301) = S.Output.HAlphaCorrection(:); */
for (i = 0; i < 30; i++) {
    A[271 + i] = S->Output.HAlphaCorrection[i];
}
/* 'serializeControlParamsBus:85' A(302) = S.Output.Phi.c0; */
A[301] = S->Output.Phi.c0;
/* 'serializeControlParamsBus:86' A(303:315) = S.Output.Phi.cq; */
for (i = 0; i < 13; i++) {
    A[302 + i] = S->Output.Phi.cq[i];
}
/* 'serializeControlParamsBus:87' A(316:335) = S.Output.PhiAlpha; */
for (i = 0; i < 20; i++) {
    A[315 + i] = S->Output.PhiAlpha[i];
}
/* 'serializeControlParamsBus:88' A(336) = S.Output.SaturateR; */
A[335] = S->Output.SaturateR;
/* 'serializeControlParamsBus:89' A(337:338) = S.Output.RLimits; */
A[336] = S->Output.RLimits[0];
A[337] = S->Output.RLimits[1];
/* 'serializeControlParamsBus:90' A(339:368) = S.Output.HBarAlpha(:); */
for (i = 0; i < 30; i++) {
    A[338 + i] = S->Output.HBarAlpha[i];
}
/* 'serializeControlParamsBus:91' A(369:380) = S.Output.HBarLimits(:); */
for (i = 0; i < 12; i++) {
    A[368 + i] = S->Output.HBarLimits[i];
}
/* 'serializeControlParamsBus:92' A(381:416) = S.Output.HAlphaStar(:); */
for (i = 0; i < 36; i++) {
    A[380 + i] = S->Output.HAlphaStar[i];
}
/* 'serializeControlParamsBus:93' A(417) = S.Output.YawLimit; */
A[416] = S->Output.YawLimit;
/* 'serializeControlParamsBus:94' A(418:423) = S.Feedback.kp; */
for (i = 0; i < 6; i++) {
    A[i + 417] = S->Feedback.kp[i];
}
/* 'serializeControlParamsBus:95' A(424:429) = S.Feedback.kd; */
for (i = 0; i < 6; i++) {
    A[i + 423] = S->Feedback.kd[i];
}
/* 'serializeControlParamsBus:96' A(430:431) = S.Feedback.epsilon; */
A[429] = S->Feedback.epsilon[0];
A[430] = S->Feedback.epsilon[1];
/* 'serializeControlParamsBus:97' A(432:433) = S.Feedback.kff_grav; */
A[431] = S->Feedback.kff_grav[0];
A[432] = S->Feedback.kff_grav[1];
/* 'serializeControlParamsBus:98' A(434) = S.Feedback.delta_grav; */
A[433] = S->Feedback.delta_grav;
/* 'serializeControlParamsBus:99' A(435:436) = S.Feedback.kff_decoup; */
A[434] = S->Feedback.kff_decoup[0];
A[435] = S->Feedback.kff_decoup[1];
/* 'serializeControlParamsBus:100' A(437:438) = S.Feedback.kd_torso; */
A[436] = S->Feedback.kd_torso[0];
A[437] = S->Feedback.kd_torso[1];
/* 'serializeControlParamsBus:101' A(439) = S.Feedback.kp_2dof; */
A[438] = S->Feedback.kp_2dof;
/* 'serializeControlParamsBus:102' A(440) = S.Feedback.kd_2dof; */
A[439] = S->Feedback.kd_2dof;
/* 'serializeControlParamsBus:103' A(441) = S.Feedback.kpre_2dof; */
A[440] = S->Feedback.kpre_2dof;
/* 'serializeControlParamsBus:104' A(442) = S.Feedback.kp_lat; */
A[441] = S->Feedback.kp_lat;
/* 'serializeControlParamsBus:105' A(443) = S.Feedback.kd_lat; */
A[442] = S->Feedback.kd_lat;
/* 'serializeControlParamsBus:106' A(444) = S.Feedback.q3d_min_lat; */
A[443] = S->Feedback.q3d_min_lat;
/* 'serializeControlParamsBus:107' A(445) = S.Feedback.q3d_max_lat; */
A[444] = S->Feedback.q3d_max_lat;
/* 'serializeControlParamsBus:108' A(446) = S.Feedback.w_torso_lat; */
A[445] = S->Feedback.w_torso_lat;
/* 'serializeControlParamsBus:109' A(447:452) = S.Feedback.u_ff; */
for (i = 0; i < 6; i++) {
    A[i + 446] = S->Feedback.u_ff[i];
}
/* 'serializeControlParamsBus:110' A(453) = S.Feedback.LateralControlMode; */
A[452] = S->Feedback.LateralControlMode;
/* 'serializeControlParamsBus:111' A(454) = S.Feedback.DecouplingMode; */
A[453] = S->Feedback.DecouplingMode;
/* 'serializeControlParamsBus:112' A(455) = S.Feedback.Use2DOF; */
A[454] = S->Feedback.Use2DOF;
/* 'serializeControlParamsBus:113' A(456) = S.Feedback.UseDSGravComp; */
A[455] = S->Feedback.UseDSGravComp;
/* 'serializeControlParamsBus:114' A(457) = S.Feedback.lat_bias; */
A[456] = S->Feedback.lat_bias;
/* 'serializeControlParamsBus:115' A(458) = S.Feedback.lat_bias2; */
A[457] = S->Feedback.lat_bias2;
/* 'serializeControlParamsBus:116' A(459) = S.Feedback.linkFeedback; */
A[458] = S->Feedback.linkFeedback;
/* 'serializeControlParamsBus:117' A(460) = S.Feedback.RIO; */
A[459] = S->Feedback.RIO;
/* 'serializeControlParamsBus:118' A(461) = S.Feedback.SelectFeedforward; */
A[460] = S->Feedback.SelectFeedforward;
/* 'serializeControlParamsBus:119' A(462:467) = S.Feedback.FeedforwardGain; */
for (i = 0; i < 6; i++) {
    A[i + 461] = S->Feedback.FeedforwardGain[i];
}
/* 'serializeControlParamsBus:120' A(468) = S.Feedback.EnableFeedforwardOnStep; */
A[467] = S->Feedback.EnableFeedforwardOnStep;
/* 'serializeControlParamsBus:121' A(469) = S.Saturation.UseQPSaturation; */
A[468] = S->Saturation.UseQPSaturation;
/* 'serializeControlParamsBus:122' A(470:471) = S.Saturation.QPWeight; */
A[469] = S->Saturation.QPWeight[0];
A[470] = S->Saturation.QPWeight[1];
/* 'serializeControlParamsBus:123' A(472) = S.Saturation.UseKASaturation; */
A[471] = S->Saturation.UseKASaturation;
/* 'serializeControlParamsBus:124' A(473) = S.Saturation.KASaturationS1; */
A[472] = S->Saturation.KASaturationS1;
/* 'serializeControlParamsBus:125' A(474) = S.Saturation.KASaturationS2; */
A[473] = S->Saturation.KASaturationS2;
/* 'serializeControlParamsBus:126' A(475) = S.Saturation.KASaturationEarly; */
A[474] = S->Saturation.KASaturationEarly;
/* 'serializeControlParamsBus:127' A(476) = S.Saturation.KASaturationMax; */
A[475] = S->Saturation.KASaturationMax;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walki_serializeControlParamsBus(\
%assign comma = ""
%<comma>const ControlParamsBus *S\
%assign comma = ", "
%<comma>real_T A[476]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 30, fcnProtoType)>
%return fcnBuff
%endfunction

%function rt_roundd_snf_Fcn31(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T y;
if (fabs(u) < 4.503599627370496E+15) {
    if (u >= 0.5) {
        y = floor(u + 0.5);
    } else if (u > -0.5) {
        y = u * 0.0;
    } else {
        y = ceil(u - 0.5);
    }
} else {
    y = u;
}
return y;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
extern real_T rt_roundd_snf(\
%assign comma = ""
%<comma>real_T u\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 31, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_initSerial_Fcn32(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T tmp;
int32_T i;
/* MATLAB Function 'initSerial': '<S215>:258' */
/* '<S215>:258:2' if (SerialBufferEnd~=SerialBufferBegin || SerialIdx==0) */
if ((Walking01_withElmos_DW.SerialBufferEnd != Walking01_withElmos_DW.SerialBufferBegin) || (Walking01_withElmos_DW.SerialIdx == 0.0)) {
    /* temp = serializeControlParamsBus(ControlParams); */
    /* SerialBuffer(:,SerialBufferEnd) = [(15:-1:0)'; length(temp); t; temp]; */
    /* '<S215>:258:5' SerialBuffer(1:16,SerialBufferEnd)  = (15:-1:0)'; */
    tmp = (int32_T)Walking01_withElmos_DW.SerialBufferEnd;
    for (i = 0; i < 16; i++) {
        Walking01_withElmos_DW.SerialBuffer[i + 494 * (tmp - 1)] = 15.0 - (real_T)i;
    }
    /* '<S215>:258:6' SerialBuffer(17, SerialBufferEnd)   = SERIAL_BUFFER_LENGTH - 18; */
    Walking01_withElmos_DW.SerialBuffer[16 + 494 * ((int32_T)Walking01_withElmos_DW.SerialBufferEnd - 1)] = %<(SLibCG_SE(SLibCGIR_PV(158, 0, 39, 1, "", -1, "", 0)))> - 18.0;
    /*  18 = SYNC_LENGTH + 2 */
    /* '<S215>:258:7' SerialBuffer(18, SerialBufferEnd)   = t; */
    Walking01_withElmos_DW.SerialBuffer[17 + 494 * ((int32_T)Walking01_withElmos_DW.SerialBufferEnd - 1)] = t;
    /* '<S215>:258:8' SerialBuffer(19:end, SerialBufferEnd) = serializeControlParamsBus(ControlParams); */
    %<(SLibCGCallSubFcn("Walki_serializeControlParamsBus", ["&Walking01_withElmos_B.ControlParams", "*(real_T (*)[476])&Walking01_withElmos_DW.SerialBuffer[18 + 494 * ((int32_T)Walking01_withElmos_DW.SerialBufferEnd - 1)]"], 9, 32, 0))>;
    /* '<S215>:258:10' SerialBufferEnd = mod(SerialBufferEnd,SERIAL_BUFFER_WIDTH)+1; */
    if (!(%<(SLibCG_SE(SLibCGIR_PV(159, 0, 39, 1, "", -1, "", 0)))> == 0.0)) {
        if (%<(SLibCG_SE(SLibCGIR_PV(159, 0, 39, 1, "", -1, "", 0)))> == floor(%<(SLibCGIR_PV(159, 0, 39, 1, "", -1, "", 0))>)) {
            Walking01_withElmos_DW.SerialBufferEnd -= floor(Walking01_withElmos_DW.SerialBufferEnd / %<(SLibCG_SE(SLibCGIR_PV(159, 0, 39, 1, "", -1, "", 0)))>) * %<(SLibCG_SE(SLibCGIR_PV(159, 0, 39, 1, "", -1, "", 0)))>;
        } else {
            Walking01_withElmos_DW.SerialBufferEnd /= %<(SLibCG_SE(SLibCGIR_PV(159, 0, 39, 1, "", -1, "", 0)))>;
            if (fabs(Walking01_withElmos_DW.SerialBufferEnd - %<(SLibCGCallSubFcn("rt_roundd_snf", ["Walking01_withElmos_DW.SerialBufferEnd"], 9, 32, 1))>) <= 2.2204460492503131E-16 * fabs(Walking01_withElmos_DW.SerialBufferEnd)) {
                Walking01_withElmos_DW.SerialBufferEnd = 0.0;
            } else {
                Walking01_withElmos_DW.SerialBufferEnd = (Walking01_withElmos_DW.SerialBufferEnd - floor(Walking01_withElmos_DW.SerialBufferEnd)) * %<(SLibCG_SE(SLibCGIR_PV(159, 0, 39, 1, "", -1, "", 0)))>;
            }
        }
    }
    Walking01_withElmos_DW.SerialBufferEnd++;
    /* '<S215>:258:11' if (SerialIdx==0) */
    if (Walking01_withElmos_DW.SerialIdx == 0.0) {
        /* '<S215>:258:12' SerialIdx = SERIAL_BUFFER_LENGTH; */
        Walking01_withElmos_DW.SerialIdx = %<(SLibCG_SE(SLibCGIR_PV(158, 0, 39, 1, "", -1, "", 0)))>;
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withElmos_initSerial(\
%assign comma = ""
%<comma>real_T t\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 32, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_sendSerial_Fcn33(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
boolean_T InitiallyActive;
int32_T k;
/* MATLAB Function 'sendSerial': '<S215>:256' */
/* '<S215>:256:2' if (t > tLastSend) */
if (t > Walking01_withElmos_DW.tLastSend) {
    /* '<S215>:256:3' InitiallyActive = (SerialIdx>0); */
    InitiallyActive = (Walking01_withElmos_DW.SerialIdx > 0.0);
    /* '<S215>:256:4' for k=1:SERIAL_WIDTH */
    for (k = 0; k < (int32_T)%<(SLibCG_SE(SLibCGIR_PV(160, 0, 39, 1, "", -1, "", 0)))>; k++) {
        /* '<S215>:256:5' if (SerialIdx>0) */
        if (Walking01_withElmos_DW.SerialIdx > 0.0) {
            /* '<S215>:256:6' SerialOut(k) = SerialBuffer(SERIAL_BUFFER_LENGTH-SerialIdx+1, SerialBufferBegin); */
            Walking01_withElmos_B.SerialOut[k] = Walking01_withElmos_DW.SerialBuffer[((int32_T)((%<(SLibCG_SE(SLibCGIR_PV(158, 0, 39, 1, "", -1, "", 0)))> - Walking01_withElmos_DW.SerialIdx) + 1.0) + ((int32_T)Walking01_withElmos_DW.SerialBufferBegin - 1) * 494) - 1];
            /* '<S215>:256:7' SerialIdx = SerialIdx-1; */
            Walking01_withElmos_DW.SerialIdx--;
        } else {
            /* '<S215>:256:8' else */
            /* '<S215>:256:9' SerialOut(k) = 0; */
            Walking01_withElmos_B.SerialOut[k] = 0.0;
        }
    }
    /* '<S215>:256:12' if (InitiallyActive && SerialIdx==0) */
    if (InitiallyActive && (Walking01_withElmos_DW.SerialIdx == 0.0)) {
        /* '<S215>:256:13' SerialBufferBegin = mod(SerialBufferBegin,SERIAL_BUFFER_WIDTH)+1; */
        if (!(%<(SLibCG_SE(SLibCGIR_PV(159, 0, 39, 1, "", -1, "", 0)))> == 0.0)) {
            if (%<(SLibCG_SE(SLibCGIR_PV(159, 0, 39, 1, "", -1, "", 0)))> == floor(%<(SLibCGIR_PV(159, 0, 39, 1, "", -1, "", 0))>)) {
                Walking01_withElmos_DW.SerialBufferBegin -= floor(Walking01_withElmos_DW.SerialBufferBegin / %<(SLibCG_SE(SLibCGIR_PV(159, 0, 39, 1, "", -1, "", 0)))>) * %<(SLibCG_SE(SLibCGIR_PV(159, 0, 39, 1, "", -1, "", 0)))>;
            } else {
                Walking01_withElmos_DW.SerialBufferBegin /= %<(SLibCG_SE(SLibCGIR_PV(159, 0, 39, 1, "", -1, "", 0)))>;
                if (fabs(Walking01_withElmos_DW.SerialBufferBegin - %<(SLibCGCallSubFcn("rt_roundd_snf", ["Walking01_withElmos_DW.SerialBufferBegin"], 9, 33, 0))>) <= 2.2204460492503131E-16 * fabs(Walking01_withElmos_DW.SerialBufferBegin)) {
                    Walking01_withElmos_DW.SerialBufferBegin = 0.0;
                } else {
                    Walking01_withElmos_DW.SerialBufferBegin = (Walking01_withElmos_DW.SerialBufferBegin - floor(Walking01_withElmos_DW.SerialBufferBegin)) * %<(SLibCG_SE(SLibCGIR_PV(159, 0, 39, 1, "", -1, "", 0)))>;
                }
            }
        }
        Walking01_withElmos_DW.SerialBufferBegin++;
        /* '<S215>:256:14' if (SerialBufferEnd~=SerialBufferBegin) */
        if (Walking01_withElmos_DW.SerialBufferEnd != Walking01_withElmos_DW.SerialBufferBegin) {
            /* '<S215>:256:15' SerialIdx = SERIAL_BUFFER_LENGTH; */
            Walking01_withElmos_DW.SerialIdx = %<(SLibCG_SE(SLibCGIR_PV(158, 0, 39, 1, "", -1, "", 0)))>;
        }
    }
    /* '<S215>:256:18' tLastSend = t; */
    Walking01_withElmos_DW.tLastSend = t;
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withElmos_sendSerial(\
%assign comma = ""
%<comma>real_T t\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 33, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_Serialize_Fcn34(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
/* During 'Serialize': '<S215>:235' */
if (Walking01_withElmos_DW.is_active_ControlStatus != 0U) {
    /* During 'ControlStatus': '<S215>:236' */
    switch (Walking01_withElmos_DW.is_ControlStatus) {
      case Walking01_withElmos_IN_Changed:
        /* During 'Changed': '<S215>:241' */
        /* Transition: '<S215>:240' */
        Walking01_withElmos_DW.is_ControlStatus = Walking01_withElmo_IN_Unchanged;
        break;
      case Walking01_withElmo_IN_Unchanged:
        /* During 'Unchanged': '<S215>:242' */
        if (Walking01_withElmos_DW.sfEvent == Walking01_w_event_ControlUpdate) {
            /* Transition: '<S215>:238' */
            Walking01_withElmos_DW.is_ControlStatus = Walking01_withElmos_IN_Changed;
        } else {
            if (Walking01_withElmos_B.FixPtRelationalOperator) {
                /* Transition: '<S215>:239' */
                Walking01_withElmos_DW.is_ControlStatus = Walking01_withElmos_IN_Changed;
            }
        }
        break;
      default:
        Walking01_withElmos_DW.is_ControlStatus = Walking01__IN_NO_ACTIVE_CHILD_j;
        break;
    }
}
if (Walking01_withElmos_DW.is_active_SerialState != 0U) {
    /* During 'SerialState': '<S215>:243' */
    switch (Walking01_withElmos_DW.is_SerialState) {
      case Walking01_withElmos_IN_Idle:
        /* During 'Idle': '<S215>:253' */
        /* Transition: '<S215>:249' */
        if (Walking01_withElmos_DW.is_ControlStatus == Walking01_withElmos_IN_Changed) {
            /* Transition: '<S215>:250' */
            /* Transition: '<S215>:251' */
            Walking01_withElmos_DW.is_SerialState = Walking01_withElmo_IN_Running_e;
            /* Entry 'Running': '<S215>:252' */
            %<(SLibCGCallSubFcn("Walking01_withElmos_initSerial", ["%<RTMGetTaskTimeForTID(0)>"], 9, 34, 0))>;
            %<(SLibCGCallSubFcn("Walking01_withElmos_sendSerial", ["%<RTMGetTaskTimeForTID(0)>"], 9, 34, 1))>;
        }
        break;
      case Walking01_withElmo_IN_Running_e:
        /* During 'Running': '<S215>:252' */
        /* Transition: '<S215>:248' */
        if (Walking01_withElmos_DW.is_ControlStatus == Walking01_withElmos_IN_Changed) {
            /* Transition: '<S215>:250' */
            /* Transition: '<S215>:251' */
            Walking01_withElmos_DW.is_SerialState = Walking01_withElmo_IN_Running_e;
            /* Entry 'Running': '<S215>:252' */
            %<(SLibCGCallSubFcn("Walking01_withElmos_initSerial", ["%<RTMGetTaskTimeForTID(0)>"], 9, 34, 4))>;
            %<(SLibCGCallSubFcn("Walking01_withElmos_sendSerial", ["%<RTMGetTaskTimeForTID(0)>"], 9, 34, 5))>;
        } else if (Walking01_withElmos_DW.SerialIdx == 0.0) {
            /* Transition: '<S215>:247' */
            Walking01_withElmos_DW.is_SerialState = Walking01_withElmos_IN_Idle;
            /* Entry 'Idle': '<S215>:253' */
            %<(SLibCGCallSubFcn("Walking01_withElmos_sendSerial", ["%<RTMGetTaskTimeForTID(0)>"], 9, 34, 3))>;
        } else {
            %<(SLibCGCallSubFcn("Walking01_withElmos_sendSerial", ["%<RTMGetTaskTimeForTID(0)>"], 9, 34, 2))>;
        }
        break;
      default:
        Walking01_withElmos_DW.is_SerialState = Walking01__IN_NO_ACTIVE_CHILD_j;
        break;
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withElmos_Serialize(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 34, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walkin_ATRIAS3D_ZD_Output03_c0j_Fcn35(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T s;
real_T c[15];
real_T ds;
real_T dsdq[13];
real_T theta;
real_T dtheta;
real_T delta_theta;
real_T b;
real_T e;
static const int8_T g[13] = { 0, 1, 2, 5, 6, 3, 4, 10, 11, 12, 7, 8, 9 };
int32_T i;
int32_T loop_ub;
int32_T d_data;
int32_T d_sizes[2];
%assign _modelSS = ""

/* 'ATRIAS3D_ZD_Output03:4' Output = ControlParams.Output; */
/*  Define matrix to convert between motor and standard actuated coordinates */
/*  [uLAst; uLAsw; uKAst; uKAsw; u3st; u3sw] = T0*[u1R; u2R; u3R; u1L; u2L; u3L] */
/* 'ATRIAS3D_ZD_Output03:8' T0 = [0.5 0.5 0 0 0 0; 0 0 0 0.5 0.5 0; -1 1 0 0 0 0; 0 0 0 -1 1 0; 0 0 1 0 0 0; 0 0 0 0 0 1]; */
/* 'ATRIAS3D_ZD_Output03:9' if (ControlState.StanceLeg==1) */
/* 'ATRIAS3D_ZD_Output03:12' T1 = [zeros(6,7) T0]; */
/*     %<"\%\% Compute s and modify Bezier parameters to extend outside 0 <= s <= 1"> */
/* [Sy,Sq] = SymmetryMatrices(); */
/* 'ATRIAS3D_ZD_Output03:16' if (ControlState.StanceLeg==0) */
if (ControlState_StanceLeg == 0.0) {
    /* 'ATRIAS3D_ZD_Output03:17' c = [Output.Theta.c0 Output.Theta.ct Output.Theta.cq]; */
    c[0] = ControlParams->Output.Theta.c0;
    c[1] = ControlParams->Output.Theta.ct;
    for (i = 0; i < 13; i++) {
        c[i + 2] = ControlParams->Output.Theta.cq[i];
    }
    /* 'ATRIAS3D_ZD_Output03:18' jacob_h0 = Output.H0; */
} else {
    /* 'ATRIAS3D_ZD_Output03:19' else */
    /* 'ATRIAS3D_ZD_Output03:20' c = [Output.Theta.c0 Output.Theta.ct Output.Theta.cq(:,[1 2 3 6 7 4 5 11 12 13 8 9 10])]; */
    c[0] = ControlParams->Output.Theta.c0;
    c[1] = ControlParams->Output.Theta.ct;
    for (i = 0; i < 13; i++) {
        c[i + 2] = ControlParams->Output.Theta.cq[g[i]];
    }
    /* 'ATRIAS3D_ZD_Output03:21' c(:,3:4) = -c(:,3:4); */
    c[2] = -c[2];
    c[3] = -c[3];
    /* 'ATRIAS3D_ZD_Output03:22' jacob_h0 = Output.H0(:,[1 2 3 6 7 4 5 11 12 13 8 9 10]); */
    /* 'ATRIAS3D_ZD_Output03:23' jacob_h0(:,1:2) = -jacob_h0(:,1:2); */
}
/* 'ATRIAS3D_ZD_Output03:27' [s,ds,dsdq,theta,dtheta,delta_theta] = ATRIAS3D_ZD_s6(t-Output.Theta.t0, q, dq, Output.ThetaLimits, c); */
%if SLibCG_FcnCallArgAccessed(9,35,0,0)
%<SLibCG_AccessArg(9 ,35, 0)>
%<SLibCG_AccessArg(9 ,35, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(9,35,0,1)
%<SLibCG_AccessArg(9 ,35, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(9,35,0,2)
%<SLibCG_AccessArg(9 ,35, 2)>
%endif
%if SLibCG_FcnCallArgAccessed(9,35,0,3)
%<SLibCG_AccessArg(9 ,35, 4)>
%endif

%<(SLibCGCallSubFcn("Walking01_with_ATRIAS3D_ZD_s6_b", ["t - ControlParams->Output.Theta.t0", "q", "dq", "ControlParams->Output.ThetaLimits", "c", "&s", "&ds", "dsdq", "&theta", "&dtheta", "&delta_theta"], 9, 35, 0))>;
/* 'ATRIAS3D_ZD_Output03:28' s_unsaturated = s; */
/* 'ATRIAS3D_ZD_Output03:30' if (Output.EnforceIncreasingS) */
if ((ControlParams->Output.EnforceIncreasingS != 0.0) && (!(s >= %<LibGetMathConstant(LibRealNonFinite("-inf"), FcnGetDataTypeIdFromName("double"))>))) {
    /* 'ATRIAS3D_ZD_Output03:31' s = max(s, sprev); */
    s = %<LibGetMathConstant(LibRealNonFinite("-inf"), FcnGetDataTypeIdFromName("double"))>;
}
/* 'ATRIAS3D_ZD_Output03:34' h_alpha = Output.HAlpha; */
/* 'ATRIAS3D_ZD_Output03:35' if (ControlState.StanceLeg==1) */
/* 'ATRIAS3D_ZD_Output03:39' if Output.SaturateS==1 */
if (ControlParams->Output.SaturateS == 1.0) {
    /* delta = 0.2; */
    /* p = [0.2  -0.4  0.2  0]; %<"\% coefficients of transition poly"> */
    /* [s, ds] = softsaturate(s, ds, delta, p); */
    /*  Modified Feb. 4th, 2014 for interpolative bezier table bounds. */
    /* 'ATRIAS3D_ZD_Output03:44' delta = 0.1; */
    /* 'ATRIAS3D_ZD_Output03:45' ds(s>1+delta) = 0; */
    /* 'ATRIAS3D_ZD_Output03:46' s(s>1+delta) = 1+delta; */
    b = s;
    %<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_en", ["s > 1.1", "&d_data", "d_sizes"], 9, 35, 3))>;
    loop_ub = d_sizes[0] * d_sizes[1];
    for (i = 0; i < loop_ub; i++) {
        b = 1.1;
    }
    /* 'ATRIAS3D_ZD_Output03:47' ds(s<-delta) = 0; */
    /* 'ATRIAS3D_ZD_Output03:48' s(s<-delta) = -delta; */
    e = b;
    %<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_en", ["b < -0.1", "&d_data", "d_sizes"], 9, 35, 4))>;
    loop_ub = d_sizes[0] * d_sizes[1];
    for (i = 0; i < loop_ub; i++) {
        e = -0.1;
    }
    s = e;
} else if ((!(ControlParams->Output.SaturateS == 2.0)) && (ControlParams->Output.SaturateS == 3.0)) {
    /* 'ATRIAS3D_ZD_Output03:70' elseif Output.SaturateS==3 */
    /* 'ATRIAS3D_ZD_Output03:71' smin = Output.SLimits(1); */
    /* 'ATRIAS3D_ZD_Output03:72' smax = Output.SLimits(2); */
    /* 'ATRIAS3D_ZD_Output03:73' ds(s>smax) = 0; */
    /* 'ATRIAS3D_ZD_Output03:74' s(s>smax)  = smax; */
    b = s;
%if SLibCG_FcnCallArgAccessed(9,35,1,0)
%<SLibCG_AccessArg(9 ,35, 4)>
%endif

    %<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_en", ["s > ControlParams->Output.SLimits[1]", "&d_data", "d_sizes"], 9, 35, 1))>;
    loop_ub = d_sizes[0] * d_sizes[1];
    for (i = 0; i < loop_ub; i++) {
        b = ControlParams->Output.SLimits[1];
    }
    /* 'ATRIAS3D_ZD_Output03:75' ds(s<smin) = 0; */
    /* 'ATRIAS3D_ZD_Output03:76' s(s<smin)  = smin; */
    e = b;
%if SLibCG_FcnCallArgAccessed(9,35,2,0)
%<SLibCG_AccessArg(9 ,35, 4)>
%endif

    %<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_en", ["b < ControlParams->Output.SLimits[0]", "&d_data", "d_sizes"], 9, 35, 2))>;
    loop_ub = d_sizes[0] * d_sizes[1];
    for (i = 0; i < loop_ub; i++) {
        e = ControlParams->Output.SLimits[0];
    }
    s = e;
} else {
    /* 'ATRIAS3D_ZD_Output03:64' h_alpha(s6>1,:) = h_alpha_high(s6>1,:); */
    /*  If (s<0), hold all desired angles constant */
    /* 'ATRIAS3D_ZD_Output03:67' h_alpha_low = h_alpha(:,1)*[1 1 1 1 1 1]; */
    /* 'ATRIAS3D_ZD_Output03:68' h_alpha(s6<0,:) = h_alpha_low(s6<0,:); */
    /* 'ATRIAS3D_ZD_Output03:50' elseif Output.SaturateS==2 */
    /* 'ATRIAS3D_ZD_Output03:51' if (length(s)>1) */
    /* 'ATRIAS3D_ZD_Output03:54' else */
    /* 'ATRIAS3D_ZD_Output03:55' dqyTds = repmat((c(1,5)*delta_theta), 2, 1); */
    /* 'ATRIAS3D_ZD_Output03:56' s6 = repmat(s, 6, 1); */
    /*  If (s>1), hold the desired knee angles constant and keep the */
    /*  torso angle fixed by decreasing the desired leg angles */
    /* 'ATRIAS3D_ZD_Output03:61' h_alpha_high = h_alpha(:,end)*[1 1 1 1 1 1]; */
    /* 'ATRIAS3D_ZD_Output03:62' h_alpha_high(1:2,:) = h_alpha_high(1:2,:)+dqyTds*(-1:0.2:0); */
    /* 'ATRIAS3D_ZD_Output03:63' h_alpha_high(1:2) = max(150*pi/180, h_alpha_high(1:2)); */
}
/*     %<"\%\% Compute terms in controller"> */
/* 'ATRIAS3D_ZD_Output03:80' qmod = q; */
/* 'ATRIAS3D_ZD_Output03:81' qmod(1) = sat(qmod(1), -Output.YawLimit, Output.YawLimit); */
/* 'ATRIAS3D_ZD_Output03:82' h0 = jacob_h0*qmod; */
/* 'ATRIAS3D_ZD_Output03:83' hd = bezierv(h_alpha, s); */
/* 'ATRIAS3D_ZD_Output03:84' jacob_hd  = beziervd(h_alpha,s); */
/* 'ATRIAS3D_ZD_Output03:85' jacob2_hd = bezierva(h_alpha,s); */
/* 'ATRIAS3D_ZD_Output03:86' dhd = jacob_hd.*ds; */
/* 'ATRIAS3D_ZD_Output03:88' jacob_h = jacob_h0 - jacob_hd*dsdq; */
/* 'ATRIAS3D_ZD_Output03:89' jacob_jacobhdqdq = -jacob2_hd.*(ds.*ds); */
/*     %<"\%\% Stabilizing output term"> */
/*  Allow outputs of the form */
/*    y = H0*q - hd(s(theta(q)), h_alpha) - hStabilizing(phi - phid(s(theta(q))), StabilizingHAlpha) */
/* 'ATRIAS3D_ZD_Output03:95' phi    = Output.Phi.cq * q; */
/* 'ATRIAS3D_ZD_Output03:96' dphi   = Output.Phi.cq * dq; */
/* 'ATRIAS3D_ZD_Output03:98' phid   = bezier(Output.PhiAlpha, s); */
/* 'ATRIAS3D_ZD_Output03:99' jacob_phid = bezierd(Output.PhiAlpha, s); */
/* 'ATRIAS3D_ZD_Output03:100' jacob2_phid = beziera(Output.PhiAlpha, s); */
/* 'ATRIAS3D_ZD_Output03:102' r      = phi - phid; */
/* 'ATRIAS3D_ZD_Output03:103' dr     = dphi - jacob_phid * ds; */
/* 'ATRIAS3D_ZD_Output03:104' RSaturated = false; */
/* 'ATRIAS3D_ZD_Output03:105' if Output.SaturateR */
/* 'ATRIAS3D_ZD_Output03:117' hdbar  = polyv(Output.HBarAlpha, r, inf); */
/* 'ATRIAS3D_ZD_Output03:118' if ~RSaturated */
/* 'ATRIAS3D_ZD_Output03:126' hdbar = sat(hdbar, Output.HBarLimits(:,1), Output.HBarLimits(:,2)); */
/* 'ATRIAS3D_ZD_Output03:127' idxsat = (hdbar == Output.HBarLimits(:,1)) | (hdbar == Output.HBarLimits(:,2)); */
/* 'ATRIAS3D_ZD_Output03:128' jacob_hdbar(idxsat,:) = 0; */
/* 'ATRIAS3D_ZD_Output03:129' jacob2_hdbar(idxsat,:) = 0; */
/* 'ATRIAS3D_ZD_Output03:131' hd = hd + hdbar; */
/* 'ATRIAS3D_ZD_Output03:132' jacob_h = jacob_h - jacob_hdbar * (Output.Phi.cq - jacob_phid * dsdq); */
/* 'ATRIAS3D_ZD_Output03:133' jacob_jacobhdqdq = jacob_jacobhdqdq ... */
/* 'ATRIAS3D_ZD_Output03:134'         + jacob_hdbar * jacob2_phid * ds^2 ... */
/* 'ATRIAS3D_ZD_Output03:135'         + jacob2_hdbar * (-jacob_phid^2 * ds^2 - dphi^2 + jacob_phid * dphi * ds); */
/*     %<"\%\% Saturate the desired leg/knee/hip angles"> */
/* 'ATRIAS3D_ZD_Output03:138' hd_min = [150; 150;  15;  15; -20; -20]*pi/180; */
/* 'ATRIAS3D_ZD_Output03:139' hd_max = [220; 220; 120; 120;  20;  20]*pi/180; */
/* 'ATRIAS3D_ZD_Output03:140' sat_correction = (jacob_h0 - T1)*q; */
/* 'ATRIAS3D_ZD_Output03:141' hd = sat(hd, hd_min + sat_correction, hd_max + sat_correction); */
/* 'ATRIAS3D_ZD_Output03:142' idxsat = (hd == hd_min + sat_correction) | (hd == hd_max + sat_correction); */
/* 'ATRIAS3D_ZD_Output03:143' dhd(idxsat) = 0; */
/* 'ATRIAS3D_ZD_Output03:144' jacob_h(idxsat) = jacob_h0(idxsat); */
/*  jacob_hd(idxsat) = 0; */
/*     %<"\%\%"> */
/* 'ATRIAS3D_ZD_Output03:147' y  = h0-hd; */
/* 'ATRIAS3D_ZD_Output03:148' dy = jacob_h0*dq - dhd; */
/*  Correction */
/* 'ATRIAS3D_ZD_Output03:152' h_alpha_corr = Output.HAlphaCorrection; */
/* 'ATRIAS3D_ZD_Output03:153' s_corr_max = Output.SMaxCorrection; */
/* 'ATRIAS3D_ZD_Output03:154' if Output.UseCorrection && any(s <= s_corr_max) */
return s;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static real_T Walkin_ATRIAS3D_ZD_Output03_c0j(\
%assign comma = ""
%<comma>real_T t\
%assign comma = ", "
%<comma>const real_T q[13]\
%assign comma = ", "
%<comma>const real_T dq[13]\
%assign comma = ", "
%<comma>real_T ControlState_StanceLeg\
%assign comma = ", "
%<comma>const ControlParamsBus *ControlParams\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 35, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_checkError_Fcn36(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
boolean_T error;
%assign _modelSS = ""

/* MATLAB Function 'checkError': '<S215>:217' */
/*  Default */
/* '<S215>:217:4' error = false; */
error = false;
/* '<S215>:217:6' sprev = -inf; */
/* '<S215>:217:7' s = ATRIAS3D_ZD_Output03(t, q, dq, ControlState, ControlParams, sprev); */
%if SLibCG_FcnCallArgAccessed(9,36,0,0)
%<SLibCG_AccessArg(9 ,36, 0)>
%endif

Walking01_withElmos_DW.s = %<(SLibCGCallSubFcn("Walkin_ATRIAS3D_ZD_Output03_c0j", ["t", "Walking01_withElmos_B.q", "Walking01_withElmos_B.dq_clean", "Walking01_withElmos_B.ControlState.StanceLeg", "&Walking01_withElmos_B.ControlParams"], 9, 36, 0))>;
/* '<S215>:217:9' if (s > 0.65) */
if (Walking01_withElmos_DW.s > 0.65) {
    /* '<S215>:217:10' error = true; */
    error = true;
}
return error;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static boolean_T Walking01_withElmos_checkError(\
%assign comma = ""
%<comma>real_T t\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 36, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withEl_ControllerMode_Fcn37(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T b_previousEvent;
boolean_T guard1 = false;
/* During 'ControllerMode': '<S215>:71' */
switch (Walking01_withElmos_DW.is_ControllerMode) {
  case Walking01_withElmo_IN_Injection:
    /* During 'Injection': '<S215>:79' */
    if (Walking01_withElmos_DW.temporalCounter_i2 >= (uint32_T)ceil(Walking01_withElmos_B.ControlParams.Supervisory.TStepInitial / 0.0005 - 5.0000000000000005E-12)) {
        /* Transition: '<S215>:104' */
        /* Transition: '<S215>:225' */
        if (%<(SLibCGCallSubFcn("Walking01_withE_checkTransition", [], 9, 37, 0))>) {
            /* Transition: '<S215>:168' */
            /* Transition: '<S215>:223' */
            /* Transition: '<S215>:96' */
            Walking01_withElmos_DW.is_ControllerMode = Walking01_withElmos_IN_Walking;
            /* Entry 'Walking': '<S215>:81' */
            Walking01_withElmos_B.ControlState.ControllerMode = 4.0;
            %<(SLibCGCallSubFcn("Walking01_withElm_updateControl", ["%<RTMGetTaskTimeForTID(0)>"], 9, 37, 6))>;
            b_previousEvent = Walking01_withElmos_DW.sfEvent;
            Walking01_withElmos_DW.sfEvent = Walking01_w_event_ControlUpdate;
            if (Walking01_withElmos_DW.is_active_Serialize != 0U) {
                %<(SLibCGCallSubFcn("Walking01_withElmos_Serialize", [], 9, 37, 7))>;
            }
            Walking01_withElmos_DW.sfEvent = b_previousEvent;
        } else {
            /* Transition: '<S215>:170' */
            /* Transition: '<S215>:172' */
            Walking01_withElmos_DW.is_ControllerMode = Walking01_withElm_IN_Transition;
            /* Entry 'Transition': '<S215>:80' */
            Walking01_withElmos_B.ControlState.ControllerMode = 3.0;
            %<(SLibCGCallSubFcn("Walking01_withElm_updateControl", ["%<RTMGetTaskTimeForTID(0)>"], 9, 37, 4))>;
            b_previousEvent = Walking01_withElmos_DW.sfEvent;
            Walking01_withElmos_DW.sfEvent = Walking01_w_event_ControlUpdate;
            if (Walking01_withElmos_DW.is_active_Serialize != 0U) {
                %<(SLibCGCallSubFcn("Walking01_withElmos_Serialize", [], 9, 37, 5))>;
            }
            Walking01_withElmos_DW.sfEvent = b_previousEvent;
            /* Entry Internal 'Transition': '<S215>:80' */
            /* Transition: '<S215>:179' */
            if (Walking01_withElmos_DW.is_Transition != Walking01_withElmos_IN_Early) {
                Walking01_withElmos_DW.is_Transition = Walking01_withElmos_IN_Early;
                Walking01_withElmos_DW.temporalCounter_i2 = 0U;
            }
        }
    }
    break;
  case Walking01_withElmos_IN_Posing:
    /* During 'Posing': '<S215>:72' */
    /* Transition: '<S215>:91' */
    /* Transition: '<S215>:92' */
    if ((Walking01_withElmos_B.EnableTransition == 2.0) && %<(SLibCGCallSubFcn("Walking01_withE_checkTransition", [], 9, 37, 1))>) {
        /* Transition: '<S215>:93' */
        Walking01_withElmos_DW.is_ControllerMode = Walking01_withElmo_IN_Injection;
        Walking01_withElmos_DW.temporalCounter_i2 = 0U;
        /* Entry 'Injection': '<S215>:79' */
        Walking01_withElmos_B.ControlState.ControllerMode = 2.0;
        %<(SLibCGCallSubFcn("Walking01_withElm_updateControl", ["%<RTMGetTaskTimeForTID(0)>"], 9, 37, 11))>;
        b_previousEvent = Walking01_withElmos_DW.sfEvent;
        Walking01_withElmos_DW.sfEvent = Walking01_w_event_ControlUpdate;
        if (Walking01_withElmos_DW.is_active_Serialize != 0U) {
            %<(SLibCGCallSubFcn("Walking01_withElmos_Serialize", [], 9, 37, 12))>;
        }
        Walking01_withElmos_DW.sfEvent = b_previousEvent;
    } else if (Walking01_withElmos_B.EnableTransition == 4.0) {
        /* Transition: '<S215>:94' */
        /* Transition: '<S215>:223' */
        /* Transition: '<S215>:96' */
        Walking01_withElmos_DW.is_ControllerMode = Walking01_withElmos_IN_Walking;
        /* Entry 'Walking': '<S215>:81' */
        Walking01_withElmos_B.ControlState.ControllerMode = 4.0;
        %<(SLibCGCallSubFcn("Walking01_withElm_updateControl", ["%<RTMGetTaskTimeForTID(0)>"], 9, 37, 9))>;
        b_previousEvent = Walking01_withElmos_DW.sfEvent;
        Walking01_withElmos_DW.sfEvent = Walking01_w_event_ControlUpdate;
        if (Walking01_withElmos_DW.is_active_Serialize != 0U) {
            %<(SLibCGCallSubFcn("Walking01_withElmos_Serialize", [], 9, 37, 10))>;
        }
        Walking01_withElmos_DW.sfEvent = b_previousEvent;
    } else {
        if (Walking01_withElmos_DW.temporalCounter_i2 >= 300U) {
            /* Transition: '<S215>:103' */
            Walking01_withElmos_DW.is_ControllerMode = Walking01_withElmos_IN_Posing;
            Walking01_withElmos_DW.temporalCounter_i2 = 0U;
            /* Entry 'Posing': '<S215>:72' */
            Walking01_withElmos_B.ControlState.ControllerMode = 1.0;
            %<(SLibCGCallSubFcn("Walking01_withElm_updateControl", ["%<RTMGetTaskTimeForTID(0)>"], 9, 37, 8))>;
        }
    }
    break;
  case Walking01_withElm_IN_Transition:
    /* During 'Transition': '<S215>:80' */
    if (Walking01_withElmos_DW.sfEvent == Walking01_withElm_event_LegSwap) {
        /* Transition: '<S215>:101' */
        Walking01_withElmos_DW.TransitionStepCount++;
        if (%<(SLibCGCallSubFcn("Walking01_withE_checkTransition", [], 9, 37, 2))>) {
            /* Transition: '<S215>:168' */
            /* Transition: '<S215>:223' */
            /* Transition: '<S215>:96' */
            /* Exit Internal 'Transition': '<S215>:80' */
            Walking01_withElmos_DW.is_Transition = Walking01__IN_NO_ACTIVE_CHILD_j;
            Walking01_withElmos_DW.is_ControllerMode = Walking01_withElmos_IN_Walking;
            /* Entry 'Walking': '<S215>:81' */
            Walking01_withElmos_B.ControlState.ControllerMode = 4.0;
            %<(SLibCGCallSubFcn("Walking01_withElm_updateControl", ["%<RTMGetTaskTimeForTID(0)>"], 9, 37, 17))>;
            b_previousEvent = Walking01_withElmos_DW.sfEvent;
            Walking01_withElmos_DW.sfEvent = Walking01_w_event_ControlUpdate;
            if (Walking01_withElmos_DW.is_active_Serialize != 0U) {
                %<(SLibCGCallSubFcn("Walking01_withElmos_Serialize", [], 9, 37, 18))>;
            }
            Walking01_withElmos_DW.sfEvent = b_previousEvent;
        } else {
            /* Transition: '<S215>:170' */
            /* Transition: '<S215>:172' */
            /* Exit Internal 'Transition': '<S215>:80' */
            Walking01_withElmos_DW.is_Transition = Walking01__IN_NO_ACTIVE_CHILD_j;
            Walking01_withElmos_DW.is_ControllerMode = Walking01_withElm_IN_Transition;
            /* Entry 'Transition': '<S215>:80' */
            Walking01_withElmos_B.ControlState.ControllerMode = 3.0;
            %<(SLibCGCallSubFcn("Walking01_withElm_updateControl", ["%<RTMGetTaskTimeForTID(0)>"], 9, 37, 15))>;
            b_previousEvent = Walking01_withElmos_DW.sfEvent;
            Walking01_withElmos_DW.sfEvent = Walking01_w_event_ControlUpdate;
            if (Walking01_withElmos_DW.is_active_Serialize != 0U) {
                %<(SLibCGCallSubFcn("Walking01_withElmos_Serialize", [], 9, 37, 16))>;
            }
            Walking01_withElmos_DW.sfEvent = b_previousEvent;
            /* Entry Internal 'Transition': '<S215>:80' */
            /* Transition: '<S215>:179' */
            if (Walking01_withElmos_DW.is_Transition != Walking01_withElmos_IN_Early) {
                Walking01_withElmos_DW.is_Transition = Walking01_withElmos_IN_Early;
                Walking01_withElmos_DW.temporalCounter_i2 = 0U;
            }
        }
    } else if (Walking01_withElmos_DW.sfEvent == Walking01_withE_event_LegImpact) {
        /* Transition: '<S215>:166' */
        /* Exit Internal 'Transition': '<S215>:80' */
        Walking01_withElmos_DW.is_Transition = Walking01__IN_NO_ACTIVE_CHILD_j;
        Walking01_withElmos_DW.is_ControllerMode = Walking01_withElm_IN_Transition;
        /* Entry 'Transition': '<S215>:80' */
        Walking01_withElmos_B.ControlState.ControllerMode = 3.0;
        %<(SLibCGCallSubFcn("Walking01_withElm_updateControl", ["%<RTMGetTaskTimeForTID(0)>"], 9, 37, 13))>;
        b_previousEvent = Walking01_withElmos_DW.sfEvent;
        Walking01_withElmos_DW.sfEvent = Walking01_w_event_ControlUpdate;
        if (Walking01_withElmos_DW.is_active_Serialize != 0U) {
            %<(SLibCGCallSubFcn("Walking01_withElmos_Serialize", [], 9, 37, 14))>;
        }
        Walking01_withElmos_DW.sfEvent = b_previousEvent;
        /* Entry Internal 'Transition': '<S215>:80' */
        /* Transition: '<S215>:179' */
        if (Walking01_withElmos_DW.is_Transition != Walking01_withElmos_IN_Early) {
            Walking01_withElmos_DW.is_Transition = Walking01_withElmos_IN_Early;
            Walking01_withElmos_DW.temporalCounter_i2 = 0U;
        }
    } else {
        switch (Walking01_withElmos_DW.is_Transition) {
          case Walking01_withElmos_IN_Early:
            /* During 'Early': '<S215>:181' */
            if (Walking01_withElmos_DW.temporalCounter_i2 >= 200U) {
                /* Transition: '<S215>:185' */
                Walking01_withElmos_DW.is_Transition = Walking01_withElmos_IN_Late;
            }
            break;
          case Walking01_withElmos_IN_Late:
            /* During 'Late': '<S215>:182' */
            break;
          default:
            Walking01_withElmos_DW.is_Transition = Walking01__IN_NO_ACTIVE_CHILD_j;
            break;
        }
    }
    break;
  case Walking01_withElmos_IN_Walking:
    /* During 'Walking': '<S215>:81' */
    if (Walking01_withElmos_DW.sfEvent == Walking01_withElm_event_LegSwap) {
        /* Transition: '<S215>:99' */
        Walking01_withElmos_DW.WalkingStepCount++;
        if (%<(SLibCGCallSubFcn("Walking01_withElmos_checkError", ["%<RTMGetTaskTimeForTID(0)>"], 9, 37, 3))>) {
            /* Transition: '<S215>:194' */
            /* Transition: '<S215>:215' */
            /* Exit Internal 'Run': '<S215>:27' */
            /* Exit Internal 'Stage': '<S215>:114' */
            Walking01_withElmos_DW.is_Stage = Walking01__IN_NO_ACTIVE_CHILD_j;
            Walking01_withElmos_DW.is_active_Stage = 0U;
            /* Exit Internal 'ControllerMode': '<S215>:71' */
            Walking01_withElmos_DW.is_ControllerMode = Walking01__IN_NO_ACTIVE_CHILD_j;
            /* Exit Internal 'Transition': '<S215>:80' */
            Walking01_withElmos_DW.is_Transition = Walking01__IN_NO_ACTIVE_CHILD_j;
            Walking01_withElmos_DW.is_active_ControllerMode = 0U;
            /* Exit Internal 'Support': '<S215>:31' */
            Walking01_withElmos_DW.is_Support = Walking01__IN_NO_ACTIVE_CHILD_j;
            Walking01_withElmos_DW.is_active_Support = 0U;
            Walking01_withElmos_DW.is_Main = Walking01_withElmos_IN_Error_a;
            /* Entry 'Error': '<S215>:192' */
            Walking01_withElmos_B.ControlState.Error = 1.0;
        } else {
            /* Transition: '<S215>:213' */
            guard1 = true;
        }
    } else {
        if (Walking01_withElmos_DW.sfEvent == Walking01_withE_event_LegImpact) {
            /* Transition: '<S215>:100' */
            guard1 = true;
        }
    }
    break;
  default:
    Walking01_withElmos_DW.is_ControllerMode = Walking01__IN_NO_ACTIVE_CHILD_j;
    break;
}
if (guard1) {
    /* Transition: '<S215>:212' */
    /* Transition: '<S215>:211' */
    Walking01_withElmos_DW.is_ControllerMode = Walking01_withElmos_IN_Walking;
    /* Entry 'Walking': '<S215>:81' */
    Walking01_withElmos_B.ControlState.ControllerMode = 4.0;
    %<(SLibCGCallSubFcn("Walking01_withElm_updateControl", ["%<RTMGetTaskTimeForTID(0)>"], 9, 37, 19))>;
    b_previousEvent = Walking01_withElmos_DW.sfEvent;
    Walking01_withElmos_DW.sfEvent = Walking01_w_event_ControlUpdate;
    if (Walking01_withElmos_DW.is_active_Serialize != 0U) {
        %<(SLibCGCallSubFcn("Walking01_withElmos_Serialize", [], 9, 37, 20))>;
    }
    Walking01_withElmos_DW.sfEvent = b_previousEvent;
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withEl_ControllerMode(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 37, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withE_updateLegAngles_Fcn38(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T w;
real_T DeltaH[6];
real_T c;
real_T maxval[6];
static const real_T b[6] = { 0.0, 0.2, 0.4, 0.6, 0.8, 1.0 };
int32_T i;
real_T tmp[36];
int32_T i_0;
real_T DeltaH_0;
real_T y;
/* MATLAB Function 'updateLegAngles': '<S215>:122' */
/* '<S215>:122:4' if (ControlState.ControllerMode==4) */
if ((Walking01_withElmos_B.ControlState.ControllerMode == 4.0) && (!(Walking01_withElmos_DW.s > 0.9))) {
    /*  BASIC WALKING */
    /* '<S215>:122:5' sprev = -1000; */
    /* [s,ds,h0,y,dy,jacob_h0,jacob_h,s_unsaturated,theta,dtheta] = ATRIAS3D_ZD_Output03(t, q, dq, ControlState, ControlParams, sprev); */
    /* '<S215>:122:8' if s>0.9 */
    /* '<S215>:122:12' if phase==2 */
    if (phase == 2.0) {
        /* '<S215>:122:13' ControlParams.Discrete.TLastUpdate = t; */
        Walking01_withElmos_B.ControlParams.Discrete.TLastUpdate = t;
    } else {
        if (phase == 3.0) {
            /* '<S215>:122:15' elseif phase==3 */
            /* dtheta = (pi/2 - ControlParams.Output.ThetaLimits(1)); */
            /* if dtheta<0 */
            /*     return */
            /* end */
            /* '<S215>:122:20' dtheta = (1.6 - 1.5)/(t - ControlParams.Discrete.TLastUpdate); */
            /* '<S215>:122:22' w = dtheta - ControlParams.Supervisory.VelocityBasedUpdateDTheta0; */
            w = 0.10000000000000009 / (t - Walking01_withElmos_B.ControlParams.Discrete.TLastUpdate) - Walking01_withElmos_B.ControlParams.Supervisory.VelocityBasedUpdateDTheta0;
            /* '<S215>:122:23' DeltaH = ControlParams.Supervisory.VelocityBasedUpdateK1 * w ... */
            /* '<S215>:122:24'                 + ControlParams.Supervisory.VelocityBasedUpdateK2 * w^2; */
            c = w * w;
            /* '<S215>:122:26' DeltaH = sat(DeltaH, ControlParams.Supervisory.VelocityBasedUpdateLimits(:,1), ControlParams.Supervisory.VelocityBasedUpdateLimits(:,2)); */
            /* 'sat:3' y = max(lo, min(x, hi)); */
            /*  Ramp from the current s value */
            /* '<S215>:122:29' DeltaHAlpha = DeltaH * max(0, ([0 0.2 0.4 0.6 0.8 1] - s)/(1-s) ); */
            for (i = 0; i < 6; i++) {
                DeltaH_0 = Walking01_withElmos_B.ControlParams.Supervisory.VelocityBasedUpdateK1[i] * w + Walking01_withElmos_B.ControlParams.Supervisory.VelocityBasedUpdateK2[i] * c;
                if (!((DeltaH_0 <= Walking01_withElmos_B.ControlParams.Supervisory.VelocityBasedUpdateLimits[6 + i]) || rtIsNaN(Walking01_withElmos_B.ControlParams.Supervisory.VelocityBasedUpdateLimits[6 + i]))) {
                    DeltaH_0 = Walking01_withElmos_B.ControlParams.Supervisory.VelocityBasedUpdateLimits[6 + i];
                }
                y = (b[i] - Walking01_withElmos_DW.s) / (1.0 - Walking01_withElmos_DW.s);
                if ((0.0 >= y) || rtIsNaN(y)) {
                    maxval[i] = 0.0;
                } else {
                    maxval[i] = y;
                }
                if ((Walking01_withElmos_B.ControlParams.Supervisory.VelocityBasedUpdateLimits[i] >= DeltaH_0) || rtIsNaN(DeltaH_0)) {
                    DeltaH[i] = Walking01_withElmos_B.ControlParams.Supervisory.VelocityBasedUpdateLimits[i];
                } else {
                    DeltaH[i] = DeltaH_0;
                }
            }
            /* '<S215>:122:30' ControlParams.Output.HAlpha = ControlParams.Output.HAlpha + DeltaHAlpha; */
            for (i = 0; i < 6; i++) {
                for (i_0 = 0; i_0 < 6; i_0++) {
                    tmp[i + 6 * i_0] = Walking01_withElmos_B.ControlParams.Output.HAlpha[6 * i_0 + i] + DeltaH[i] * maxval[i_0];
                }
            }
            for (i = 0; i < 36; i++) {
                Walking01_withElmos_B.ControlParams.Output.HAlpha[i] = tmp[i];
            }
        }
    }
    /*     %<"\%{"> */
    /*     if (ControlState.ControllerMode==3) */
    /*         [theta_limits, h_alpha] = updateVelocityBased(t,q,dq,stance_leg,theta_limits,h_alpha,theta_limits_nom,h_alpha_nom,select_control,vcm,vdes,VBLAOptions); */
    /*          */
    /*         %<"\%[theta_limits_transition, alpha_transition] = robustUpdate(phase, RobustUpdateMode, t, q, dq, s, ds, stance_leg, stance_leg_prev, hd_posing, theta_limits_nom, h_alpha_nom, tStepInitial, tStep, qTdesired, vdes, step_params, ETA_VPP, kpFootPlacement, kdFootPlacement, select_control, theta_limits_transition, alpha_transition, RunMode, outputParams, h_alpha_update_params);"> */
    /*          */
    /*         uk = 0; */
    /*          */
    /*         %<"\% Update the desired swing leg angle by adding a ramp d(s) satisfying"> */
    /*         %<"\%   d(s_update) = 0"> */
    /*         %<"\%   d(1)   = uk"> */
    /*         %<"\% Note that these conditions imply that"> */
    /*         %<"\%   d(0)   = -uk*s_update/(1-s_update)"> */
    /*         s_update = 0.5; %<"\%sprev;"> */
    /*         d0 = -uk*s_update/(1-s_update); */
    /*         d1 = uk; */
    /*         d_alpha = (0:0.2:1)*(d1-d0)+d0; */
    /*          */
    /*         h_alpha(2,:) = h_alpha(2,:) + d_alpha; */
    /*          */
    /*     end */
    /*     %<"\%}"> */
} else {
    /*     %<"\%{"> */
    /*     if (ControlState.ControllerMode==3) */
    /*         [theta_limits, h_alpha] = updateVelocityBased(t,q,dq,stance_leg,theta_limits,h_alpha,theta_limits_nom,h_alpha_nom,select_control,vcm,vdes,VBLAOptions); */
    /*          */
    /*         %<"\%[theta_limits_transition, alpha_transition] = robustUpdate(phase, RobustUpdateMode, t, q, dq, s, ds, stance_leg, stance_leg_prev, hd_posing, theta_limits_nom, h_alpha_nom, tStepInitial, tStep, qTdesired, vdes, step_params, ETA_VPP, kpFootPlacement, kdFootPlacement, select_control, theta_limits_transition, alpha_transition, RunMode, outputParams, h_alpha_update_params);"> */
    /*          */
    /*         uk = 0; */
    /*          */
    /*         %<"\% Update the desired swing leg angle by adding a ramp d(s) satisfying"> */
    /*         %<"\%   d(s_update) = 0"> */
    /*         %<"\%   d(1)   = uk"> */
    /*         %<"\% Note that these conditions imply that"> */
    /*         %<"\%   d(0)   = -uk*s_update/(1-s_update)"> */
    /*         s_update = 0.5; %<"\%sprev;"> */
    /*         d0 = -uk*s_update/(1-s_update); */
    /*         d1 = uk; */
    /*         d_alpha = (0:0.2:1)*(d1-d0)+d0; */
    /*          */
    /*         h_alpha(2,:) = h_alpha(2,:) + d_alpha; */
    /*          */
    /*     end */
    /*     %<"\%}"> */
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withE_updateLegAngles(\
%assign comma = ""
%<comma>real_T t\
%assign comma = ", "
%<comma>real_T phase\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 38, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_Run_Fcn39(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T b_previousEvent;
/* During 'Run': '<S215>:27' */
if (Walking01_withElmos_B.ResetControl > 0.0) {
    /* Transition: '<S215>:29' */
    /* Exit Internal 'Run': '<S215>:27' */
    /* Exit Internal 'Stage': '<S215>:114' */
    Walking01_withElmos_DW.is_Stage = Walking01__IN_NO_ACTIVE_CHILD_j;
    Walking01_withElmos_DW.is_active_Stage = 0U;
    /* Exit Internal 'ControllerMode': '<S215>:71' */
    Walking01_withElmos_DW.is_ControllerMode = Walking01__IN_NO_ACTIVE_CHILD_j;
    /* Exit Internal 'Transition': '<S215>:80' */
    Walking01_withElmos_DW.is_Transition = Walking01__IN_NO_ACTIVE_CHILD_j;
    Walking01_withElmos_DW.is_active_ControllerMode = 0U;
    /* Exit Internal 'Support': '<S215>:31' */
    Walking01_withElmos_DW.is_Support = Walking01__IN_NO_ACTIVE_CHILD_j;
    Walking01_withElmos_DW.is_active_Support = 0U;
    Walking01_withElmos_DW.is_Main = Walking01_withElmos_IN_Reset;
    /* Entry 'Reset': '<S215>:28' */
    Walking01_withElmos_B.ControlState.ControllerMode = 0.0;
    Walking01_withElmos_B.ControlState.SupportState = 0.0;
    Walking01_withElmos_B.ControlState.StanceLeg = 0.0;
    Walking01_withElmos_B.ControlState.InDoubleSupport = 0.0;
    Walking01_withElmos_B.ControlState.Error = 0.0;
} else {
    Walking01_withElmos_B.ControlParams.Supervisory = Walking01_withElmos_B.BusConversion_InsertedFor_State.Supervisory;
    Walking01_withElmos_B.ControlParams.Feedback = Walking01_withElmos_B.BusConversion_InsertedFor_State.Feedback;
    Walking01_withElmos_B.ControlParams.Saturation = Walking01_withElmos_B.BusConversion_InsertedFor_State.Saturation;
    Walking01_withElmos_DW.ControlParamsPrev = Walking01_withElmos_B.ControlParams;
    Walking01_withElmos_DW.ControlStatePrev = Walking01_withElmos_B.ControlState;
    %<(SLibCGCallSubFcn("Walking01_withElmos_updateS", ["%<RTMGetTaskTimeForTID(0)>"], 9, 39, 6))>;
    if (Walking01_withElmos_DW.is_active_Support != 0U) {
        /* During 'Support': '<S215>:31' */
        switch (Walking01_withElmos_DW.is_Support) {
          case Walking01_withElm_IN_LeftDouble:
            /* During 'LeftDouble': '<S215>:38' */
            if ((Walking01_withElmos_DW.temporalCounter_i1 >= (uint32_T)ceil(%<(SLibCG_SE(SLibCGIR_PV(121, 0, 39, 1, "", -1, "", 0)))> / 0.0005 - 5.0000000000000005E-12)) && (%<(SLibCGCallSubFcn("Walking01_withElmo_checkSupport", ["Walking01_withElmos_B.ControlState.StanceLeg"], 9, 39, 0))> == 0.0)) {
                /* Transition: '<S215>:68' */
                /* Transition: '<S215>:152' */
                Walking01_withElmos_DW.is_Support = Walking01_withEl_IN_RightSingle;
                Walking01_withElmos_DW.temporalCounter_i1 = 0U;
                %<(SLibCGCallSubFcn("Walkin_enter_atomic_RightSingle", [], 9, 39, 7))>;
            }
            break;
          case Walking01_withElm_IN_LeftSingle:
            /* During 'LeftSingle': '<S215>:36' */
            if ((Walking01_withElmos_DW.temporalCounter_i1 >= (uint32_T)ceil(%<(SLibCG_SE(SLibCGIR_PV(161, 0, 39, 1, "", -1, "", 0)))> / 0.0005 - 5.0000000000000005E-12)) && %<(SLibCGCallSubFcn("Walking01_withElmos_checkMode", [], 9, 39, 1))>) {
                /* Transition: '<S215>:67' */
                Walking01_withElmos_DW.is_Support = Walking01_withElmos_IN_LeftWait;
                /* Entry 'LeftWait': '<S215>:37' */
                Walking01_withElmos_B.ControlState.SupportState = 5.0;
            }
            break;
          case Walking01_withElmos_IN_LeftWait:
            /* During 'LeftWait': '<S215>:37' */
            if (%<(SLibCGCallSubFcn("Walking01_withElmos_checkImpact", [], 9, 39, 2))>) {
                /* Transition: '<S215>:66' */
                if (Walking01_withElmos_B.ControlParams.Supervisory.AllowDoubleSupport == 1.0) {
                    /* Transition: '<S215>:148' */
                    Walking01_withElmos_DW.is_Support = Walking01_withElm_IN_LeftDouble;
                    Walking01_withElmos_DW.temporalCounter_i1 = 0U;
                    /* Entry 'LeftDouble': '<S215>:38' */
                    Walking01_withElmos_B.ControlState.SupportState = 6.0;
                    Walking01_withElmos_B.ControlState.InDoubleSupport = 1.0;
                    b_previousEvent = Walking01_withElmos_DW.sfEvent;
                    Walking01_withElmos_DW.sfEvent = Walking01_withE_event_LegImpact;
                    if (Walking01_withElmos_DW.is_Main == Walking01_withElmos_IN_Run_k) {
                        %<(SLibCGCallSubFcn("Walking01_withElmos_Run", [], 9, 39, 9))>;
                    }
                    Walking01_withElmos_DW.sfEvent = b_previousEvent;
                } else {
                    /* Transition: '<S215>:150' */
                    /* Transition: '<S215>:151' */
                    /* Transition: '<S215>:152' */
                    Walking01_withElmos_DW.is_Support = Walking01_withEl_IN_RightSingle;
                    Walking01_withElmos_DW.temporalCounter_i1 = 0U;
                    %<(SLibCGCallSubFcn("Walkin_enter_atomic_RightSingle", [], 9, 39, 8))>;
                }
            }
            break;
          case Walking01_withEl_IN_RightDouble:
            /* During 'RightDouble': '<S215>:34' */
            if ((Walking01_withElmos_DW.temporalCounter_i1 >= (uint32_T)ceil(%<(SLibCG_SE(SLibCGIR_PV(121, 0, 39, 1, "", -1, "", 0)))> / 0.0005 - 5.0000000000000005E-12)) && (%<(SLibCGCallSubFcn("Walking01_withElmo_checkSupport", ["Walking01_withElmos_B.ControlState.StanceLeg"], 9, 39, 3))> == 0.0)) {
                /* Transition: '<S215>:65' */
                /* Transition: '<S215>:142' */
                Walking01_withElmos_DW.is_Support = Walking01_withElm_IN_LeftSingle;
                Walking01_withElmos_DW.temporalCounter_i1 = 0U;
                %<(SLibCGCallSubFcn("Walking_enter_atomic_LeftSingle", [], 9, 39, 10))>;
            }
            break;
          case Walking01_withEl_IN_RightSingle:
            /* During 'RightSingle': '<S215>:32' */
            if ((Walking01_withElmos_DW.temporalCounter_i1 >= (uint32_T)ceil(%<(SLibCG_SE(SLibCGIR_PV(161, 0, 39, 1, "", -1, "", 0)))> / 0.0005 - 5.0000000000000005E-12)) && %<(SLibCGCallSubFcn("Walking01_withElmos_checkMode", [], 9, 39, 4))>) {
                /* Transition: '<S215>:63' */
                Walking01_withElmos_DW.is_Support = Walking01_withElmo_IN_RightWait;
                /* Entry 'RightWait': '<S215>:33' */
                Walking01_withElmos_B.ControlState.SupportState = 2.0;
            }
            break;
          case Walking01_withElmo_IN_RightWait:
            /* During 'RightWait': '<S215>:33' */
            if (%<(SLibCGCallSubFcn("Walking01_withElmos_checkImpact", [], 9, 39, 5))>) {
                /* Transition: '<S215>:64' */
                if (Walking01_withElmos_B.ControlParams.Supervisory.AllowDoubleSupport == 1.0) {
                    /* Transition: '<S215>:136' */
                    Walking01_withElmos_DW.is_Support = Walking01_withEl_IN_RightDouble;
                    Walking01_withElmos_DW.temporalCounter_i1 = 0U;
                    /* Entry 'RightDouble': '<S215>:34' */
                    Walking01_withElmos_B.ControlState.SupportState = 3.0;
                    Walking01_withElmos_B.ControlState.InDoubleSupport = 1.0;
                    b_previousEvent = Walking01_withElmos_DW.sfEvent;
                    Walking01_withElmos_DW.sfEvent = Walking01_withE_event_LegImpact;
                    if (Walking01_withElmos_DW.is_Main == Walking01_withElmos_IN_Run_k) {
                        %<(SLibCGCallSubFcn("Walking01_withElmos_Run", [], 9, 39, 12))>;
                    }
                    Walking01_withElmos_DW.sfEvent = b_previousEvent;
                } else {
                    /* Transition: '<S215>:138' */
                    /* Transition: '<S215>:141' */
                    /* Transition: '<S215>:142' */
                    Walking01_withElmos_DW.is_Support = Walking01_withElm_IN_LeftSingle;
                    Walking01_withElmos_DW.temporalCounter_i1 = 0U;
                    %<(SLibCGCallSubFcn("Walking_enter_atomic_LeftSingle", [], 9, 39, 11))>;
                }
            }
            break;
          default:
            Walking01_withElmos_DW.is_Support = Walking01__IN_NO_ACTIVE_CHILD_j;
            break;
        }
    }
    if (Walking01_withElmos_DW.is_Main == Walking01_withElmos_IN_Run_k) {
        if (Walking01_withElmos_DW.is_active_ControllerMode != 0U) {
            %<(SLibCGCallSubFcn("Walking01_withEl_ControllerMode", [], 9, 39, 13))>;
        }
        if (!((Walking01_withElmos_DW.is_Main != Walking01_withElmos_IN_Run_k) || (Walking01_withElmos_DW.is_active_Stage == 0U))) {
            /* During 'Stage': '<S215>:114' */
            switch (Walking01_withElmos_DW.is_Stage) {
              case Walking01_withElmos_IN_Early:
                /* During 'Early': '<S215>:115' */
                if ((Walking01_withElmos_DW.is_ControllerMode == Walking01_withElmos_IN_Walking) && (Walking01_withElmos_DW.theta >= 1.5) && (Walking01_withElmos_B.ControlParams.Supervisory.EnableVelocityBasedUpdate != 0.0)) {
                    /* Transition: '<S215>:120' */
                    Walking01_withElmos_DW.is_Stage = Walking01_withElmos_IN_Mid;
                    /* Entry 'Mid': '<S215>:261' */
                    Walking01_withElmos_B.ControlState.RollPhase = 2.0;
                    %<(SLibCGCallSubFcn("Walking01_withE_updateLegAngles", ["%<RTMGetTaskTimeForTID(0)>", "2.0"], 9, 39, 14))>;
                    b_previousEvent = Walking01_withElmos_DW.sfEvent;
                    Walking01_withElmos_DW.sfEvent = Walking01_w_event_ControlUpdate;
                    if (Walking01_withElmos_DW.is_active_Serialize != 0U) {
                        %<(SLibCGCallSubFcn("Walking01_withElmos_Serialize", [], 9, 39, 15))>;
                    }
                    Walking01_withElmos_DW.sfEvent = b_previousEvent;
                }
                break;
              case Walking01_withElmos_IN_Late:
                /* During 'Late': '<S215>:116' */
                if (Walking01_withElmos_DW.sfEvent == Walking01_withElm_event_LegSwap) {
                    /* Transition: '<S215>:118' */
                    Walking01_withElmos_DW.is_Stage = Walking01_withElmos_IN_Wait;
                    /* Entry 'Wait': '<S215>:117' */
                    Walking01_withElmos_B.ControlState.RollPhase = 4.0;
                }
                break;
              case Walking01_withElmos_IN_Mid:
                /* During 'Mid': '<S215>:261' */
                if (Walking01_withElmos_DW.theta >= 1.6) {
                    /* Transition: '<S215>:262' */
                    Walking01_withElmos_DW.is_Stage = Walking01_withElmos_IN_Late;
                    /* Entry 'Late': '<S215>:116' */
                    Walking01_withElmos_B.ControlState.RollPhase = 3.0;
                    %<(SLibCGCallSubFcn("Walking01_withE_updateLegAngles", ["%<RTMGetTaskTimeForTID(0)>", "3.0"], 9, 39, 16))>;
                    b_previousEvent = Walking01_withElmos_DW.sfEvent;
                    Walking01_withElmos_DW.sfEvent = Walking01_w_event_ControlUpdate;
                    if (Walking01_withElmos_DW.is_active_Serialize != 0U) {
                        %<(SLibCGCallSubFcn("Walking01_withElmos_Serialize", [], 9, 39, 17))>;
                    }
                    Walking01_withElmos_DW.sfEvent = b_previousEvent;
                }
                break;
              case Walking01_withElmos_IN_Wait:
                /* During 'Wait': '<S215>:117' */
                if (Walking01_withElmos_DW.s < 0.4) {
                    /* Transition: '<S215>:119' */
                    Walking01_withElmos_DW.is_Stage = Walking01_withElmos_IN_Early;
                    /* Entry 'Early': '<S215>:115' */
                    Walking01_withElmos_B.ControlState.RollPhase = 1.0;
                }
                break;
              default:
                Walking01_withElmos_DW.is_Stage = Walking01__IN_NO_ACTIVE_CHILD_j;
                break;
            }
        }
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withElmos_Run(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 39, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking_enter_atomic_LeftSingle_Fcn40(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T b_previousEvent;
/* Entry 'LeftSingle': '<S215>:36' */
Walking01_withElmos_B.ControlState.SupportState = 4.0;
Walking01_withElmos_B.ControlState.StanceLeg = 1.0;
Walking01_withElmos_B.ControlState.InDoubleSupport = 0.0;
b_previousEvent = Walking01_withElmos_DW.sfEvent;
Walking01_withElmos_DW.sfEvent = Walking01_withElm_event_LegSwap;
if (Walking01_withElmos_DW.is_Main == Walking01_withElmos_IN_Run_k) {
    %<(SLibCGCallSubFcn("Walking01_withElmos_Run", [], 9, 40, 0))>;
}
Walking01_withElmos_DW.sfEvent = b_previousEvent;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking_enter_atomic_LeftSingle(\
%assign comma = ""
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 40, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_with_applyGaitTweaks2_Fcn41(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T StanceKneeAngleBias;
real_T SwingKneeAngleBias2;
real_T TorsoBias;
real_T QTweakVec[13];
real_T QTweaks[78];
int32_T ibtile;
int32_T jtilecol;
int32_T i;
real_T SwingKeeAngleBias_idx_0;
real_T SwingKeeAngleBias_idx_1;
/*  APPLYGAITTWEAKS2 computes modified Bezier coefficients corresponding */
/*  to a tweaked orbit. */
/*  In order to handle different output definitions consistently, we */
/*  create a matrix QTweak which represents Bezier coefficients for the */
/*  desired modifications to the gait (i.e., there is one row for each */
/*  coordinate in q). */
/* 'applyGaitTweaks2:9' if nargin==2 */
/* 'applyGaitTweaks2:10' GetTweaks = false; */
/* 'applyGaitTweaks2:13' StanceKneeAngleBias = ControlParams.Supervisory.GaitTweaks(1) * pi/180; */
StanceKneeAngleBias = ControlParams_Supervisory_GaitT[0] * 3.1415926535897931 / 180.0;
/* 'applyGaitTweaks2:14' SwingKneeAngleBias1 = ControlParams.Supervisory.GaitTweaks(2) * pi/180; */
/* 'applyGaitTweaks2:15' SwingKneeAngleBias2 = ControlParams.Supervisory.GaitTweaks(3) * pi/180; */
SwingKneeAngleBias2 = ControlParams_Supervisory_GaitT[2] * 3.1415926535897931 / 180.0;
/* 'applyGaitTweaks2:16' SwingKneeAngleBias3 = ControlParams.Supervisory.GaitTweaks(4) * pi/180; */
/* 'applyGaitTweaks2:17' TorsoBias           = ControlParams.Supervisory.GaitTweaks(5) * pi/180; */
TorsoBias = ControlParams_Supervisory_GaitT[4] * 3.1415926535897931 / 180.0;
/* 'applyGaitTweaks2:19' QTweakVec = [... */
/* 'applyGaitTweaks2:20'         0; ... */
/* 'applyGaitTweaks2:21'         0; ... */
/* 'applyGaitTweaks2:22'         TorsoBias; ... */
/* 'applyGaitTweaks2:23'         -StanceKneeAngleBias/2 - TorsoBias; ... */
/* 'applyGaitTweaks2:24'         StanceKneeAngleBias/2 - TorsoBias; ... */
/* 'applyGaitTweaks2:25'         -StanceKneeAngleBias/2 - TorsoBias; ... */
/* 'applyGaitTweaks2:26'         StanceKneeAngleBias/2 - TorsoBias; ... */
/* 'applyGaitTweaks2:27'         -StanceKneeAngleBias/2 - TorsoBias; ... */
/* 'applyGaitTweaks2:28'         StanceKneeAngleBias/2 - TorsoBias; ... */
/* 'applyGaitTweaks2:29'         0; ... */
/* 'applyGaitTweaks2:30'         -StanceKneeAngleBias/2 - TorsoBias; ... */
/* 'applyGaitTweaks2:31'         StanceKneeAngleBias/2 - TorsoBias; ... */
/* 'applyGaitTweaks2:32'         0]; */
QTweakVec[0] = 0.0;
QTweakVec[1] = 0.0;
QTweakVec[2] = TorsoBias;
QTweakVec[3] = -StanceKneeAngleBias / 2.0 - TorsoBias;
QTweakVec[4] = StanceKneeAngleBias / 2.0 - TorsoBias;
QTweakVec[5] = -StanceKneeAngleBias / 2.0 - TorsoBias;
QTweakVec[6] = StanceKneeAngleBias / 2.0 - TorsoBias;
QTweakVec[7] = -StanceKneeAngleBias / 2.0 - TorsoBias;
QTweakVec[8] = StanceKneeAngleBias / 2.0 - TorsoBias;
QTweakVec[9] = 0.0;
QTweakVec[10] = -StanceKneeAngleBias / 2.0 - TorsoBias;
QTweakVec[11] = StanceKneeAngleBias / 2.0 - TorsoBias;
QTweakVec[12] = 0.0;
/* 'applyGaitTweaks2:33' QTweaks = repmat(QTweakVec, 1, 6); */
for (jtilecol = 0; jtilecol < 6; jtilecol++) {
    ibtile = jtilecol * 13;
    memcpy(&QTweaks[ibtile], &QTweakVec[0], 13U * sizeof(real_T));
}
/* 'applyGaitTweaks2:35' if (ControlState.ControllerMode == 4) */
if (ControlState_ControllerMode == 4.0) {
    /* 'applyGaitTweaks2:36' SwingKeeAngleBias = [SwingKneeAngleBias1 SwingKneeAngleBias2 SwingKneeAngleBias2 SwingKneeAngleBias3]/2; */
    SwingKeeAngleBias_idx_0 = ControlParams_Supervisory_GaitT[1] * 3.1415926535897931 / 180.0 / 2.0;
    SwingKeeAngleBias_idx_1 = SwingKneeAngleBias2 / 2.0;
    StanceKneeAngleBias = SwingKneeAngleBias2 / 2.0;
    SwingKneeAngleBias2 = ControlParams_Supervisory_GaitT[3] * 3.1415926535897931 / 180.0 / 2.0;
    /* 'applyGaitTweaks2:37' QTweaks(6,2:5)  = -SwingKeeAngleBias - TorsoBias; */
    QTweaks[18] = -SwingKeeAngleBias_idx_0 - TorsoBias;
    QTweaks[31] = -SwingKeeAngleBias_idx_1 - TorsoBias;
    QTweaks[44] = -StanceKneeAngleBias - TorsoBias;
    QTweaks[57] = -SwingKneeAngleBias2 - TorsoBias;
    /* 'applyGaitTweaks2:38' QTweaks(7,2:5)  =  SwingKeeAngleBias - TorsoBias; */
    QTweaks[19] = SwingKeeAngleBias_idx_0 - TorsoBias;
    QTweaks[32] = SwingKeeAngleBias_idx_1 - TorsoBias;
    QTweaks[45] = StanceKneeAngleBias - TorsoBias;
    QTweaks[58] = SwingKneeAngleBias2 - TorsoBias;
    /* 'applyGaitTweaks2:39' QTweaks(11,2:5) = -SwingKeeAngleBias - TorsoBias; */
    QTweaks[23] = -SwingKeeAngleBias_idx_0 - TorsoBias;
    QTweaks[36] = -SwingKeeAngleBias_idx_1 - TorsoBias;
    QTweaks[49] = -StanceKneeAngleBias - TorsoBias;
    QTweaks[62] = -SwingKneeAngleBias2 - TorsoBias;
    /* 'applyGaitTweaks2:40' QTweaks(12,2:5) =  SwingKeeAngleBias - TorsoBias; */
    QTweaks[24] = SwingKeeAngleBias_idx_0 - TorsoBias;
    QTweaks[37] = SwingKeeAngleBias_idx_1 - TorsoBias;
    QTweaks[50] = StanceKneeAngleBias - TorsoBias;
    QTweaks[63] = SwingKneeAngleBias2 - TorsoBias;
}
/* 'applyGaitTweaks2:43' HAlpha = ControlParams.Output.H0 * QTweaks; */
/* 'applyGaitTweaks2:44' if ~GetTweaks */
/* 'applyGaitTweaks2:45' HAlpha = ControlParams.Output.HAlpha + HAlpha; */
for (jtilecol = 0; jtilecol < 6; jtilecol++) {
    for (ibtile = 0; ibtile < 6; ibtile++) {
        StanceKneeAngleBias = 0.0;
        for (i = 0; i < 13; i++) {
            StanceKneeAngleBias += ControlParams_Output_H0[6 * i + jtilecol] * QTweaks[13 * ibtile + i];
        }
        HAlpha[jtilecol + 6 * ibtile] = ControlParams_Output_HAlpha[6 * ibtile + jtilecol] + StanceKneeAngleBias;
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_with_applyGaitTweaks2(\
%assign comma = ""
%<comma>real_T ControlState_ControllerMode\
%assign comma = ", "
%<comma>const real_T ControlParams_Supervisory_GaitT[5]\
%assign comma = ", "
%<comma>const real_T ControlParams_Output_H0[78]\
%assign comma = ", "
%<comma>const real_T ControlParams_Output_HAlpha[36]\
%assign comma = ", "
%<comma>real_T HAlpha[36]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 41, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withEl_ATRIAS3D_ZD_s6_Fcn42(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T tmp[15];
int32_T i;
/*  NOTE: This function should work both with scalar and vector s. */
/*  It should also work for both the full q and the zero dynamics qz. */
/* 'ATRIAS3D_ZD_s6:5' if nargin<5 */
/* 'ATRIAS3D_ZD_s6:11' if numel(theta_limits)==2 && iscolumn(theta_limits) */
/* 'ATRIAS3D_ZD_s6:15' th  = c*[1; t; q]; */
tmp[0] = 1.0;
tmp[1] = t;
memcpy(&tmp[2], &q[0], 13U * sizeof(real_T));
*th = 0.0;
for (i = 0; i < 15; i++) {
    *th += c[i] * tmp[i];
}
/* check offset */
/* 'ATRIAS3D_ZD_s6:16' dth = c*[0; 1; dq]; */
tmp[0] = 0.0;
tmp[1] = 1.0;
memcpy(&tmp[2], &dq[0], 13U * sizeof(real_T));
*dth = 0.0;
for (i = 0; i < 15; i++) {
    *dth += c[i] * tmp[i];
}
/* 'ATRIAS3D_ZD_s6:17' delta_theta = theta_limits(:,2)-theta_limits(:,1); */
*delta_theta = theta_limits[1] - theta_limits[0];
/* 'ATRIAS3D_ZD_s6:18' s    = (th-theta_limits(:,1))./delta_theta; */
*s = (*th - theta_limits[0]) / *delta_theta;
/* 'ATRIAS3D_ZD_s6:19' ds   = dth./delta_theta; */
*ds = *dth / *delta_theta;
/* 'ATRIAS3D_ZD_s6:20' dsdq = c(:,3:end)./(delta_theta*ones(1,length(q))); */
for (i = 0; i < 13; i++) {
    dsdq[i] = c[2 + i] / *delta_theta;
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withEl_ATRIAS3D_ZD_s6(\
%assign comma = ""
%<comma>real_T t\
%assign comma = ", "
%<comma>const real_T q[13]\
%assign comma = ", "
%<comma>const real_T dq[13]\
%assign comma = ", "
%<comma>const real_T theta_limits[2]\
%assign comma = ", "
%<comma>const real_T c[15]\
%assign comma = ", "
%<comma>real_T *s\
%assign comma = ", "
%<comma>real_T *ds\
%assign comma = ", "
%<comma>real_T dsdq[13]\
%assign comma = ", "
%<comma>real_T *th\
%assign comma = ", "
%<comma>real_T *dth\
%assign comma = ", "
%<comma>real_T *delta_theta\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 42, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElm_eml_li_find_e_Fcn43(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T k;
k = 0;
if (x) {
    k = 1;
}
y_sizes[0] = 1;
y_sizes[1] = k;
if (x) {
    y_data[0] = 1;
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withElm_eml_li_find_e(\
%assign comma = ""
%<comma>boolean_T x\
%assign comma = ", "
%<comma>int32_T y_data[]\
%assign comma = ", "
%<comma>int32_T y_sizes[2]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 43, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withEl_eml_li_find_eu_Fcn44(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T j;
int32_T i;
*y_sizes = 0;
for (j = 0; j < 6; j++) {
    if (x[j]) {
        (*y_sizes)++;
    }
}
j = 0;
for (i = 0; i < 6; i++) {
    if (x[i]) {
        y_data[j] = i + 1;
        j++;
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withEl_eml_li_find_eu(\
%assign comma = ""
%<comma>const boolean_T x[6]\
%assign comma = ", "
%<comma>int32_T y_data[]\
%assign comma = ", "
%<comma>int32_T *y_sizes\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 44, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_beziervd_Fcn45(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T x[5];
real_T y[5];
int32_T j;
static const int8_T b[5] = { 5, 20, 30, 20, 5 };
int32_T i;
/* 'beziervd:2' [n, m] = size(afra); */
/* 'beziervd:3' ns = size(s,1); */
/* 'beziervd:4' value=zeros(n,1); */
for (i = 0; i < 6; i++) {
    value[i] = 0.0;
}
/* 'beziervd:5' M = m-1; */
/* 'beziervd:6' if M==3 */
/* 'beziervd:10' elseif M==5 */
/* 'beziervd:11' k=[5 20 30 20 5]; */
/* %<"\%"> */
/* 'beziervd:24' x = ones(ns, M); */
/* 'beziervd:25' y = ones(ns, M); */
for (i = 0; i < 5; i++) {
    x[i] = 1.0;
    y[i] = 1.0;
}
/* 'beziervd:26' for i=1:M-1 */
/* 'beziervd:27' x(:,i+1)=s.*x(:,i); */
x[1] = s;
/* 'beziervd:28' y(:,i+1)=(1-s).*y(:,i); */
y[1] = 1.0 - s;
/* 'beziervd:27' x(:,i+1)=s.*x(:,i); */
x[2] = s * s;
/* 'beziervd:28' y(:,i+1)=(1-s).*y(:,i); */
y[2] = (1.0 - s) * (1.0 - s);
/* 'beziervd:27' x(:,i+1)=s.*x(:,i); */
x[3] = s * x[2];
/* 'beziervd:28' y(:,i+1)=(1-s).*y(:,i); */
y[3] = (1.0 - s) * y[2];
/* 'beziervd:27' x(:,i+1)=s.*x(:,i); */
x[4] = s * x[3];
/* 'beziervd:28' y(:,i+1)=(1-s).*y(:,i); */
y[4] = (1.0 - s) * y[3];
/* 'beziervd:30' idx = 1; */
/* 'beziervd:31' for i=1:n */
for (i = 0; i < 6; i++) {
    /* 'beziervd:32' value(i) = 0; */
    value[i] = 0.0;
    /* 'beziervd:33' for j=1:M */
    for (j = 0; j < 5; j++) {
        /* 'beziervd:34' value(i) = value(i) + (afra(i,j+1)-afra(i,j))*k(j)*x(idx,j)*y(idx,M+1-j); */
        value[i] += (afra[(1 + j) * 6 + i] - afra[6 * j + i]) * (real_T)b[j] * x[j] * y[4 - j];
    }
    /* 'beziervd:36' idx = idx+(ns==n); */
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withElmos_beziervd(\
%assign comma = ""
%<comma>const real_T afra[36]\
%assign comma = ", "
%<comma>real_T s\
%assign comma = ", "
%<comma>real_T value[6]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 45, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_bezier_Fcn46(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T value;
real_T x[20];
real_T y[20];
int32_T i;
static const int32_T b[20] = { 1, 19, 171, 969, 3876, 11628, 27132, 50388, 75582, 92378, 92378, 75582, 50388, 27132, 11628, 3876, 969, 171, 19, 1 };
/* 'bezier:2' [n, m] = size(afra); */
/* 'bezier:3' value=zeros(n,1); */
/* 'bezier:4' M = m-1; */
/* 'bezier:5' if M==3 */
/* 'bezier:23' else */
/* 'bezier:24' k = binom(M); */
/* %<"\%    "> */
/* 'bezier:27' x = ones(1, M+1); */
/* 'bezier:28' y = ones(1, M+1); */
for (i = 0; i < 20; i++) {
    x[i] = 1.0;
    y[i] = 1.0;
}
/* 'bezier:29' for i=1:M */
for (i = 0; i < 19; i++) {
    /* 'bezier:30' x(i+1)=s*x(i); */
    x[1 + i] = s * x[i];
    /* 'bezier:31' y(i+1)=(1-s)*y(i); */
    y[1 + i] = (1.0 - s) * y[i];
}
/* 'bezier:33' for i=1:n */
/* 'bezier:34' value(i) = 0; */
value = 0.0;
/* 'bezier:35' for j=1:M+1 */
for (i = 0; i < 20; i++) {
    /* 'bezier:36' value(i) = value(i) + afra(i, j)*k(j)*x(j)*y(M+2-j); */
    value += afra[i] * (real_T)b[i] * x[i] * y[19 - i];
}
return value;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static real_T Walking01_withElmos_bezier(\
%assign comma = ""
%<comma>const real_T afra[20]\
%assign comma = ", "
%<comma>real_T s\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 46, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_polyvd_Fcn47(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T tmp;
int32_T s_0;
int32_T i;
/* 'polyvd:2' if nargin<3 */
/* 'polyvd:5' a1=poly_cor(:,2); */
/* 'polyvd:6' a2=poly_cor(:,3); */
/* 'polyvd:7' a3=poly_cor(:,4); */
/* 'polyvd:8' a4=poly_cor(:,5); */
/* 'polyvd:9' value=a1+s.*(2*a2+s.*(3*a3+4*s.*a4)); */
/* 'polyvd:10' value=value.*(s<=s_corr_max); */
tmp = 4.0 * s;
s_0 = (s <= s_corr_max);
for (i = 0; i < 6; i++) {
    value[i] = (((poly_cor[18 + i] * 3.0 + poly_cor[24 + i] * tmp) * s + poly_cor[12 + i] * 2.0) * s + poly_cor[6 + i]) * (real_T)s_0;
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withElmos_polyvd(\
%assign comma = ""
%<comma>const real_T poly_cor[30]\
%assign comma = ", "
%<comma>real_T s\
%assign comma = ", "
%<comma>real_T s_corr_max\
%assign comma = ", "
%<comma>real_T value[6]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 47, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_polyva_Fcn48(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T tmp;
int32_T s_0;
int32_T i;
/* 'polyva:2' if nargin<3 */
/* 'polyva:5' a2  = poly_cor(:,3); */
/* 'polyva:6' a3  = poly_cor(:,4); */
/* 'polyva:7' a4  = poly_cor(:,5); */
/* 'polyva:8' value=2*a2+s.*(6*a3+12*s.*a4); */
/* 'polyva:9' value=value.*(s<=s_corr_max); */
tmp = 12.0 * s;
s_0 = (s <= s_corr_max);
for (i = 0; i < 6; i++) {
    value[i] = ((poly_cor[18 + i] * 6.0 + poly_cor[24 + i] * tmp) * s + poly_cor[12 + i] * 2.0) * (real_T)s_0;
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withElmos_polyva(\
%assign comma = ""
%<comma>const real_T poly_cor[30]\
%assign comma = ", "
%<comma>real_T s\
%assign comma = ", "
%<comma>real_T s_corr_max\
%assign comma = ", "
%<comma>real_T value[6]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 48, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_polyv_Fcn49(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T s_0;
int32_T i;
/* 'polyv:2' if nargin<3 */
/* 'polyv:5' a0=poly_cor(:,1); */
/* 'polyv:6' a1=poly_cor(:,2); */
/* 'polyv:7' a2=poly_cor(:,3); */
/* 'polyv:8' a3=poly_cor(:,4); */
/* 'polyv:9' a4=poly_cor(:,5); */
/* 'polyv:10' value=a0+s.*(a1+s.*(a2+s.*(a3+s.*a4))); */
/* 'polyv:11' value=value.*(s<=s_corr_max); */
s_0 = (s <= s_corr_max);
for (i = 0; i < 6; i++) {
    value[i] = ((((poly_cor[24 + i] * s + poly_cor[18 + i]) * s + poly_cor[12 + i]) * s + poly_cor[6 + i]) * s + poly_cor[i]) * (real_T)s_0;
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withElmos_polyv(\
%assign comma = ""
%<comma>const real_T poly_cor[30]\
%assign comma = ", "
%<comma>real_T s\
%assign comma = ", "
%<comma>real_T s_corr_max\
%assign comma = ", "
%<comma>real_T value[6]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 49, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_sat_Fcn50(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T k;
real_T minval;
/* 'ATRIAS3D_ZD_Output03:168' y = max(lo, min(x, hi)); */
for (k = 0; k < 6; k++) {
    if ((x[k] <= hi[k]) || rtIsNaN(hi[k])) {
        minval = x[k];
    } else {
        minval = hi[k];
    }
    if ((lo[k] >= minval) || rtIsNaN(minval)) {
        y[k] = lo[k];
    } else {
        y[k] = minval;
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withElmos_sat(\
%assign comma = ""
%<comma>const real_T x[6]\
%assign comma = ", "
%<comma>const real_T lo[6]\
%assign comma = ", "
%<comma>const real_T hi[6]\
%assign comma = ", "
%<comma>real_T y[6]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 50, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_bezierva_Fcn51(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
int32_T i;
real_T x_idx_2;
real_T x_idx_3;
real_T y_idx_2;
real_T y_idx_3;
real_T value_0;
/* 'bezierva:2' [n, m] = size(alpha); */
/* 'bezierva:3' ns = size(s,1); */
/* 'bezierva:4' value=zeros(n,1); */
/* 'bezierva:5' M = m-1; */
/* 'bezierva:6' if M==3 */
/* 'bezierva:10' elseif M==5 */
/* 'bezierva:11' k = [20 60 60 20]; */
/* %<"\%"> */
/* 'bezierva:24' x = ones(ns, M-1); */
/* 'bezierva:25' y = ones(ns, M-1); */
/* 'bezierva:26' for i=1:M-2 */
/* 'bezierva:27' x(:,i+1)=s.*x(:,i); */
/* 'bezierva:28' y(:,i+1)=(1-s).*y(:,i); */
/* 'bezierva:27' x(:,i+1)=s.*x(:,i); */
x_idx_2 = s * s;
/* 'bezierva:28' y(:,i+1)=(1-s).*y(:,i); */
y_idx_2 = (1.0 - s) * (1.0 - s);
/* 'bezierva:27' x(:,i+1)=s.*x(:,i); */
x_idx_3 = s * x_idx_2;
/* 'bezierva:28' y(:,i+1)=(1-s).*y(:,i); */
y_idx_3 = (1.0 - s) * y_idx_2;
/* 'bezierva:30' idx = 1; */
/* 'bezierva:31' for i=1:n */
for (i = 0; i < 6; i++) {
    /* 'bezierva:32' value(i) = 0; */
    /* 'bezierva:33' for j=1:M-1 */
    /* 'bezierva:34' value(i) = value(i) + (alpha(i,j+2)-2*alpha(i,j+1)+alpha(i,j)) *k(j)*x(idx,j)*y(idx,M-j); */
    value_0 = ((alpha[i + 30] - alpha[i + 24] * 2.0) + alpha[i + 18]) * 20.0 * x_idx_3 + (((alpha[i + 24] - alpha[i + 18] * 2.0) + alpha[i + 12]) * 60.0 * x_idx_2 * (1.0 - s) + (((alpha[i + 18] - alpha[i + 12] * 2.0) + alpha[i + 6]) * 60.0 * s * y_idx_2 + ((alpha[i + 12] - alpha[i + 6] * 2.0) + alpha[i]) * 20.0 * y_idx_3));
    /* 'bezierva:36' idx = idx+(ns==n); */
    value[i] = value_0;
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withElmos_bezierva(\
%assign comma = ""
%<comma>const real_T alpha[36]\
%assign comma = ", "
%<comma>real_T s\
%assign comma = ", "
%<comma>real_T value[6]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 51, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_bezierv_Fcn52(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T x[6];
real_T y[6];
int32_T j;
static const int8_T b[6] = { 1, 5, 10, 10, 5, 1 };
int32_T i;
/* 'bezierv:2' [n, m] = size(alpha); */
/* 'bezierv:3' ns = size(s,1); */
/* 'bezierv:4' value=zeros(n,1); */
/* 'bezierv:5' M = m-1; */
/* 'bezierv:6' if M==3 */
/* 'bezierv:10' elseif M==5 */
/* 'bezierv:11' k=[1 5 10 10 5 1]; */
/* %<"\%"> */
/* 'bezierv:24' x = ones(ns, M+1); */
/* 'bezierv:25' y = ones(ns, M+1); */
for (i = 0; i < 6; i++) {
    value[i] = 0.0;
    x[i] = 1.0;
    y[i] = 1.0;
}
/* 'bezierv:26' for i=1:M */
for (i = 0; i < 5; i++) {
    /* 'bezierv:27' x(:,i+1)=s.*x(:,i); */
    x[1 + i] = s * x[i];
    /* 'bezierv:28' y(:,i+1)=(1-s).*y(:,i); */
    y[1 + i] = (1.0 - s) * y[i];
}
/* 'bezierv:30' idx = 1; */
/* 'bezierv:31' for i=1:n */
for (i = 0; i < 6; i++) {
    /* 'bezierv:32' value(i) = 0; */
    value[i] = 0.0;
    /* 'bezierv:33' for j=1:M+1 */
    for (j = 0; j < 6; j++) {
        /* 'bezierv:34' value(i) = value(i) + alpha(i, j)*k(j)*x(idx,j)*y(idx,M+2-j); */
        value[i] += alpha[6 * j + i] * (real_T)b[j] * x[j] * y[5 - j];
    }
    /* 'bezierv:36' idx = idx+(ns==n); */
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withElmos_bezierv(\
%assign comma = ""
%<comma>const real_T alpha[36]\
%assign comma = ", "
%<comma>real_T s\
%assign comma = ", "
%<comma>real_T value[6]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 52, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_any_o_Fcn53(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
return !(x == 0);
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static boolean_T Walking01_withElmos_any_o(\
%assign comma = ""
%<comma>boolean_T x\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 53, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01__ATRIAS3D_ZD_Output03_Fcn54(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T T0[36];
real_T c[15];
real_T h_alpha[36];
real_T h_alpha_high[36];
real_T qmod[13];
real_T jacob_hd[6];
real_T dhd[6];
boolean_T RSaturated;
real_T jacob_hdbar[6];
real_T jacob2_hdbar[6];
boolean_T idxsat[6];
real_T b;
real_T d;
real_T e;
real_T g;
real_T a;
real_T c_c;
static const real_T hd_min[6] = { 2.6179938779914944, 2.6179938779914944, 0.26179938779914941, 0.26179938779914941, -0.3490658503988659, -0.3490658503988659 };
static const real_T hd_max[6] = { 3.839724354387525, 3.839724354387525, 2.0943951023931953, 2.0943951023931953, 0.3490658503988659, 0.3490658503988659 };
static const real_T b_T0[36] = { 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0 };
static const real_T h[36] = { 0.0, 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0 };
static const int8_T i[13] = { 0, 1, 2, 5, 6, 3, 4, 10, 11, 12, 7, 8, 9 };
static const real_T c_b[6] = { -1.0, -0.8, -0.6, -0.4, -0.2, 0.0 };
int32_T i_0;
real_T tmp[6];
real_T tmp_0[6];
boolean_T s_0[6];
int32_T i_1;
real_T jacob_h0_0[78];
real_T jacob_hdbar_0[78];
real_T ds_0;
int32_T f_data;
int32_T f_sizes[2];
int32_T tmp_data[6];
int32_T tmp_sizes;
int32_T tmp_data_0[6];
real_T h_alpha_data[36];
%assign _modelSS = ""

/* 'ATRIAS3D_ZD_Output03:4' Output = ControlParams.Output; */
/*  Define matrix to convert between motor and standard actuated coordinates */
/*  [uLAst; uLAsw; uKAst; uKAsw; u3st; u3sw] = T0*[u1R; u2R; u3R; u1L; u2L; u3L] */
/* 'ATRIAS3D_ZD_Output03:8' T0 = [0.5 0.5 0 0 0 0; 0 0 0 0.5 0.5 0; -1 1 0 0 0 0; 0 0 0 -1 1 0; 0 0 1 0 0 0; 0 0 0 0 0 1]; */
memcpy(&T0[0], &b_T0[0], 36U * sizeof(real_T));
/* 'ATRIAS3D_ZD_Output03:9' if (ControlState.StanceLeg==1) */
if (ControlState_StanceLeg == 1.0) {
    /* 'ATRIAS3D_ZD_Output03:10' T0 = T0([2 1 4 3 6 5],:); */
    memcpy(&T0[0], &h[0], 36U * sizeof(real_T));
}
/* 'ATRIAS3D_ZD_Output03:12' T1 = [zeros(6,7) T0]; */
/*     %<"\%\% Compute s and modify Bezier parameters to extend outside 0 <= s <= 1"> */
/* [Sy,Sq] = SymmetryMatrices(); */
/* 'ATRIAS3D_ZD_Output03:16' if (ControlState.StanceLeg==0) */
if (ControlState_StanceLeg == 0.0) {
    /* 'ATRIAS3D_ZD_Output03:17' c = [Output.Theta.c0 Output.Theta.ct Output.Theta.cq]; */
    c[0] = ControlParams_Output->Theta.c0;
    c[1] = ControlParams_Output->Theta.ct;
    for (i_1 = 0; i_1 < 13; i_1++) {
        c[i_1 + 2] = ControlParams_Output->Theta.cq[i_1];
    }
    /* 'ATRIAS3D_ZD_Output03:18' jacob_h0 = Output.H0; */
    for (i_1 = 0; i_1 < 78; i_1++) {
        jacob_h0[i_1] = ControlParams_Output->H0[i_1];
    }
} else {
    /* 'ATRIAS3D_ZD_Output03:19' else */
    /* 'ATRIAS3D_ZD_Output03:20' c = [Output.Theta.c0 Output.Theta.ct Output.Theta.cq(:,[1 2 3 6 7 4 5 11 12 13 8 9 10])]; */
    c[0] = ControlParams_Output->Theta.c0;
    c[1] = ControlParams_Output->Theta.ct;
    for (i_1 = 0; i_1 < 13; i_1++) {
        c[i_1 + 2] = ControlParams_Output->Theta.cq[i[i_1]];
    }
    /* 'ATRIAS3D_ZD_Output03:21' c(:,3:4) = -c(:,3:4); */
    c[2] = -c[2];
    c[3] = -c[3];
    /* 'ATRIAS3D_ZD_Output03:22' jacob_h0 = Output.H0(:,[1 2 3 6 7 4 5 11 12 13 8 9 10]); */
    for (i_1 = 0; i_1 < 13; i_1++) {
        for (i_0 = 0; i_0 < 6; i_0++) {
            jacob_h0[i_0 + 6 * i_1] = ControlParams_Output->H0[6 * i[i_1] + i_0];
        }
    }
    /* 'ATRIAS3D_ZD_Output03:23' jacob_h0(:,1:2) = -jacob_h0(:,1:2); */
    for (i_1 = 0; i_1 < 2; i_1++) {
        for (i_0 = 0; i_0 < 6; i_0++) {
            jacob_h0[i_0 + 6 * i_1] = -ControlParams_Output->H0[6 * i[i_1] + i_0];
        }
    }
}
/* 'ATRIAS3D_ZD_Output03:27' [s,ds,dsdq,theta,dtheta,delta_theta] = ATRIAS3D_ZD_s6(t-Output.Theta.t0, q, dq, Output.ThetaLimits, c); */
%if SLibCG_FcnCallArgAccessed(9,54,7,0)
%<SLibCG_AccessArg(9 ,54, 0)>
%<SLibCG_AccessArg(9 ,54, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(9,54,7,1)
%<SLibCG_AccessArg(9 ,54, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(9,54,7,2)
%<SLibCG_AccessArg(9 ,54, 2)>
%endif
%if SLibCG_FcnCallArgAccessed(9,54,7,3)
%<SLibCG_AccessArg(9 ,54, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(9,54,7,5)
%<SLibCG_AccessArg(9 ,54, 6)>
%endif
%if SLibCG_FcnCallArgAccessed(9,54,7,6)
%<SLibCG_AccessArg(9 ,54, 7)>
%endif
%if SLibCG_FcnCallArgAccessed(9,54,7,7)
%<SLibCG_AccessArg(9 ,54, 17)>
%endif
%if SLibCG_FcnCallArgAccessed(9,54,7,8)
%<SLibCG_AccessArg(9 ,54, 14)>
%endif
%if SLibCG_FcnCallArgAccessed(9,54,7,9)
%<SLibCG_AccessArg(9 ,54, 15)>
%endif
%if SLibCG_FcnCallArgAccessed(9,54,7,10)
%<SLibCG_AccessArg(9 ,54, 16)>
%endif

%<(SLibCGCallSubFcn("Walking01_withEl_ATRIAS3D_ZD_s6", ["t - ControlParams_Output->Theta.t0", "q", "dq", "ControlParams_Output->ThetaLimits", "c", "s", "ds", "dsdq", "theta", "dtheta", "delta_theta"], 9, 54, 7))>;
/* 'ATRIAS3D_ZD_Output03:28' s_unsaturated = s; */
*s_unsaturated = *s;
/* 'ATRIAS3D_ZD_Output03:30' if (Output.EnforceIncreasingS) */
if ((ControlParams_Output->EnforceIncreasingS != 0.0) && (!((*s >= sprev) || rtIsNaN(sprev)))) {
    /* 'ATRIAS3D_ZD_Output03:31' s = max(s, sprev); */
    *s = sprev;
}
/* 'ATRIAS3D_ZD_Output03:34' h_alpha = Output.HAlpha; */
for (i_1 = 0; i_1 < 36; i_1++) {
    h_alpha[i_1] = ControlParams_Output->HAlpha[i_1];
}
/* 'ATRIAS3D_ZD_Output03:35' if (ControlState.StanceLeg==1) */
/* 'ATRIAS3D_ZD_Output03:39' if Output.SaturateS==1 */
if (ControlParams_Output->SaturateS == 1.0) {
    /* delta = 0.2; */
    /* p = [0.2  -0.4  0.2  0]; %<"\% coefficients of transition poly"> */
    /* [s, ds] = softsaturate(s, ds, delta, p); */
    /*  Modified Feb. 4th, 2014 for interpolative bezier table bounds. */
    /* 'ATRIAS3D_ZD_Output03:44' delta = 0.1; */
    /* 'ATRIAS3D_ZD_Output03:45' ds(s>1+delta) = 0; */
    e = *ds;
%if SLibCG_FcnCallArgAccessed(9,54,23,0)
%<SLibCG_AccessArg(9 ,54, 6)>
%endif

    %<(SLibCGCallSubFcn("Walking01_withElm_eml_li_find_e", ["*s > 1.1", "&f_data", "f_sizes"], 9, 54, 23))>;
    i_0 = f_sizes[0] * f_sizes[1];
    for (i_1 = 0; i_1 < i_0; i_1++) {
        e = 0.0;
    }
    /* 'ATRIAS3D_ZD_Output03:46' s(s>1+delta) = 1+delta; */
    b = *s;
%if SLibCG_FcnCallArgAccessed(9,54,24,0)
%<SLibCG_AccessArg(9 ,54, 6)>
%endif

    %<(SLibCGCallSubFcn("Walking01_withElm_eml_li_find_e", ["*s > 1.1", "&f_data", "f_sizes"], 9, 54, 24))>;
    i_0 = f_sizes[0] * f_sizes[1];
    for (i_1 = 0; i_1 < i_0; i_1++) {
        b = 1.1;
    }
    /* 'ATRIAS3D_ZD_Output03:47' ds(s<-delta) = 0; */
    g = e;
    %<(SLibCGCallSubFcn("Walking01_withElm_eml_li_find_e", ["b < -0.1", "&f_data", "f_sizes"], 9, 54, 25))>;
    i_0 = f_sizes[0] * f_sizes[1];
    for (i_1 = 0; i_1 < i_0; i_1++) {
        g = 0.0;
    }
    *ds = g;
    /* 'ATRIAS3D_ZD_Output03:48' s(s<-delta) = -delta; */
    d = b;
    %<(SLibCGCallSubFcn("Walking01_withElm_eml_li_find_e", ["b < -0.1", "&f_data", "f_sizes"], 9, 54, 26))>;
    i_0 = f_sizes[0] * f_sizes[1];
    for (i_1 = 0; i_1 < i_0; i_1++) {
        d = -0.1;
    }
    *s = d;
} else if (ControlParams_Output->SaturateS == 2.0) {
    /* 'ATRIAS3D_ZD_Output03:50' elseif Output.SaturateS==2 */
    /* 'ATRIAS3D_ZD_Output03:51' if (length(s)>1) */
    /* 'ATRIAS3D_ZD_Output03:54' else */
    /* 'ATRIAS3D_ZD_Output03:55' dqyTds = repmat((c(1,5)*delta_theta), 2, 1); */
    a = c[4] * *delta_theta;
    /* 'ATRIAS3D_ZD_Output03:56' s6 = repmat(s, 6, 1); */
    /*  If (s>1), hold the desired knee angles constant and keep the */
    /*  torso angle fixed by decreasing the desired leg angles */
    /* 'ATRIAS3D_ZD_Output03:61' h_alpha_high = h_alpha(:,end)*[1 1 1 1 1 1]; */
    for (i_1 = 0; i_1 < 6; i_1++) {
        for (i_0 = 0; i_0 < 6; i_0++) {
            h_alpha_high[i_1 + 6 * i_0] = ControlParams_Output->HAlpha[30 + i_1];
        }
    }
    /* 'ATRIAS3D_ZD_Output03:62' h_alpha_high(1:2,:) = h_alpha_high(1:2,:)+dqyTds*(-1:0.2:0); */
    for (i_1 = 0; i_1 < 2; i_1++) {
        for (i_0 = 0; i_0 < 6; i_0++) {
            h_alpha_high[i_1 + 6 * i_0] += a * c_b[i_0];
        }
    }
    /* 'ATRIAS3D_ZD_Output03:63' h_alpha_high(1:2) = max(150*pi/180, h_alpha_high(1:2)); */
    a = h_alpha_high[1];
    if ((2.6179938779914944 >= h_alpha_high[0]) || rtIsNaN(h_alpha_high[0])) {
        h_alpha_high[0] = 2.6179938779914944;
    }
    if ((2.6179938779914944 >= a) || rtIsNaN(a)) {
        h_alpha_high[1] = 2.6179938779914944;
    } else {
        h_alpha_high[1] = a;
    }
    /* 'ATRIAS3D_ZD_Output03:64' h_alpha(s6>1,:) = h_alpha_high(s6>1,:); */
    for (i_1 = 0; i_1 < 6; i_1++) {
        idxsat[i_1] = (*s > 1.0);
        s_0[i_1] = (*s > 1.0);
    }
    %<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_eu", ["idxsat", "tmp_data", "&tmp_sizes"], 9, 54, 19))>;
    %<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_eu", ["s_0", "tmp_data_0", "&tmp_sizes"], 9, 54, 20))>;
    for (i_1 = 0; i_1 < 6; i_1++) {
        for (i_0 = 0; i_0 < tmp_sizes; i_0++) {
            h_alpha[(tmp_data[i_0] + 6 * i_1) - 1] = h_alpha_high[(6 * i_1 + tmp_data_0[i_0]) - 1];
        }
    }
    /*  If (s<0), hold all desired angles constant */
    /* 'ATRIAS3D_ZD_Output03:67' h_alpha_low = h_alpha(:,1)*[1 1 1 1 1 1]; */
    /* 'ATRIAS3D_ZD_Output03:68' h_alpha(s6<0,:) = h_alpha_low(s6<0,:); */
    for (i_1 = 0; i_1 < 6; i_1++) {
        idxsat[i_1] = (*s < 0.0);
        s_0[i_1] = (*s < 0.0);
    }
    %<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_eu", ["idxsat", "tmp_data", "&tmp_sizes"], 9, 54, 21))>;
    %<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_eu", ["s_0", "tmp_data_0", "&tmp_sizes"], 9, 54, 22))>;
    for (i_1 = 0; i_1 < 6; i_1++) {
        for (i_0 = 0; i_0 < 6; i_0++) {
            h_alpha_high[i_1 + 6 * i_0] = h_alpha[i_1];
        }
    }
    for (i_1 = 0; i_1 < 6; i_1++) {
        for (i_0 = 0; i_0 < tmp_sizes; i_0++) {
            h_alpha_data[i_0 + tmp_sizes * i_1] = h_alpha_high[(6 * i_1 + tmp_data_0[i_0]) - 1];
        }
    }
    for (i_1 = 0; i_1 < 6; i_1++) {
        for (i_0 = 0; i_0 < tmp_sizes; i_0++) {
            h_alpha[(tmp_data[i_0] + 6 * i_1) - 1] = h_alpha_data[tmp_sizes * i_1 + i_0];
        }
    }
} else {
    if (ControlParams_Output->SaturateS == 3.0) {
        /* 'ATRIAS3D_ZD_Output03:70' elseif Output.SaturateS==3 */
        /* 'ATRIAS3D_ZD_Output03:71' smin = Output.SLimits(1); */
        /* 'ATRIAS3D_ZD_Output03:72' smax = Output.SLimits(2); */
        /* 'ATRIAS3D_ZD_Output03:73' ds(s>smax) = 0; */
        e = *ds;
%if SLibCG_FcnCallArgAccessed(9,54,15,0)
%<SLibCG_AccessArg(9 ,54, 6)>
%<SLibCG_AccessArg(9 ,54, 4)>
%endif

        %<(SLibCGCallSubFcn("Walking01_withElm_eml_li_find_e", ["*s > ControlParams_Output->SLimits[1]", "&f_data", "f_sizes"], 9, 54, 15))>;
        i_0 = f_sizes[0] * f_sizes[1];
        for (i_1 = 0; i_1 < i_0; i_1++) {
            e = 0.0;
        }
        /* 'ATRIAS3D_ZD_Output03:74' s(s>smax)  = smax; */
        b = *s;
%if SLibCG_FcnCallArgAccessed(9,54,16,0)
%<SLibCG_AccessArg(9 ,54, 6)>
%<SLibCG_AccessArg(9 ,54, 4)>
%endif

        %<(SLibCGCallSubFcn("Walking01_withElm_eml_li_find_e", ["*s > ControlParams_Output->SLimits[1]", "&f_data", "f_sizes"], 9, 54, 16))>;
        i_0 = f_sizes[0] * f_sizes[1];
        for (i_1 = 0; i_1 < i_0; i_1++) {
            b = ControlParams_Output->SLimits[1];
        }
        /* 'ATRIAS3D_ZD_Output03:75' ds(s<smin) = 0; */
        g = e;
%if SLibCG_FcnCallArgAccessed(9,54,17,0)
%<SLibCG_AccessArg(9 ,54, 4)>
%endif

        %<(SLibCGCallSubFcn("Walking01_withElm_eml_li_find_e", ["b < ControlParams_Output->SLimits[0]", "&f_data", "f_sizes"], 9, 54, 17))>;
        i_0 = f_sizes[0] * f_sizes[1];
        for (i_1 = 0; i_1 < i_0; i_1++) {
            g = 0.0;
        }
        *ds = g;
        /* 'ATRIAS3D_ZD_Output03:76' s(s<smin)  = smin; */
        d = b;
%if SLibCG_FcnCallArgAccessed(9,54,18,0)
%<SLibCG_AccessArg(9 ,54, 4)>
%endif

        %<(SLibCGCallSubFcn("Walking01_withElm_eml_li_find_e", ["b < ControlParams_Output->SLimits[0]", "&f_data", "f_sizes"], 9, 54, 18))>;
        i_0 = f_sizes[0] * f_sizes[1];
        for (i_1 = 0; i_1 < i_0; i_1++) {
            d = ControlParams_Output->SLimits[0];
        }
        *s = d;
    }
}
/*     %<"\%\% Compute terms in controller"> */
/* 'ATRIAS3D_ZD_Output03:80' qmod = q; */
memcpy(&qmod[0], &q[0], 13U * sizeof(real_T));
/* 'ATRIAS3D_ZD_Output03:81' qmod(1) = sat(qmod(1), -Output.YawLimit, Output.YawLimit); */
/* 'ATRIAS3D_ZD_Output03:168' y = max(lo, min(x, hi)); */
if ((q[0] <= ControlParams_Output->YawLimit) || rtIsNaN(ControlParams_Output->YawLimit)) {
    a = q[0];
} else {
    a = ControlParams_Output->YawLimit;
}
if ((-ControlParams_Output->YawLimit >= a) || rtIsNaN(a)) {
    qmod[0] = -ControlParams_Output->YawLimit;
} else {
    qmod[0] = a;
}
/* 'ATRIAS3D_ZD_Output03:82' h0 = jacob_h0*qmod; */
/* 'ATRIAS3D_ZD_Output03:83' hd = bezierv(h_alpha, s); */
/* 'ATRIAS3D_ZD_Output03:84' jacob_hd  = beziervd(h_alpha,s); */
%if SLibCG_FcnCallArgAccessed(9,54,1,1)
%<SLibCG_AccessArg(9 ,54, 6)>
%endif

%<(SLibCGCallSubFcn("Walking01_withElmos_beziervd", ["h_alpha", "*s", "jacob_hd"], 9, 54, 1))>;
/* 'ATRIAS3D_ZD_Output03:85' jacob2_hd = bezierva(h_alpha,s); */
/* 'ATRIAS3D_ZD_Output03:86' dhd = jacob_hd.*ds; */
for (i_1 = 0; i_1 < 6; i_1++) {
    h0[i_1] = 0.0;
    for (i_0 = 0; i_0 < 13; i_0++) {
        h0[i_1] += jacob_h0[6 * i_0 + i_1] * qmod[i_0];
    }
    dhd[i_1] = jacob_hd[i_1] * *ds;
}
/* 'ATRIAS3D_ZD_Output03:88' jacob_h = jacob_h0 - jacob_hd*dsdq; */
/* 'ATRIAS3D_ZD_Output03:89' jacob_jacobhdqdq = -jacob2_hd.*(ds.*ds); */
/*     %<"\%\% Stabilizing output term"> */
/*  Allow outputs of the form */
/*    y = H0*q - hd(s(theta(q)), h_alpha) - hStabilizing(phi - phid(s(theta(q))), StabilizingHAlpha) */
/* 'ATRIAS3D_ZD_Output03:95' phi    = Output.Phi.cq * q; */
*phi = 0.0;
for (i_1 = 0; i_1 < 13; i_1++) {
    *phi += ControlParams_Output->Phi.cq[i_1] * q[i_1];
}
/* 'ATRIAS3D_ZD_Output03:96' dphi   = Output.Phi.cq * dq; */
a = 0.0;
for (i_1 = 0; i_1 < 13; i_1++) {
    a += ControlParams_Output->Phi.cq[i_1] * dq[i_1];
}
/* 'ATRIAS3D_ZD_Output03:98' phid   = bezier(Output.PhiAlpha, s); */
/* 'ATRIAS3D_ZD_Output03:99' jacob_phid = bezierd(Output.PhiAlpha, s); */
/* 'ATRIAS3D_ZD_Output03:100' jacob2_phid = beziera(Output.PhiAlpha, s); */
/* 'ATRIAS3D_ZD_Output03:102' r      = phi - phid; */
%if SLibCG_FcnCallArgAccessed(9,54,2,0)
%<SLibCG_AccessArg(9 ,54, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(9,54,2,1)
%<SLibCG_AccessArg(9 ,54, 6)>
%endif

*r = *phi - %<(SLibCGCallSubFcn("Walking01_withElmos_bezier", ["ControlParams_Output->PhiAlpha", "*s"], 9, 54, 2))>;
/* 'ATRIAS3D_ZD_Output03:103' dr     = dphi - jacob_phid * ds; */
*dr = a - 0.0 * *ds;
/* 'ATRIAS3D_ZD_Output03:104' RSaturated = false; */
RSaturated = false;
/* 'ATRIAS3D_ZD_Output03:105' if Output.SaturateR */
if (ControlParams_Output->SaturateR != 0.0) {
    /* 'ATRIAS3D_ZD_Output03:106' if (r > Output.RLimits(2)) */
    if (*r > ControlParams_Output->RLimits[1]) {
        /* 'ATRIAS3D_ZD_Output03:107' r = Output.RLimits(2); */
        *r = ControlParams_Output->RLimits[1];
        /* 'ATRIAS3D_ZD_Output03:108' dr = 0; */
        *dr = 0.0;
        /* 'ATRIAS3D_ZD_Output03:109' RSaturated = true; */
        RSaturated = true;
    } else {
        if (*r < ControlParams_Output->RLimits[0]) {
            /* 'ATRIAS3D_ZD_Output03:110' elseif (r < Output.RLimits(1)) */
            /* 'ATRIAS3D_ZD_Output03:111' r = Output.RLimits(1); */
            *r = ControlParams_Output->RLimits[0];
            /* 'ATRIAS3D_ZD_Output03:112' dr = 0; */
            *dr = 0.0;
            /* 'ATRIAS3D_ZD_Output03:113' RSaturated = true; */
            RSaturated = true;
        }
    }
}
/* 'ATRIAS3D_ZD_Output03:117' hdbar  = polyv(Output.HBarAlpha, r, inf); */
/* 'ATRIAS3D_ZD_Output03:118' if ~RSaturated */
if (!RSaturated) {
    /* 'ATRIAS3D_ZD_Output03:119' jacob_hdbar = polyvd(Output.HBarAlpha, r, inf); */
%if SLibCG_FcnCallArgAccessed(9,54,3,0)
%<SLibCG_AccessArg(9 ,54, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(9,54,3,1)
%<SLibCG_AccessArg(9 ,54, 20)>
%endif

    %<(SLibCGCallSubFcn("Walking01_withElmos_polyvd", ["ControlParams_Output->HBarAlpha", "*r", "%<LibGetMathConstant(LibRealNonFinite("inf"), FcnGetDataTypeIdFromName("double"))>", "jacob_hdbar"], 9, 54, 3))>;
    /* 'ATRIAS3D_ZD_Output03:120' jacob2_hdbar = polyva(Output.HBarAlpha, r, inf); */
%if SLibCG_FcnCallArgAccessed(9,54,4,0)
%<SLibCG_AccessArg(9 ,54, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(9,54,4,1)
%<SLibCG_AccessArg(9 ,54, 20)>
%endif

    %<(SLibCGCallSubFcn("Walking01_withElmos_polyva", ["ControlParams_Output->HBarAlpha", "*r", "%<LibGetMathConstant(LibRealNonFinite("inf"), FcnGetDataTypeIdFromName("double"))>", "jacob2_hdbar"], 9, 54, 4))>;
} else {
    /* 'ATRIAS3D_ZD_Output03:121' else */
    /* 'ATRIAS3D_ZD_Output03:122' jacob_hdbar = zeros(6,1); */
    /* 'ATRIAS3D_ZD_Output03:123' jacob2_hdbar = zeros(6,1); */
    for (i_0 = 0; i_0 < 6; i_0++) {
        jacob_hdbar[i_0] = 0.0;
        jacob2_hdbar[i_0] = 0.0;
    }
}
/* 'ATRIAS3D_ZD_Output03:126' hdbar = sat(hdbar, Output.HBarLimits(:,1), Output.HBarLimits(:,2)); */
%if SLibCG_FcnCallArgAccessed(9,54,14,0)
%<SLibCG_AccessArg(9 ,54, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(9,54,14,1)
%<SLibCG_AccessArg(9 ,54, 20)>
%endif

%<(SLibCGCallSubFcn("Walking01_withElmos_polyv", ["ControlParams_Output->HBarAlpha", "*r", "%<LibGetMathConstant(LibRealNonFinite("inf"), FcnGetDataTypeIdFromName("double"))>", "tmp_0"], 9, 54, 14))>;
%if SLibCG_FcnCallArgAccessed(9,54,5,1)
%<SLibCG_AccessArg(9 ,54, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(9,54,5,2)
%<SLibCG_AccessArg(9 ,54, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(9,54,5,3)
%<SLibCG_AccessArg(9 ,54, 22)>
%endif

%<(SLibCGCallSubFcn("Walking01_withElmos_sat", ["tmp_0", "*(real_T (*)[6])&ControlParams_Output->HBarLimits[0]", "*(real_T (*)[6])&ControlParams_Output->HBarLimits[6]", "hdbar"], 9, 54, 5))>;
/* 'ATRIAS3D_ZD_Output03:127' idxsat = (hdbar == Output.HBarLimits(:,1)) | (hdbar == Output.HBarLimits(:,2)); */
for (i_1 = 0; i_1 < 6; i_1++) {
    idxsat[i_1] = ((hdbar[i_1] == ControlParams_Output->HBarLimits[i_1]) || (ControlParams_Output->HBarLimits[6 + i_1] == hdbar[i_1]));
}
/* 'ATRIAS3D_ZD_Output03:128' jacob_hdbar(idxsat,:) = 0; */
%<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_eu", ["idxsat", "tmp_data", "&i_0"], 9, 54, 27))>;
for (i_1 = 0; i_1 < i_0; i_1++) {
    jacob_hdbar[tmp_data[i_1] - 1] = 0.0;
}
/* 'ATRIAS3D_ZD_Output03:129' jacob2_hdbar(idxsat,:) = 0; */
%<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_eu", ["idxsat", "tmp_data", "&i_0"], 9, 54, 28))>;
for (i_1 = 0; i_1 < i_0; i_1++) {
    jacob2_hdbar[tmp_data[i_1] - 1] = 0.0;
}
/* 'ATRIAS3D_ZD_Output03:131' hd = hd + hdbar; */
/* 'ATRIAS3D_ZD_Output03:132' jacob_h = jacob_h - jacob_hdbar * (Output.Phi.cq - jacob_phid * dsdq); */
for (i_1 = 0; i_1 < 13; i_1++) {
    qmod[i_1] = ControlParams_Output->Phi.cq[i_1] - 0.0 * dsdq[i_1];
}
for (i_1 = 0; i_1 < 6; i_1++) {
    for (i_0 = 0; i_0 < 13; i_0++) {
        jacob_h0_0[i_1 + 6 * i_0] = jacob_h0[6 * i_0 + i_1] - jacob_hd[i_1] * dsdq[i_0];
    }
}
for (i_1 = 0; i_1 < 6; i_1++) {
    for (i_0 = 0; i_0 < 13; i_0++) {
        jacob_hdbar_0[i_1 + 6 * i_0] = jacob_hdbar[i_1] * qmod[i_0];
    }
}
for (i_1 = 0; i_1 < 13; i_1++) {
    for (i_0 = 0; i_0 < 6; i_0++) {
        jacob_h[i_0 + 6 * i_1] = jacob_h0_0[6 * i_1 + i_0] - jacob_hdbar_0[6 * i_1 + i_0];
    }
}
/* 'ATRIAS3D_ZD_Output03:133' jacob_jacobhdqdq = jacob_jacobhdqdq ... */
/* 'ATRIAS3D_ZD_Output03:134'         + jacob_hdbar * jacob2_phid * ds^2 ... */
/* 'ATRIAS3D_ZD_Output03:135'         + jacob2_hdbar * (-jacob_phid^2 * ds^2 - dphi^2 + jacob_phid * dphi * ds); */
c_c = *ds * *ds;
a = (*ds * *ds * -0.0 - a * a) + 0.0 * a * *ds;
%if SLibCG_FcnCallArgAccessed(9,54,13,1)
%<SLibCG_AccessArg(9 ,54, 6)>
%endif

%<(SLibCGCallSubFcn("Walking01_withElmos_bezierva", ["h_alpha", "*s", "tmp_0"], 9, 54, 13))>;
ds_0 = *ds * *ds;
for (i_1 = 0; i_1 < 6; i_1++) {
    jacob_jacobhdqdq[i_1] = (jacob_hdbar[i_1] * 0.0 * c_c + -tmp_0[i_1] * ds_0) + jacob2_hdbar[i_1] * a;
}
/*     %<"\%\% Saturate the desired leg/knee/hip angles"> */
/* 'ATRIAS3D_ZD_Output03:138' hd_min = [150; 150;  15;  15; -20; -20]*pi/180; */
/* 'ATRIAS3D_ZD_Output03:139' hd_max = [220; 220; 120; 120;  20;  20]*pi/180; */
/* 'ATRIAS3D_ZD_Output03:140' sat_correction = (jacob_h0 - T1)*q; */
for (i_1 = 0; i_1 < 7; i_1++) {
    for (i_0 = 0; i_0 < 6; i_0++) {
        jacob_hdbar_0[i_0 + 6 * i_1] = 0.0;
    }
}
for (i_1 = 0; i_1 < 6; i_1++) {
    for (i_0 = 0; i_0 < 6; i_0++) {
        jacob_hdbar_0[i_0 + 6 * (i_1 + 7)] = T0[6 * i_1 + i_0];
    }
}
for (i_1 = 0; i_1 < 13; i_1++) {
    for (i_0 = 0; i_0 < 6; i_0++) {
        jacob_h0_0[i_0 + 6 * i_1] = jacob_h0[6 * i_1 + i_0] - jacob_hdbar_0[6 * i_1 + i_0];
    }
}
/* 'ATRIAS3D_ZD_Output03:141' hd = sat(hd, hd_min + sat_correction, hd_max + sat_correction); */
%if SLibCG_FcnCallArgAccessed(9,54,12,1)
%<SLibCG_AccessArg(9 ,54, 6)>
%endif

%<(SLibCGCallSubFcn("Walking01_withElmos_bezierv", ["h_alpha", "*s", "tmp_0"], 9, 54, 12))>;
for (i_1 = 0; i_1 < 6; i_1++) {
    jacob_hd[i_1] = 0.0;
    for (i_0 = 0; i_0 < 13; i_0++) {
        jacob_hd[i_1] += jacob_h0_0[6 * i_0 + i_1] * q[i_0];
    }
    tmp[i_1] = tmp_0[i_1] + hdbar[i_1];
    jacob_hdbar[i_1] = hd_min[i_1] + jacob_hd[i_1];
    jacob2_hdbar[i_1] = hd_max[i_1] + jacob_hd[i_1];
}
%if SLibCG_FcnCallArgAccessed(9,54,6,3)
%<SLibCG_AccessArg(9 ,54, 9)>
%endif

%<(SLibCGCallSubFcn("Walking01_withElmos_sat", ["tmp", "jacob_hdbar", "jacob2_hdbar", "y"], 9, 54, 6))>;
/* 'ATRIAS3D_ZD_Output03:142' idxsat = (hd == hd_min + sat_correction) | (hd == hd_max + sat_correction); */
for (i_0 = 0; i_0 < 6; i_0++) {
    idxsat[i_0] = ((hd_min[i_0] + jacob_hd[i_0] == y[i_0]) || (hd_max[i_0] + jacob_hd[i_0] == y[i_0]));
}
/* 'ATRIAS3D_ZD_Output03:143' dhd(idxsat) = 0; */
%<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_eu", ["idxsat", "tmp_data", "&i_0"], 9, 54, 29))>;
for (i_1 = 0; i_1 < i_0; i_1++) {
    dhd[tmp_data[i_1] - 1] = 0.0;
}
/* 'ATRIAS3D_ZD_Output03:144' jacob_h(idxsat) = jacob_h0(idxsat); */
%<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_eu", ["idxsat", "tmp_data", "&tmp_sizes"], 9, 54, 30))>;
%<(SLibCGCallSubFcn("Walking01_withEl_eml_li_find_eu", ["idxsat", "tmp_data_0", "&tmp_sizes"], 9, 54, 31))>;
for (i_1 = 0; i_1 < tmp_sizes; i_1++) {
    jacob_h[tmp_data[i_1] - 1] = jacob_h0[tmp_data_0[i_1] - 1];
}
/*  jacob_hd(idxsat) = 0; */
/*     %<"\%\%"> */
/* 'ATRIAS3D_ZD_Output03:147' y  = h0-hd; */
for (i_1 = 0; i_1 < 6; i_1++) {
    y[i_1] = h0[i_1] - y[i_1];
}
/* 'ATRIAS3D_ZD_Output03:148' dy = jacob_h0*dq - dhd; */
for (i_1 = 0; i_1 < 6; i_1++) {
    a = 0.0;
    for (i_0 = 0; i_0 < 13; i_0++) {
        a += jacob_h0[6 * i_0 + i_1] * dq[i_0];
    }
    dy[i_1] = a - dhd[i_1];
}
/*  Correction */
/* 'ATRIAS3D_ZD_Output03:152' h_alpha_corr = Output.HAlphaCorrection; */
/* 'ATRIAS3D_ZD_Output03:153' s_corr_max = Output.SMaxCorrection; */
/* 'ATRIAS3D_ZD_Output03:154' if Output.UseCorrection && any(s <= s_corr_max) */
%if SLibCG_FcnCallArgAccessed(9,54,0,0)
%<SLibCG_AccessArg(9 ,54, 6)>
%<SLibCG_AccessArg(9 ,54, 4)>
%endif

if ((ControlParams_Output->UseCorrection != 0.0) && %<(SLibCGCallSubFcn("Walking01_withElmos_any_o", ["*s <= ControlParams_Output->SMaxCorrection"], 9, 54, 0))>) {
    /* 'ATRIAS3D_ZD_Output03:155' y       = y       -  polyv( h_alpha_corr, s, s_corr_max); */
%if SLibCG_FcnCallArgAccessed(9,54,11,0)
%<SLibCG_AccessArg(9 ,54, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(9,54,11,1)
%<SLibCG_AccessArg(9 ,54, 6)>
%endif
%if SLibCG_FcnCallArgAccessed(9,54,11,2)
%<SLibCG_AccessArg(9 ,54, 4)>
%endif

    %<(SLibCGCallSubFcn("Walking01_withElmos_polyv", ["ControlParams_Output->HAlphaCorrection", "*s", "ControlParams_Output->SMaxCorrection", "tmp_0"], 9, 54, 11))>;
    /* 'ATRIAS3D_ZD_Output03:156' dy      = dy      -  polyvd(h_alpha_corr, s, s_corr_max).*ds; */
%if SLibCG_FcnCallArgAccessed(9,54,10,0)
%<SLibCG_AccessArg(9 ,54, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(9,54,10,1)
%<SLibCG_AccessArg(9 ,54, 6)>
%endif
%if SLibCG_FcnCallArgAccessed(9,54,10,2)
%<SLibCG_AccessArg(9 ,54, 4)>
%endif

    %<(SLibCGCallSubFcn("Walking01_withElmos_polyvd", ["ControlParams_Output->HAlphaCorrection", "*s", "ControlParams_Output->SMaxCorrection", "tmp"], 9, 54, 10))>;
    /* 'ATRIAS3D_ZD_Output03:157' jacob_jacobhdqdq = jacob_jacobhdqdq +  polyva(h_alpha_corr, s, s_corr_max).*(ds.*ds); */
%if SLibCG_FcnCallArgAccessed(9,54,9,0)
%<SLibCG_AccessArg(9 ,54, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(9,54,9,1)
%<SLibCG_AccessArg(9 ,54, 6)>
%endif
%if SLibCG_FcnCallArgAccessed(9,54,9,2)
%<SLibCG_AccessArg(9 ,54, 4)>
%endif

    %<(SLibCGCallSubFcn("Walking01_withElmos_polyva", ["ControlParams_Output->HAlphaCorrection", "*s", "ControlParams_Output->SMaxCorrection", "jacob_hdbar"], 9, 54, 9))>;
    ds_0 = *ds * *ds;
    for (i_1 = 0; i_1 < 6; i_1++) {
        y[i_1] -= tmp_0[i_1];
        dy[i_1] -= tmp[i_1] * *ds;
        jacob_jacobhdqdq[i_1] += jacob_hdbar[i_1] * ds_0;
    }
    /* 'ATRIAS3D_ZD_Output03:158' if (length(s)>1) */
    /* 'ATRIAS3D_ZD_Output03:160' else */
    /* 'ATRIAS3D_ZD_Output03:161' jacob_h = jacob_h - polyvd(h_alpha_corr, s, s_corr_max)*dsdq; */
%if SLibCG_FcnCallArgAccessed(9,54,8,0)
%<SLibCG_AccessArg(9 ,54, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(9,54,8,1)
%<SLibCG_AccessArg(9 ,54, 6)>
%endif
%if SLibCG_FcnCallArgAccessed(9,54,8,2)
%<SLibCG_AccessArg(9 ,54, 4)>
%endif

    %<(SLibCGCallSubFcn("Walking01_withElmos_polyvd", ["ControlParams_Output->HAlphaCorrection", "*s", "ControlParams_Output->SMaxCorrection", "tmp_0"], 9, 54, 8))>;
    for (i_1 = 0; i_1 < 6; i_1++) {
        for (i_0 = 0; i_0 < 13; i_0++) {
            jacob_h[i_1 + 6 * i_0] -= tmp_0[i_1] * dsdq[i_0];
        }
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01__ATRIAS3D_ZD_Output03(\
%assign comma = ""
%<comma>real_T t\
%assign comma = ", "
%<comma>const real_T q[13]\
%assign comma = ", "
%<comma>const real_T dq[13]\
%assign comma = ", "
%<comma>real_T ControlState_StanceLeg\
%assign comma = ", "
%<comma>const OutputParamsBus *ControlParams_Output\
%assign comma = ", "
%<comma>real_T sprev\
%assign comma = ", "
%<comma>real_T *s\
%assign comma = ", "
%<comma>real_T *ds\
%assign comma = ", "
%<comma>real_T h0[6]\
%assign comma = ", "
%<comma>real_T y[6]\
%assign comma = ", "
%<comma>real_T dy[6]\
%assign comma = ", "
%<comma>real_T jacob_h0[78]\
%assign comma = ", "
%<comma>real_T jacob_h[78]\
%assign comma = ", "
%<comma>real_T *s_unsaturated\
%assign comma = ", "
%<comma>real_T *theta\
%assign comma = ", "
%<comma>real_T *dtheta\
%assign comma = ", "
%<comma>real_T *delta_theta\
%assign comma = ", "
%<comma>real_T dsdq[13]\
%assign comma = ", "
%<comma>real_T jacob_jacobhdqdq[6]\
%assign comma = ", "
%<comma>real_T *phi\
%assign comma = ", "
%<comma>real_T *r\
%assign comma = ", "
%<comma>real_T *dr\
%assign comma = ", "
%<comma>real_T hdbar[6]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 54, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_mldivide_p_Fcn55(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T temp;
real_T b_A[36];
int8_T ipiv[6];
int32_T j;
int32_T c;
int32_T ix;
real_T s;
int32_T jy;
int32_T c_ix;
int32_T d;
int32_T ijA;
int32_T b_kAcol;
memcpy(&b_A[0], &A[0], 36U * sizeof(real_T));
for (ix = 0; ix < 6; ix++) {
    ipiv[ix] = (int8_T)(1 + ix);
}
for (j = 0; j < 5; j++) {
    c = j * 7;
    jy = 0;
    ix = c;
    temp = fabs(b_A[c]);
    for (b_kAcol = 1; b_kAcol + 1 <= 6 - j; b_kAcol++) {
        ix++;
        s = fabs(b_A[ix]);
        if (s > temp) {
            jy = b_kAcol;
            temp = s;
        }
    }
    if (b_A[c + jy] != 0.0) {
        if (jy != 0) {
            ipiv[j] = (int8_T)((j + jy) + 1);
            ix = j;
            b_kAcol = j + jy;
            for (jy = 0; jy < 6; jy++) {
                temp = b_A[ix];
                b_A[ix] = b_A[b_kAcol];
                b_A[b_kAcol] = temp;
                ix += 6;
                b_kAcol += 6;
            }
        }
        ix = (c - j) + 6;
        for (b_kAcol = c + 1; b_kAcol + 1 <= ix; b_kAcol++) {
            b_A[b_kAcol] /= b_A[c];
        }
    }
    b_kAcol = c;
    jy = c + 6;
    for (ix = 1; ix <= 5 - j; ix++) {
        temp = b_A[jy];
        if (b_A[jy] != 0.0) {
            c_ix = c + 1;
            d = (b_kAcol - j) + 12;
            for (ijA = 7 + b_kAcol; ijA + 1 <= d; ijA++) {
                b_A[ijA] += b_A[c_ix] * -temp;
                c_ix++;
            }
        }
        jy += 6;
        b_kAcol += 6;
    }
}
for (ix = 0; ix < 5; ix++) {
    if (ix + 1 != ipiv[ix]) {
        temp = B[ix];
        B[ix] = B[ipiv[ix] - 1];
        B[ipiv[ix] - 1] = temp;
    }
}
for (ix = 0; ix < 6; ix++) {
    b_kAcol = 6 * ix;
    if (B[ix] != 0.0) {
        for (jy = ix + 1; jy + 1 < 7; jy++) {
            B[jy] -= b_A[jy + b_kAcol] * B[ix];
        }
    }
}
for (ix = 5; ix >= 0; ix += -1) {
    b_kAcol = 6 * ix;
    if (B[ix] != 0.0) {
        B[ix] /= b_A[ix + b_kAcol];
        for (jy = 0; jy + 1 <= ix; jy++) {
            B[jy] -= b_A[jy + b_kAcol] * B[ix];
        }
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withElmos_mldivide_p(\
%assign comma = ""
%<comma>const real_T A[36]\
%assign comma = ", "
%<comma>real_T B[6]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 55, fcnProtoType)>
%return fcnBuff
%endfunction

%function LA_LS_Revised_Saturation_Case_1_Fcn56(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
/* %<"\%\%\%\%\%  03-Jun-2013 08:50:09"> */
/* %<"\%\%\%"> */
/* ------------------------------------------------------ */
/*  u_opt */
/* 'LA_LS_Revised_Saturation_Case_1:9' u_opt = zeros(2,1); */
/* 'LA_LS_Revised_Saturation_Case_1:10' u_opt(1) = - ((2*u_LS + u_LA*w)*(w - 4))/(8*w) - ((2*u_LS - u_LA*w)*(w + 4))/(8*w); */
u_opt[0] = -((2.0 * u_LS + u_LA * w) * (w - 4.0)) / (8.0 * w) - (2.0 * u_LS - u_LA * w) * (w + 4.0) / (8.0 * w);
/* 'LA_LS_Revised_Saturation_Case_1:11' u_opt(2) = ((2*u_LS + u_LA*w)*(w + 4))/(8*w) + ((2*u_LS - u_LA*w)*(w - 4))/(8*w); */
u_opt[1] = (2.0 * u_LS + u_LA * w) * (w + 4.0) / (8.0 * w) + (2.0 * u_LS - u_LA * w) * (w - 4.0) / (8.0 * w);
/* ------------------------------------------------------ */
/*  L_opt */
/* 'LA_LS_Revised_Saturation_Case_1:14' L_opt = zeros(4,1); */
/* 'LA_LS_Revised_Saturation_Case_1:15' L_opt(1) = 0; */
L_opt[0] = 0.0;
/* 'LA_LS_Revised_Saturation_Case_1:16' L_opt(2) = 0; */
L_opt[1] = 0.0;
/* 'LA_LS_Revised_Saturation_Case_1:17' L_opt(3) = 0; */
L_opt[2] = 0.0;
/* 'LA_LS_Revised_Saturation_Case_1:18' L_opt(4) = 0; */
L_opt[3] = 0.0;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void LA_LS_Revised_Saturation_Case_1(\
%assign comma = ""
%<comma>real_T u_LS\
%assign comma = ", "
%<comma>real_T u_LA\
%assign comma = ", "
%<comma>real_T w\
%assign comma = ", "
%<comma>real_T u_opt[2]\
%assign comma = ", "
%<comma>real_T L_opt[4]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 56, fcnProtoType)>
%return fcnBuff
%endfunction

%function LA_LS_Revised_Saturation_Case_2_Fcn57(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
/* %<"\%\%\%\%\%  03-Jun-2013 08:50:11"> */
/* %<"\%\%\%"> */
/* ------------------------------------------------------ */
/*  u_opt */
/* 'LA_LS_Revised_Saturation_Case_2:9' u_opt = zeros(2,1); */
/* 'LA_LS_Revised_Saturation_Case_2:10' u_opt(1) = u1_min; */
u_opt[0] = u1_min;
/* 'LA_LS_Revised_Saturation_Case_2:11' u_opt(2) = (4*u1_min + 4*u_LS - u1_min*w + 2*u_LA*w)/(w + 4); */
u_opt[1] = (((4.0 * u1_min + 4.0 * u_LS) - u1_min * w) + 2.0 * u_LA * w) / (w + 4.0);
/* ------------------------------------------------------ */
/*  L_opt */
/* 'LA_LS_Revised_Saturation_Case_2:14' L_opt = zeros(4,1); */
/* 'LA_LS_Revised_Saturation_Case_2:15' L_opt(1) = (8*u1_min*w - 8*u_LA*w + 4*u_LS*w)/(w + 4); */
L_opt[0] = ((8.0 * u1_min * w - 8.0 * u_LA * w) + 4.0 * u_LS * w) / (w + 4.0);
/* 'LA_LS_Revised_Saturation_Case_2:16' L_opt(2) = 0; */
L_opt[1] = 0.0;
/* 'LA_LS_Revised_Saturation_Case_2:17' L_opt(3) = 0; */
L_opt[2] = 0.0;
/* 'LA_LS_Revised_Saturation_Case_2:18' L_opt(4) = 0; */
L_opt[3] = 0.0;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void LA_LS_Revised_Saturation_Case_2(\
%assign comma = ""
%<comma>real_T u_LS\
%assign comma = ", "
%<comma>real_T u_LA\
%assign comma = ", "
%<comma>real_T w\
%assign comma = ", "
%<comma>real_T u1_min\
%assign comma = ", "
%<comma>real_T u_opt[2]\
%assign comma = ", "
%<comma>real_T L_opt[4]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 57, fcnProtoType)>
%return fcnBuff
%endfunction

%function LA_LS_Revised_Saturation_Case_3_Fcn58(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
/* %<"\%\%\%\%\%  03-Jun-2013 08:50:11"> */
/* %<"\%\%\%"> */
/* ------------------------------------------------------ */
/*  u_opt */
/* 'LA_LS_Revised_Saturation_Case_3:9' u_opt = zeros(2,1); */
/* 'LA_LS_Revised_Saturation_Case_3:10' u_opt(1) = u1_max; */
u_opt[0] = u1_max;
/* 'LA_LS_Revised_Saturation_Case_3:11' u_opt(2) = (4*u1_max + 4*u_LS - u1_max*w + 2*u_LA*w)/(w + 4); */
u_opt[1] = (((4.0 * u1_max + 4.0 * u_LS) - u1_max * w) + 2.0 * u_LA * w) / (w + 4.0);
/* ------------------------------------------------------ */
/*  L_opt */
/* 'LA_LS_Revised_Saturation_Case_3:14' L_opt = zeros(4,1); */
/* 'LA_LS_Revised_Saturation_Case_3:15' L_opt(1) = 0; */
L_opt[0] = 0.0;
/* 'LA_LS_Revised_Saturation_Case_3:16' L_opt(2) = -(8*u1_max*w - 8*u_LA*w + 4*u_LS*w)/(w + 4); */
L_opt[1] = -((8.0 * u1_max * w - 8.0 * u_LA * w) + 4.0 * u_LS * w) / (w + 4.0);
/* 'LA_LS_Revised_Saturation_Case_3:17' L_opt(3) = 0; */
L_opt[2] = 0.0;
/* 'LA_LS_Revised_Saturation_Case_3:18' L_opt(4) = 0; */
L_opt[3] = 0.0;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void LA_LS_Revised_Saturation_Case_3(\
%assign comma = ""
%<comma>real_T u_LS\
%assign comma = ", "
%<comma>real_T u_LA\
%assign comma = ", "
%<comma>real_T w\
%assign comma = ", "
%<comma>real_T u1_max\
%assign comma = ", "
%<comma>real_T u_opt[2]\
%assign comma = ", "
%<comma>real_T L_opt[4]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 58, fcnProtoType)>
%return fcnBuff
%endfunction

%function LA_LS_Revised_Saturation_Case_4_Fcn59(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
/* %<"\%\%\%\%\%  03-Jun-2013 08:50:11"> */
/* %<"\%\%\%"> */
/* ------------------------------------------------------ */
/*  u_opt */
/* 'LA_LS_Revised_Saturation_Case_4:9' u_opt = zeros(2,1); */
/* 'LA_LS_Revised_Saturation_Case_4:10' u_opt(1) = (4*u2_min - 4*u_LS - u2_min*w + 2*u_LA*w)/(w + 4); */
u_opt[0] = (((4.0 * u2_min - 4.0 * u_LS) - u2_min * w) + 2.0 * u_LA * w) / (w + 4.0);
/* 'LA_LS_Revised_Saturation_Case_4:11' u_opt(2) = u2_min; */
u_opt[1] = u2_min;
/* ------------------------------------------------------ */
/*  L_opt */
/* 'LA_LS_Revised_Saturation_Case_4:14' L_opt = zeros(4,1); */
/* 'LA_LS_Revised_Saturation_Case_4:15' L_opt(1) = 0; */
L_opt[0] = 0.0;
/* 'LA_LS_Revised_Saturation_Case_4:16' L_opt(2) = 0; */
L_opt[1] = 0.0;
/* 'LA_LS_Revised_Saturation_Case_4:17' L_opt(3) = -(8*u_LA*w - 8*u2_min*w + 4*u_LS*w)/(w + 4); */
L_opt[2] = -((8.0 * u_LA * w - 8.0 * u2_min * w) + 4.0 * u_LS * w) / (w + 4.0);
/* 'LA_LS_Revised_Saturation_Case_4:18' L_opt(4) = 0; */
L_opt[3] = 0.0;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void LA_LS_Revised_Saturation_Case_4(\
%assign comma = ""
%<comma>real_T u_LS\
%assign comma = ", "
%<comma>real_T u_LA\
%assign comma = ", "
%<comma>real_T w\
%assign comma = ", "
%<comma>real_T u2_min\
%assign comma = ", "
%<comma>real_T u_opt[2]\
%assign comma = ", "
%<comma>real_T L_opt[4]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 59, fcnProtoType)>
%return fcnBuff
%endfunction

%function LA_LS_Revised_Saturation_Case_5_Fcn60(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
/* %<"\%\%\%\%\%  03-Jun-2013 08:50:12"> */
/* %<"\%\%\%"> */
/* ------------------------------------------------------ */
/*  u_opt */
/* 'LA_LS_Revised_Saturation_Case_5:9' u_opt = zeros(2,1); */
/* 'LA_LS_Revised_Saturation_Case_5:10' u_opt(1) = (4*u2_max - 4*u_LS - u2_max*w + 2*u_LA*w)/(w + 4); */
u_opt[0] = (((4.0 * u2_max - 4.0 * u_LS) - u2_max * w) + 2.0 * u_LA * w) / (w + 4.0);
/* 'LA_LS_Revised_Saturation_Case_5:11' u_opt(2) = u2_max; */
u_opt[1] = u2_max;
/* ------------------------------------------------------ */
/*  L_opt */
/* 'LA_LS_Revised_Saturation_Case_5:14' L_opt = zeros(4,1); */
/* 'LA_LS_Revised_Saturation_Case_5:15' L_opt(1) = 0; */
L_opt[0] = 0.0;
/* 'LA_LS_Revised_Saturation_Case_5:16' L_opt(2) = 0; */
L_opt[1] = 0.0;
/* 'LA_LS_Revised_Saturation_Case_5:17' L_opt(3) = 0; */
L_opt[2] = 0.0;
/* 'LA_LS_Revised_Saturation_Case_5:18' L_opt(4) = (8*u_LA*w - 8*u2_max*w + 4*u_LS*w)/(w + 4); */
L_opt[3] = ((8.0 * u_LA * w - 8.0 * u2_max * w) + 4.0 * u_LS * w) / (w + 4.0);
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void LA_LS_Revised_Saturation_Case_5(\
%assign comma = ""
%<comma>real_T u_LS\
%assign comma = ", "
%<comma>real_T u_LA\
%assign comma = ", "
%<comma>real_T w\
%assign comma = ", "
%<comma>real_T u2_max\
%assign comma = ", "
%<comma>real_T u_opt[2]\
%assign comma = ", "
%<comma>real_T L_opt[4]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 60, fcnProtoType)>
%return fcnBuff
%endfunction

%function LA_LS_Revised_Saturation_Case_6_Fcn61(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
/* %<"\%\%\%\%\%  03-Jun-2013 08:50:12"> */
/* %<"\%\%\%"> */
/* ------------------------------------------------------ */
/*  u_opt */
/* 'LA_LS_Revised_Saturation_Case_6:9' u_opt = zeros(2,1); */
/* 'LA_LS_Revised_Saturation_Case_6:10' u_opt(1) = u1_min; */
u_opt[0] = u1_min;
/* 'LA_LS_Revised_Saturation_Case_6:11' u_opt(2) = u2_min; */
u_opt[1] = u2_min;
/* ------------------------------------------------------ */
/*  L_opt */
/* 'LA_LS_Revised_Saturation_Case_6:14' L_opt = zeros(4,1); */
/* 'LA_LS_Revised_Saturation_Case_6:15' L_opt(1) = 2*u1_min - 2*u2_min + 2*u_LS + w*(u1_min/2 + u2_min/2 - u_LA); */
L_opt[0] = ((u1_min / 2.0 + u2_min / 2.0) - u_LA) * w + ((2.0 * u1_min - 2.0 * u2_min) + 2.0 * u_LS);
/* 'LA_LS_Revised_Saturation_Case_6:16' L_opt(2) = 0; */
L_opt[1] = 0.0;
/* 'LA_LS_Revised_Saturation_Case_6:17' L_opt(3) = 2*u2_min - 2*u1_min - 2*u_LS + w*(u1_min/2 + u2_min/2 - u_LA); */
L_opt[2] = ((u1_min / 2.0 + u2_min / 2.0) - u_LA) * w + ((2.0 * u2_min - 2.0 * u1_min) - 2.0 * u_LS);
/* 'LA_LS_Revised_Saturation_Case_6:18' L_opt(4) = 0; */
L_opt[3] = 0.0;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void LA_LS_Revised_Saturation_Case_6(\
%assign comma = ""
%<comma>real_T u_LS\
%assign comma = ", "
%<comma>real_T u_LA\
%assign comma = ", "
%<comma>real_T w\
%assign comma = ", "
%<comma>real_T u1_min\
%assign comma = ", "
%<comma>real_T u2_min\
%assign comma = ", "
%<comma>real_T u_opt[2]\
%assign comma = ", "
%<comma>real_T L_opt[4]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 61, fcnProtoType)>
%return fcnBuff
%endfunction

%function LA_LS_Revised_Saturation_Case_7_Fcn62(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
/* %<"\%\%\%\%\%  03-Jun-2013 08:50:13"> */
/* %<"\%\%\%"> */
/* ------------------------------------------------------ */
/*  u_opt */
/* 'LA_LS_Revised_Saturation_Case_7:9' u_opt = zeros(2,1); */
/* 'LA_LS_Revised_Saturation_Case_7:10' u_opt(1) = u1_min; */
u_opt[0] = u1_min;
/* 'LA_LS_Revised_Saturation_Case_7:11' u_opt(2) = u2_max; */
u_opt[1] = u2_max;
/* ------------------------------------------------------ */
/*  L_opt */
/* 'LA_LS_Revised_Saturation_Case_7:14' L_opt = zeros(4,1); */
/* 'LA_LS_Revised_Saturation_Case_7:15' L_opt(1) = 2*u1_min - 2*u2_max + 2*u_LS + w*(u1_min/2 + u2_max/2 - u_LA); */
L_opt[0] = ((u1_min / 2.0 + u2_max / 2.0) - u_LA) * w + ((2.0 * u1_min - 2.0 * u2_max) + 2.0 * u_LS);
/* 'LA_LS_Revised_Saturation_Case_7:16' L_opt(2) = 0; */
L_opt[1] = 0.0;
/* 'LA_LS_Revised_Saturation_Case_7:17' L_opt(3) = 0; */
L_opt[2] = 0.0;
/* 'LA_LS_Revised_Saturation_Case_7:18' L_opt(4) = 2*u1_min - 2*u2_max + 2*u_LS - (u1_min*w)/2 - (u2_max*w)/2 + u_LA*w; */
L_opt[3] = ((((2.0 * u1_min - 2.0 * u2_max) + 2.0 * u_LS) - u1_min * w / 2.0) - u2_max * w / 2.0) + u_LA * w;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void LA_LS_Revised_Saturation_Case_7(\
%assign comma = ""
%<comma>real_T u_LS\
%assign comma = ", "
%<comma>real_T u_LA\
%assign comma = ", "
%<comma>real_T w\
%assign comma = ", "
%<comma>real_T u1_min\
%assign comma = ", "
%<comma>real_T u2_max\
%assign comma = ", "
%<comma>real_T u_opt[2]\
%assign comma = ", "
%<comma>real_T L_opt[4]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 62, fcnProtoType)>
%return fcnBuff
%endfunction

%function LA_LS_Revised_Saturation_Case_8_Fcn63(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
/* %<"\%\%\%\%\%  03-Jun-2013 08:50:13"> */
/* %<"\%\%\%"> */
/* ------------------------------------------------------ */
/*  u_opt */
/* 'LA_LS_Revised_Saturation_Case_8:9' u_opt = zeros(2,1); */
/* 'LA_LS_Revised_Saturation_Case_8:10' u_opt(1) = u1_max; */
u_opt[0] = u1_max;
/* 'LA_LS_Revised_Saturation_Case_8:11' u_opt(2) = u2_min; */
u_opt[1] = u2_min;
/* ------------------------------------------------------ */
/*  L_opt */
/* 'LA_LS_Revised_Saturation_Case_8:14' L_opt = zeros(4,1); */
/* 'LA_LS_Revised_Saturation_Case_8:15' L_opt(1) = 0; */
L_opt[0] = 0.0;
/* 'LA_LS_Revised_Saturation_Case_8:16' L_opt(2) = 2*u2_min - 2*u1_max - 2*u_LS - (u2_min*w)/2 - (u1_max*w)/2 + u_LA*w; */
L_opt[1] = ((((2.0 * u2_min - 2.0 * u1_max) - 2.0 * u_LS) - u2_min * w / 2.0) - u1_max * w / 2.0) + u_LA * w;
/* 'LA_LS_Revised_Saturation_Case_8:17' L_opt(3) = 2*u2_min - 2*u1_max - 2*u_LS + w*(u2_min/2 + u1_max/2 - u_LA); */
L_opt[2] = ((u2_min / 2.0 + u1_max / 2.0) - u_LA) * w + ((2.0 * u2_min - 2.0 * u1_max) - 2.0 * u_LS);
/* 'LA_LS_Revised_Saturation_Case_8:18' L_opt(4) = 0; */
L_opt[3] = 0.0;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void LA_LS_Revised_Saturation_Case_8(\
%assign comma = ""
%<comma>real_T u_LS\
%assign comma = ", "
%<comma>real_T u_LA\
%assign comma = ", "
%<comma>real_T w\
%assign comma = ", "
%<comma>real_T u1_max\
%assign comma = ", "
%<comma>real_T u2_min\
%assign comma = ", "
%<comma>real_T u_opt[2]\
%assign comma = ", "
%<comma>real_T L_opt[4]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 63, fcnProtoType)>
%return fcnBuff
%endfunction

%function LA_LS_Revised_Saturation_Case_9_Fcn64(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
/* %<"\%\%\%\%\%  03-Jun-2013 08:50:13"> */
/* %<"\%\%\%"> */
/* ------------------------------------------------------ */
/*  u_opt */
/* 'LA_LS_Revised_Saturation_Case_9:9' u_opt = zeros(2,1); */
/* 'LA_LS_Revised_Saturation_Case_9:10' u_opt(1) = u1_max; */
u_opt[0] = u1_max;
/* 'LA_LS_Revised_Saturation_Case_9:11' u_opt(2) = u2_max; */
u_opt[1] = u2_max;
/* ------------------------------------------------------ */
/*  L_opt */
/* 'LA_LS_Revised_Saturation_Case_9:14' L_opt = zeros(4,1); */
/* 'LA_LS_Revised_Saturation_Case_9:15' L_opt(1) = 0; */
L_opt[0] = 0.0;
/* 'LA_LS_Revised_Saturation_Case_9:16' L_opt(2) = 2*u2_max - 2*u1_max - 2*u_LS - (u1_max*w)/2 - (u2_max*w)/2 + u_LA*w; */
L_opt[1] = ((((2.0 * u2_max - 2.0 * u1_max) - 2.0 * u_LS) - u1_max * w / 2.0) - u2_max * w / 2.0) + u_LA * w;
/* 'LA_LS_Revised_Saturation_Case_9:17' L_opt(3) = 0; */
L_opt[2] = 0.0;
/* 'LA_LS_Revised_Saturation_Case_9:18' L_opt(4) = 2*u1_max - 2*u2_max + 2*u_LS - (u1_max*w)/2 - (u2_max*w)/2 + u_LA*w; */
L_opt[3] = ((((2.0 * u1_max - 2.0 * u2_max) + 2.0 * u_LS) - u1_max * w / 2.0) - u2_max * w / 2.0) + u_LA * w;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void LA_LS_Revised_Saturation_Case_9(\
%assign comma = ""
%<comma>real_T u_LS\
%assign comma = ", "
%<comma>real_T u_LA\
%assign comma = ", "
%<comma>real_T w\
%assign comma = ", "
%<comma>real_T u1_max\
%assign comma = ", "
%<comma>real_T u2_max\
%assign comma = ", "
%<comma>real_T u_opt[2]\
%assign comma = ", "
%<comma>real_T L_opt[4]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 64, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walkin_LA_LS_Revised_Saturation_Fcn65(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T u_opt_1[2];
real_T L_opt_1[4];
real_T u_opt_2[2];
real_T L_opt_2[4];
real_T u_opt_3[2];
real_T L_opt_3[4];
real_T u_opt_4[2];
real_T L_opt_4[4];
real_T u_opt_5[2];
real_T L_opt_5[4];
real_T u_opt_6[2];
real_T L_opt_6[4];
real_T u_opt_7[2];
real_T L_opt_7[4];
real_T u_opt_8[2];
real_T L_opt_8[4];
real_T u_opt_9[2];
real_T L_opt_9[4];
int32_T ixstart;
int32_T ix;
boolean_T exitg27;
real_T LB_idx_0;
real_T UB_idx_0;
%assign _modelSS = ""

/* -------------------------------------------------------------------------- */
/*  Inputs: */
/*  1) u_LS: desired LS torque */
/*  2) u_LA: desired LA torque */
/*  3) w: weight in the cost function. Note that w should be strictly positive. */
/*  The cost function is defined as */
/*  J = (Delta J_LS)^2 + w * (Delta J_LA)^2 */
/*  4) u1_min: lower bound on u1 */
/*  5) u1_max: upper bound on u1 */
/*  6) u2_min: lower bound on u2 */
/*  7) u2_max: upper bound on u2 */
/* -------------------------------------------------------------------------- */
/*  Outputs: */
/*  1) u_opt: optimal solution of the QP */
/*  2) L_opt: Lagrange multipliers at the optimal solution */
/*  3) case_m: case number. */
/* -------------------------------------------------------------------------- */
/*  Consider different cases */
/* 'LA_LS_Revised_Saturation:30' [u_opt_1,L_opt_1] = LA_LS_Revised_Saturation_Case_1(u_LS,u_LA,w,u1_min,u1_max,u2_min,u2_max); */
%if SLibCG_FcnCallArgAccessed(9,65,0,0)
%<SLibCG_AccessArg(9 ,65, 0)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,0,1)
%<SLibCG_AccessArg(9 ,65, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,0,2)
%<SLibCG_AccessArg(9 ,65, 2)>
%endif

%<(SLibCGCallSubFcn("LA_LS_Revised_Saturation_Case_1", ["u_LS", "u_LA", "w", "u_opt_1", "L_opt_1"], 9, 65, 0))>;
/* 'LA_LS_Revised_Saturation:31' [u_opt_2,L_opt_2] = LA_LS_Revised_Saturation_Case_2(u_LS,u_LA,w,u1_min,u1_max,u2_min,u2_max); */
%if SLibCG_FcnCallArgAccessed(9,65,1,0)
%<SLibCG_AccessArg(9 ,65, 0)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,1,1)
%<SLibCG_AccessArg(9 ,65, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,1,2)
%<SLibCG_AccessArg(9 ,65, 2)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,1,3)
%<SLibCG_AccessArg(9 ,65, 3)>
%endif

%<(SLibCGCallSubFcn("LA_LS_Revised_Saturation_Case_2", ["u_LS", "u_LA", "w", "u1_min", "u_opt_2", "L_opt_2"], 9, 65, 1))>;
/* 'LA_LS_Revised_Saturation:32' [u_opt_3,L_opt_3] = LA_LS_Revised_Saturation_Case_3(u_LS,u_LA,w,u1_min,u1_max,u2_min,u2_max); */
%if SLibCG_FcnCallArgAccessed(9,65,2,0)
%<SLibCG_AccessArg(9 ,65, 0)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,2,1)
%<SLibCG_AccessArg(9 ,65, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,2,2)
%<SLibCG_AccessArg(9 ,65, 2)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,2,3)
%<SLibCG_AccessArg(9 ,65, 4)>
%endif

%<(SLibCGCallSubFcn("LA_LS_Revised_Saturation_Case_3", ["u_LS", "u_LA", "w", "u1_max", "u_opt_3", "L_opt_3"], 9, 65, 2))>;
/* 'LA_LS_Revised_Saturation:33' [u_opt_4,L_opt_4] = LA_LS_Revised_Saturation_Case_4(u_LS,u_LA,w,u1_min,u1_max,u2_min,u2_max); */
%if SLibCG_FcnCallArgAccessed(9,65,3,0)
%<SLibCG_AccessArg(9 ,65, 0)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,3,1)
%<SLibCG_AccessArg(9 ,65, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,3,2)
%<SLibCG_AccessArg(9 ,65, 2)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,3,3)
%<SLibCG_AccessArg(9 ,65, 5)>
%endif

%<(SLibCGCallSubFcn("LA_LS_Revised_Saturation_Case_4", ["u_LS", "u_LA", "w", "u2_min", "u_opt_4", "L_opt_4"], 9, 65, 3))>;
/* 'LA_LS_Revised_Saturation:34' [u_opt_5,L_opt_5] = LA_LS_Revised_Saturation_Case_5(u_LS,u_LA,w,u1_min,u1_max,u2_min,u2_max); */
%if SLibCG_FcnCallArgAccessed(9,65,4,0)
%<SLibCG_AccessArg(9 ,65, 0)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,4,1)
%<SLibCG_AccessArg(9 ,65, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,4,2)
%<SLibCG_AccessArg(9 ,65, 2)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,4,3)
%<SLibCG_AccessArg(9 ,65, 6)>
%endif

%<(SLibCGCallSubFcn("LA_LS_Revised_Saturation_Case_5", ["u_LS", "u_LA", "w", "u2_max", "u_opt_5", "L_opt_5"], 9, 65, 4))>;
/* 'LA_LS_Revised_Saturation:35' [u_opt_6,L_opt_6] = LA_LS_Revised_Saturation_Case_6(u_LS,u_LA,w,u1_min,u1_max,u2_min,u2_max); */
%if SLibCG_FcnCallArgAccessed(9,65,5,0)
%<SLibCG_AccessArg(9 ,65, 0)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,5,1)
%<SLibCG_AccessArg(9 ,65, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,5,2)
%<SLibCG_AccessArg(9 ,65, 2)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,5,3)
%<SLibCG_AccessArg(9 ,65, 3)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,5,4)
%<SLibCG_AccessArg(9 ,65, 5)>
%endif

%<(SLibCGCallSubFcn("LA_LS_Revised_Saturation_Case_6", ["u_LS", "u_LA", "w", "u1_min", "u2_min", "u_opt_6", "L_opt_6"], 9, 65, 5))>;
/* 'LA_LS_Revised_Saturation:36' [u_opt_7,L_opt_7] = LA_LS_Revised_Saturation_Case_7(u_LS,u_LA,w,u1_min,u1_max,u2_min,u2_max); */
%if SLibCG_FcnCallArgAccessed(9,65,6,0)
%<SLibCG_AccessArg(9 ,65, 0)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,6,1)
%<SLibCG_AccessArg(9 ,65, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,6,2)
%<SLibCG_AccessArg(9 ,65, 2)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,6,3)
%<SLibCG_AccessArg(9 ,65, 3)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,6,4)
%<SLibCG_AccessArg(9 ,65, 6)>
%endif

%<(SLibCGCallSubFcn("LA_LS_Revised_Saturation_Case_7", ["u_LS", "u_LA", "w", "u1_min", "u2_max", "u_opt_7", "L_opt_7"], 9, 65, 6))>;
/* 'LA_LS_Revised_Saturation:37' [u_opt_8,L_opt_8] = LA_LS_Revised_Saturation_Case_8(u_LS,u_LA,w,u1_min,u1_max,u2_min,u2_max); */
%if SLibCG_FcnCallArgAccessed(9,65,7,0)
%<SLibCG_AccessArg(9 ,65, 0)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,7,1)
%<SLibCG_AccessArg(9 ,65, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,7,2)
%<SLibCG_AccessArg(9 ,65, 2)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,7,3)
%<SLibCG_AccessArg(9 ,65, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,7,4)
%<SLibCG_AccessArg(9 ,65, 5)>
%endif

%<(SLibCGCallSubFcn("LA_LS_Revised_Saturation_Case_8", ["u_LS", "u_LA", "w", "u1_max", "u2_min", "u_opt_8", "L_opt_8"], 9, 65, 7))>;
/* 'LA_LS_Revised_Saturation:38' [u_opt_9,L_opt_9] = LA_LS_Revised_Saturation_Case_9(u_LS,u_LA,w,u1_min,u1_max,u2_min,u2_max); */
%if SLibCG_FcnCallArgAccessed(9,65,8,0)
%<SLibCG_AccessArg(9 ,65, 0)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,8,1)
%<SLibCG_AccessArg(9 ,65, 1)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,8,2)
%<SLibCG_AccessArg(9 ,65, 2)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,8,3)
%<SLibCG_AccessArg(9 ,65, 4)>
%endif
%if SLibCG_FcnCallArgAccessed(9,65,8,4)
%<SLibCG_AccessArg(9 ,65, 6)>
%endif

%<(SLibCGCallSubFcn("LA_LS_Revised_Saturation_Case_9", ["u_LS", "u_LA", "w", "u1_max", "u2_max", "u_opt_9", "L_opt_9"], 9, 65, 8))>;
/*  Lower and upper bounds for [u1; u2] */
/* 'LA_LS_Revised_Saturation:41' LB = [u1_min; u2_min]; */
/* 'LA_LS_Revised_Saturation:42' UB = [u1_max; u2_max]; */
/*  Set the initial value */
/* 'LA_LS_Revised_Saturation:45' u_opt = zeros(2,1); */
u_opt[0] = 0.0;
u_opt[1] = 0.0;
/* 'LA_LS_Revised_Saturation:46' L_opt = zeros(4,1); */
/* 'LA_LS_Revised_Saturation:47' case_n = 0; */
/*  Case 1 */
/* 'LA_LS_Revised_Saturation:49' if (max(u_opt_1-UB)<=0) && (min(u_opt_1-LB)>=0) && (min(L_opt_1)>=0) */
UB_idx_0 = u_opt_1[0] - u1_max;
LB_idx_0 = u_opt_1[1] - u2_max;
ixstart = 1;
if (rtIsNaN(UB_idx_0)) {
    ix = 2;
    exitg27 = false;
    while ((!exitg27) && (ix < 3)) {
        ixstart = 2;
        if (!rtIsNaN(LB_idx_0)) {
            UB_idx_0 = LB_idx_0;
            exitg27 = true;
        } else {
            ix = 3;
        }
    }
}
if ((ixstart < 2) && (LB_idx_0 > UB_idx_0)) {
    UB_idx_0 = LB_idx_0;
}
if (UB_idx_0 <= 0.0) {
    UB_idx_0 = u_opt_1[0] - u1_min;
    LB_idx_0 = u_opt_1[1] - u2_min;
    ixstart = 1;
    if (rtIsNaN(UB_idx_0)) {
        ix = 2;
        exitg27 = false;
        while ((!exitg27) && (ix < 3)) {
            ixstart = 2;
            if (!rtIsNaN(LB_idx_0)) {
                UB_idx_0 = LB_idx_0;
                exitg27 = true;
            } else {
                ix = 3;
            }
        }
    }
    if ((ixstart < 2) && (LB_idx_0 < UB_idx_0)) {
        UB_idx_0 = LB_idx_0;
    }
    if (UB_idx_0 >= 0.0) {
        ixstart = 1;
        UB_idx_0 = L_opt_1[0];
        if (rtIsNaN(L_opt_1[0])) {
            ix = 2;
            exitg27 = false;
            while ((!exitg27) && (ix < 5)) {
                ixstart = ix;
                if (!rtIsNaN(L_opt_1[ix - 1])) {
                    UB_idx_0 = L_opt_1[ix - 1];
                    exitg27 = true;
                } else {
                    ix++;
                }
            }
        }
        if (ixstart < 4) {
            while (ixstart + 1 < 5) {
                if (L_opt_1[ixstart] < UB_idx_0) {
                    UB_idx_0 = L_opt_1[ixstart];
                }
                ixstart++;
            }
        }
        if (UB_idx_0 >= 0.0) {
            /* 'LA_LS_Revised_Saturation:50' u_opt = u_opt_1; */
            u_opt[0] = u_opt_1[0];
            u_opt[1] = u_opt_1[1];
            /* 'LA_LS_Revised_Saturation:51' L_opt = L_opt_1; */
            /* 'LA_LS_Revised_Saturation:52' case_n = 1; */
        }
    }
}
/*  Case 2 */
/* 'LA_LS_Revised_Saturation:56' if (max(u_opt_2-UB)<=0) && (min(u_opt_2-LB)>=0) && (min(L_opt_2)>=0) */
UB_idx_0 = u_opt_2[0] - u1_max;
LB_idx_0 = u_opt_2[1] - u2_max;
ixstart = 1;
if (rtIsNaN(UB_idx_0)) {
    ix = 2;
    exitg27 = false;
    while ((!exitg27) && (ix < 3)) {
        ixstart = 2;
        if (!rtIsNaN(LB_idx_0)) {
            UB_idx_0 = LB_idx_0;
            exitg27 = true;
        } else {
            ix = 3;
        }
    }
}
if ((ixstart < 2) && (LB_idx_0 > UB_idx_0)) {
    UB_idx_0 = LB_idx_0;
}
if (UB_idx_0 <= 0.0) {
    UB_idx_0 = u_opt_2[0] - u1_min;
    LB_idx_0 = u_opt_2[1] - u2_min;
    ixstart = 1;
    if (rtIsNaN(UB_idx_0)) {
        ix = 2;
        exitg27 = false;
        while ((!exitg27) && (ix < 3)) {
            ixstart = 2;
            if (!rtIsNaN(LB_idx_0)) {
                UB_idx_0 = LB_idx_0;
                exitg27 = true;
            } else {
                ix = 3;
            }
        }
    }
    if ((ixstart < 2) && (LB_idx_0 < UB_idx_0)) {
        UB_idx_0 = LB_idx_0;
    }
    if (UB_idx_0 >= 0.0) {
        ixstart = 1;
        UB_idx_0 = L_opt_2[0];
        if (rtIsNaN(L_opt_2[0])) {
            ix = 2;
            exitg27 = false;
            while ((!exitg27) && (ix < 5)) {
                ixstart = ix;
                if (!rtIsNaN(L_opt_2[ix - 1])) {
                    UB_idx_0 = L_opt_2[ix - 1];
                    exitg27 = true;
                } else {
                    ix++;
                }
            }
        }
        if (ixstart < 4) {
            while (ixstart + 1 < 5) {
                if (L_opt_2[ixstart] < UB_idx_0) {
                    UB_idx_0 = L_opt_2[ixstart];
                }
                ixstart++;
            }
        }
        if (UB_idx_0 >= 0.0) {
            /* 'LA_LS_Revised_Saturation:57' u_opt = u_opt_2; */
            u_opt[0] = u_opt_2[0];
            u_opt[1] = u_opt_2[1];
            /* 'LA_LS_Revised_Saturation:58' L_opt = L_opt_2; */
            /* 'LA_LS_Revised_Saturation:59' case_n = 2; */
        }
    }
}
/*  Case 3 */
/* 'LA_LS_Revised_Saturation:63' if (max(u_opt_3-UB)<=0) && (min(u_opt_3-LB)>=0) && (min(L_opt_3)>=0) */
UB_idx_0 = u_opt_3[0] - u1_max;
LB_idx_0 = u_opt_3[1] - u2_max;
ixstart = 1;
if (rtIsNaN(UB_idx_0)) {
    ix = 2;
    exitg27 = false;
    while ((!exitg27) && (ix < 3)) {
        ixstart = 2;
        if (!rtIsNaN(LB_idx_0)) {
            UB_idx_0 = LB_idx_0;
            exitg27 = true;
        } else {
            ix = 3;
        }
    }
}
if ((ixstart < 2) && (LB_idx_0 > UB_idx_0)) {
    UB_idx_0 = LB_idx_0;
}
if (UB_idx_0 <= 0.0) {
    UB_idx_0 = u_opt_3[0] - u1_min;
    LB_idx_0 = u_opt_3[1] - u2_min;
    ixstart = 1;
    if (rtIsNaN(UB_idx_0)) {
        ix = 2;
        exitg27 = false;
        while ((!exitg27) && (ix < 3)) {
            ixstart = 2;
            if (!rtIsNaN(LB_idx_0)) {
                UB_idx_0 = LB_idx_0;
                exitg27 = true;
            } else {
                ix = 3;
            }
        }
    }
    if ((ixstart < 2) && (LB_idx_0 < UB_idx_0)) {
        UB_idx_0 = LB_idx_0;
    }
    if (UB_idx_0 >= 0.0) {
        ixstart = 1;
        UB_idx_0 = L_opt_3[0];
        if (rtIsNaN(L_opt_3[0])) {
            ix = 2;
            exitg27 = false;
            while ((!exitg27) && (ix < 5)) {
                ixstart = ix;
                if (!rtIsNaN(L_opt_3[ix - 1])) {
                    UB_idx_0 = L_opt_3[ix - 1];
                    exitg27 = true;
                } else {
                    ix++;
                }
            }
        }
        if (ixstart < 4) {
            while (ixstart + 1 < 5) {
                if (L_opt_3[ixstart] < UB_idx_0) {
                    UB_idx_0 = L_opt_3[ixstart];
                }
                ixstart++;
            }
        }
        if (UB_idx_0 >= 0.0) {
            /* 'LA_LS_Revised_Saturation:64' u_opt = u_opt_3; */
            u_opt[0] = u_opt_3[0];
            u_opt[1] = u_opt_3[1];
            /* 'LA_LS_Revised_Saturation:65' L_opt = L_opt_3; */
            /* 'LA_LS_Revised_Saturation:66' case_n = 3; */
        }
    }
}
/*  Case 4 */
/* 'LA_LS_Revised_Saturation:70' if (max(u_opt_4-UB)<=0) && (min(u_opt_4-LB)>=0) && (min(L_opt_4)>=0) */
UB_idx_0 = u_opt_4[0] - u1_max;
LB_idx_0 = u_opt_4[1] - u2_max;
ixstart = 1;
if (rtIsNaN(UB_idx_0)) {
    ix = 2;
    exitg27 = false;
    while ((!exitg27) && (ix < 3)) {
        ixstart = 2;
        if (!rtIsNaN(LB_idx_0)) {
            UB_idx_0 = LB_idx_0;
            exitg27 = true;
        } else {
            ix = 3;
        }
    }
}
if ((ixstart < 2) && (LB_idx_0 > UB_idx_0)) {
    UB_idx_0 = LB_idx_0;
}
if (UB_idx_0 <= 0.0) {
    UB_idx_0 = u_opt_4[0] - u1_min;
    LB_idx_0 = u_opt_4[1] - u2_min;
    ixstart = 1;
    if (rtIsNaN(UB_idx_0)) {
        ix = 2;
        exitg27 = false;
        while ((!exitg27) && (ix < 3)) {
            ixstart = 2;
            if (!rtIsNaN(LB_idx_0)) {
                UB_idx_0 = LB_idx_0;
                exitg27 = true;
            } else {
                ix = 3;
            }
        }
    }
    if ((ixstart < 2) && (LB_idx_0 < UB_idx_0)) {
        UB_idx_0 = LB_idx_0;
    }
    if (UB_idx_0 >= 0.0) {
        ixstart = 1;
        UB_idx_0 = L_opt_4[0];
        if (rtIsNaN(L_opt_4[0])) {
            ix = 2;
            exitg27 = false;
            while ((!exitg27) && (ix < 5)) {
                ixstart = ix;
                if (!rtIsNaN(L_opt_4[ix - 1])) {
                    UB_idx_0 = L_opt_4[ix - 1];
                    exitg27 = true;
                } else {
                    ix++;
                }
            }
        }
        if (ixstart < 4) {
            while (ixstart + 1 < 5) {
                if (L_opt_4[ixstart] < UB_idx_0) {
                    UB_idx_0 = L_opt_4[ixstart];
                }
                ixstart++;
            }
        }
        if (UB_idx_0 >= 0.0) {
            /* 'LA_LS_Revised_Saturation:71' u_opt = u_opt_4; */
            u_opt[0] = u_opt_4[0];
            u_opt[1] = u_opt_4[1];
            /* 'LA_LS_Revised_Saturation:72' L_opt = L_opt_4; */
            /* 'LA_LS_Revised_Saturation:73' case_n = 4; */
        }
    }
}
/*  Case 5 */
/* 'LA_LS_Revised_Saturation:77' if (max(u_opt_5-UB)<=0) && (min(u_opt_5-LB)>=0) && (min(L_opt_5)>=0) */
UB_idx_0 = u_opt_5[0] - u1_max;
LB_idx_0 = u_opt_5[1] - u2_max;
ixstart = 1;
if (rtIsNaN(UB_idx_0)) {
    ix = 2;
    exitg27 = false;
    while ((!exitg27) && (ix < 3)) {
        ixstart = 2;
        if (!rtIsNaN(LB_idx_0)) {
            UB_idx_0 = LB_idx_0;
            exitg27 = true;
        } else {
            ix = 3;
        }
    }
}
if ((ixstart < 2) && (LB_idx_0 > UB_idx_0)) {
    UB_idx_0 = LB_idx_0;
}
if (UB_idx_0 <= 0.0) {
    UB_idx_0 = u_opt_5[0] - u1_min;
    LB_idx_0 = u_opt_5[1] - u2_min;
    ixstart = 1;
    if (rtIsNaN(UB_idx_0)) {
        ix = 2;
        exitg27 = false;
        while ((!exitg27) && (ix < 3)) {
            ixstart = 2;
            if (!rtIsNaN(LB_idx_0)) {
                UB_idx_0 = LB_idx_0;
                exitg27 = true;
            } else {
                ix = 3;
            }
        }
    }
    if ((ixstart < 2) && (LB_idx_0 < UB_idx_0)) {
        UB_idx_0 = LB_idx_0;
    }
    if (UB_idx_0 >= 0.0) {
        ixstart = 1;
        UB_idx_0 = L_opt_5[0];
        if (rtIsNaN(L_opt_5[0])) {
            ix = 2;
            exitg27 = false;
            while ((!exitg27) && (ix < 5)) {
                ixstart = ix;
                if (!rtIsNaN(L_opt_5[ix - 1])) {
                    UB_idx_0 = L_opt_5[ix - 1];
                    exitg27 = true;
                } else {
                    ix++;
                }
            }
        }
        if (ixstart < 4) {
            while (ixstart + 1 < 5) {
                if (L_opt_5[ixstart] < UB_idx_0) {
                    UB_idx_0 = L_opt_5[ixstart];
                }
                ixstart++;
            }
        }
        if (UB_idx_0 >= 0.0) {
            /* 'LA_LS_Revised_Saturation:78' u_opt = u_opt_5; */
            u_opt[0] = u_opt_5[0];
            u_opt[1] = u_opt_5[1];
            /* 'LA_LS_Revised_Saturation:79' L_opt = L_opt_5; */
            /* 'LA_LS_Revised_Saturation:80' case_n = 5; */
        }
    }
}
/*  Case 6 */
/* 'LA_LS_Revised_Saturation:84' if (max(u_opt_6-UB)<=0) && (min(u_opt_6-LB)>=0) && (min(L_opt_6)>=0) */
UB_idx_0 = u_opt_6[0] - u1_max;
LB_idx_0 = u_opt_6[1] - u2_max;
ixstart = 1;
if (rtIsNaN(UB_idx_0)) {
    ix = 2;
    exitg27 = false;
    while ((!exitg27) && (ix < 3)) {
        ixstart = 2;
        if (!rtIsNaN(LB_idx_0)) {
            UB_idx_0 = LB_idx_0;
            exitg27 = true;
        } else {
            ix = 3;
        }
    }
}
if ((ixstart < 2) && (LB_idx_0 > UB_idx_0)) {
    UB_idx_0 = LB_idx_0;
}
if (UB_idx_0 <= 0.0) {
    UB_idx_0 = u_opt_6[0] - u1_min;
    LB_idx_0 = u_opt_6[1] - u2_min;
    ixstart = 1;
    if (rtIsNaN(UB_idx_0)) {
        ix = 2;
        exitg27 = false;
        while ((!exitg27) && (ix < 3)) {
            ixstart = 2;
            if (!rtIsNaN(LB_idx_0)) {
                UB_idx_0 = LB_idx_0;
                exitg27 = true;
            } else {
                ix = 3;
            }
        }
    }
    if ((ixstart < 2) && (LB_idx_0 < UB_idx_0)) {
        UB_idx_0 = LB_idx_0;
    }
    if (UB_idx_0 >= 0.0) {
        ixstart = 1;
        UB_idx_0 = L_opt_6[0];
        if (rtIsNaN(L_opt_6[0])) {
            ix = 2;
            exitg27 = false;
            while ((!exitg27) && (ix < 5)) {
                ixstart = ix;
                if (!rtIsNaN(L_opt_6[ix - 1])) {
                    UB_idx_0 = L_opt_6[ix - 1];
                    exitg27 = true;
                } else {
                    ix++;
                }
            }
        }
        if (ixstart < 4) {
            while (ixstart + 1 < 5) {
                if (L_opt_6[ixstart] < UB_idx_0) {
                    UB_idx_0 = L_opt_6[ixstart];
                }
                ixstart++;
            }
        }
        if (UB_idx_0 >= 0.0) {
            /* 'LA_LS_Revised_Saturation:85' u_opt = u_opt_6; */
            u_opt[0] = u_opt_6[0];
            u_opt[1] = u_opt_6[1];
            /* 'LA_LS_Revised_Saturation:86' L_opt = L_opt_6; */
            /* 'LA_LS_Revised_Saturation:87' case_n = 6; */
        }
    }
}
/*  Case 7 */
/* 'LA_LS_Revised_Saturation:91' if (max(u_opt_7-UB)<=0) && (min(u_opt_7-LB)>=0) && (min(L_opt_7)>=0) */
UB_idx_0 = u_opt_7[0] - u1_max;
LB_idx_0 = u_opt_7[1] - u2_max;
ixstart = 1;
if (rtIsNaN(UB_idx_0)) {
    ix = 2;
    exitg27 = false;
    while ((!exitg27) && (ix < 3)) {
        ixstart = 2;
        if (!rtIsNaN(LB_idx_0)) {
            UB_idx_0 = LB_idx_0;
            exitg27 = true;
        } else {
            ix = 3;
        }
    }
}
if ((ixstart < 2) && (LB_idx_0 > UB_idx_0)) {
    UB_idx_0 = LB_idx_0;
}
if (UB_idx_0 <= 0.0) {
    UB_idx_0 = u_opt_7[0] - u1_min;
    LB_idx_0 = u_opt_7[1] - u2_min;
    ixstart = 1;
    if (rtIsNaN(UB_idx_0)) {
        ix = 2;
        exitg27 = false;
        while ((!exitg27) && (ix < 3)) {
            ixstart = 2;
            if (!rtIsNaN(LB_idx_0)) {
                UB_idx_0 = LB_idx_0;
                exitg27 = true;
            } else {
                ix = 3;
            }
        }
    }
    if ((ixstart < 2) && (LB_idx_0 < UB_idx_0)) {
        UB_idx_0 = LB_idx_0;
    }
    if (UB_idx_0 >= 0.0) {
        ixstart = 1;
        UB_idx_0 = L_opt_7[0];
        if (rtIsNaN(L_opt_7[0])) {
            ix = 2;
            exitg27 = false;
            while ((!exitg27) && (ix < 5)) {
                ixstart = ix;
                if (!rtIsNaN(L_opt_7[ix - 1])) {
                    UB_idx_0 = L_opt_7[ix - 1];
                    exitg27 = true;
                } else {
                    ix++;
                }
            }
        }
        if (ixstart < 4) {
            while (ixstart + 1 < 5) {
                if (L_opt_7[ixstart] < UB_idx_0) {
                    UB_idx_0 = L_opt_7[ixstart];
                }
                ixstart++;
            }
        }
        if (UB_idx_0 >= 0.0) {
            /* 'LA_LS_Revised_Saturation:92' u_opt = u_opt_7; */
            u_opt[0] = u_opt_7[0];
            u_opt[1] = u_opt_7[1];
            /* 'LA_LS_Revised_Saturation:93' L_opt = L_opt_7; */
            /* 'LA_LS_Revised_Saturation:94' case_n = 7; */
        }
    }
}
/*  Case 8 */
/* 'LA_LS_Revised_Saturation:98' if (max(u_opt_8-UB)<=0) && (min(u_opt_8-LB)>=0) && (min(L_opt_8)>=0) */
UB_idx_0 = u_opt_8[0] - u1_max;
LB_idx_0 = u_opt_8[1] - u2_max;
ixstart = 1;
if (rtIsNaN(UB_idx_0)) {
    ix = 2;
    exitg27 = false;
    while ((!exitg27) && (ix < 3)) {
        ixstart = 2;
        if (!rtIsNaN(LB_idx_0)) {
            UB_idx_0 = LB_idx_0;
            exitg27 = true;
        } else {
            ix = 3;
        }
    }
}
if ((ixstart < 2) && (LB_idx_0 > UB_idx_0)) {
    UB_idx_0 = LB_idx_0;
}
if (UB_idx_0 <= 0.0) {
    UB_idx_0 = u_opt_8[0] - u1_min;
    LB_idx_0 = u_opt_8[1] - u2_min;
    ixstart = 1;
    if (rtIsNaN(UB_idx_0)) {
        ix = 2;
        exitg27 = false;
        while ((!exitg27) && (ix < 3)) {
            ixstart = 2;
            if (!rtIsNaN(LB_idx_0)) {
                UB_idx_0 = LB_idx_0;
                exitg27 = true;
            } else {
                ix = 3;
            }
        }
    }
    if ((ixstart < 2) && (LB_idx_0 < UB_idx_0)) {
        UB_idx_0 = LB_idx_0;
    }
    if (UB_idx_0 >= 0.0) {
        ixstart = 1;
        UB_idx_0 = L_opt_8[0];
        if (rtIsNaN(L_opt_8[0])) {
            ix = 2;
            exitg27 = false;
            while ((!exitg27) && (ix < 5)) {
                ixstart = ix;
                if (!rtIsNaN(L_opt_8[ix - 1])) {
                    UB_idx_0 = L_opt_8[ix - 1];
                    exitg27 = true;
                } else {
                    ix++;
                }
            }
        }
        if (ixstart < 4) {
            while (ixstart + 1 < 5) {
                if (L_opt_8[ixstart] < UB_idx_0) {
                    UB_idx_0 = L_opt_8[ixstart];
                }
                ixstart++;
            }
        }
        if (UB_idx_0 >= 0.0) {
            /* 'LA_LS_Revised_Saturation:99' u_opt = u_opt_8; */
            u_opt[0] = u_opt_8[0];
            u_opt[1] = u_opt_8[1];
            /* 'LA_LS_Revised_Saturation:100' L_opt = L_opt_8; */
            /* 'LA_LS_Revised_Saturation:101' case_n = 8; */
        }
    }
}
/*  Case 9 */
/* 'LA_LS_Revised_Saturation:105' if (max(u_opt_9-UB)<=0) && (min(u_opt_9-LB)>=0) && (min(L_opt_9)>=0) */
UB_idx_0 = u_opt_9[0] - u1_max;
LB_idx_0 = u_opt_9[1] - u2_max;
ixstart = 1;
if (rtIsNaN(UB_idx_0)) {
    ix = 2;
    exitg27 = false;
    while ((!exitg27) && (ix < 3)) {
        ixstart = 2;
        if (!rtIsNaN(LB_idx_0)) {
            UB_idx_0 = LB_idx_0;
            exitg27 = true;
        } else {
            ix = 3;
        }
    }
}
if ((ixstart < 2) && (LB_idx_0 > UB_idx_0)) {
    UB_idx_0 = LB_idx_0;
}
if (UB_idx_0 <= 0.0) {
    LB_idx_0 = u_opt_9[0] - u1_min;
    UB_idx_0 = u_opt_9[1] - u2_min;
    ixstart = 1;
    if (rtIsNaN(LB_idx_0)) {
        ix = 2;
        exitg27 = false;
        while ((!exitg27) && (ix < 3)) {
            ixstart = 2;
            if (!rtIsNaN(UB_idx_0)) {
                LB_idx_0 = UB_idx_0;
                exitg27 = true;
            } else {
                ix = 3;
            }
        }
    }
    if ((ixstart < 2) && (UB_idx_0 < LB_idx_0)) {
        LB_idx_0 = UB_idx_0;
    }
    if (LB_idx_0 >= 0.0) {
        ixstart = 1;
        UB_idx_0 = L_opt_9[0];
        if (rtIsNaN(L_opt_9[0])) {
            ix = 2;
            exitg27 = false;
            while ((!exitg27) && (ix < 5)) {
                ixstart = ix;
                if (!rtIsNaN(L_opt_9[ix - 1])) {
                    UB_idx_0 = L_opt_9[ix - 1];
                    exitg27 = true;
                } else {
                    ix++;
                }
            }
        }
        if (ixstart < 4) {
            while (ixstart + 1 < 5) {
                if (L_opt_9[ixstart] < UB_idx_0) {
                    UB_idx_0 = L_opt_9[ixstart];
                }
                ixstart++;
            }
        }
        if (UB_idx_0 >= 0.0) {
            /* 'LA_LS_Revised_Saturation:106' u_opt = u_opt_9; */
            u_opt[0] = u_opt_9[0];
            u_opt[1] = u_opt_9[1];
            /* 'LA_LS_Revised_Saturation:107' L_opt = L_opt_9; */
            /* 'LA_LS_Revised_Saturation:108' case_n = 9; */
        }
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walkin_LA_LS_Revised_Saturation(\
%assign comma = ""
%if SLibCG_ArgAccessed(9, 65, 0)
%<comma>real_T u_LS\
%assign comma = ", "
%endif
%if SLibCG_ArgAccessed(9, 65, 1)
%<comma>real_T u_LA\
%assign comma = ", "
%endif
%if SLibCG_ArgAccessed(9, 65, 2)
%<comma>real_T w\
%assign comma = ", "
%endif
%<comma>real_T u1_min\
%assign comma = ", "
%<comma>real_T u1_max\
%assign comma = ", "
%<comma>real_T u2_min\
%assign comma = ", "
%<comma>real_T u2_max\
%assign comma = ", "
%<comma>real_T u_opt[2]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 65, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_mldivide_Fcn66(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T temp;
real_T b_A[36];
int8_T ipiv[6];
int32_T j;
int32_T c;
int32_T ix;
real_T s;
int32_T jy;
int32_T c_ix;
int32_T d;
int32_T ijA;
int32_T b_kAcol;
memcpy(&b_A[0], &A[0], 36U * sizeof(real_T));
for (ix = 0; ix < 6; ix++) {
    ipiv[ix] = (int8_T)(1 + ix);
}
for (j = 0; j < 5; j++) {
    c = j * 7;
    jy = 0;
    ix = c;
    temp = fabs(b_A[c]);
    for (b_kAcol = 2; b_kAcol <= 6 - j; b_kAcol++) {
        ix++;
        s = fabs(b_A[ix]);
        if (s > temp) {
            jy = b_kAcol - 1;
            temp = s;
        }
    }
    if (b_A[c + jy] != 0.0) {
        if (jy != 0) {
            ipiv[j] = (int8_T)((j + jy) + 1);
            ix = j;
            b_kAcol = j + jy;
            for (jy = 0; jy < 6; jy++) {
                temp = b_A[ix];
                b_A[ix] = b_A[b_kAcol];
                b_A[b_kAcol] = temp;
                ix += 6;
                b_kAcol += 6;
            }
        }
        ix = (c - j) + 6;
        for (b_kAcol = c + 1; b_kAcol + 1 <= ix; b_kAcol++) {
            b_A[b_kAcol] /= b_A[c];
        }
    }
    b_kAcol = c;
    jy = c + 6;
    for (ix = 1; ix <= 5 - j; ix++) {
        temp = b_A[jy];
        if (b_A[jy] != 0.0) {
            c_ix = c + 1;
            d = (b_kAcol - j) + 12;
            for (ijA = 7 + b_kAcol; ijA + 1 <= d; ijA++) {
                b_A[ijA] += b_A[c_ix] * -temp;
                c_ix++;
            }
        }
        jy += 6;
        b_kAcol += 6;
    }
}
for (ix = 0; ix < 5; ix++) {
    if (ix + 1 != ipiv[ix]) {
        temp = B[ix];
        B[ix] = B[ipiv[ix] - 1];
        B[ipiv[ix] - 1] = temp;
    }
}
for (ix = 0; ix < 6; ix++) {
    b_kAcol = 6 * ix;
    if (B[ix] != 0.0) {
        for (jy = ix + 1; jy + 1 < 7; jy++) {
            B[jy] -= b_A[jy + b_kAcol] * B[ix];
        }
    }
}
for (ix = 5; ix >= 0; ix += -1) {
    b_kAcol = 6 * ix;
    if (B[ix] != 0.0) {
        B[ix] /= b_A[ix + b_kAcol];
        for (jy = 0; jy + 1 <= ix; jy++) {
            B[jy] -= b_A[jy + b_kAcol] * B[ix];
        }
    }
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking01_withElmos_mldivide(\
%assign comma = ""
%<comma>const real_T A[36]\
%assign comma = ", "
%<comma>real_T B[6]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 66, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking_MARLOBasicSafetyLimits2_Fcn67(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T qbar[34];
real_T dqbar[34];
static const int8_T b[34] = { 20, 20, 40, 40, 50, 50, 30, 30, 20, 20, 40, 40, 50, 50, 30, 30, 3, 3, 2, 2, 2, 2, 2, 2, 0, 0, 20, 0, 15, 10, 20, 20, 20, 20 };
static const int16_T dqmax[34] = { 600, 600, 500, 500, 500, 500, 500, 500, 600, 600, 500, 500, 500, 500, 500, 500, 300, 300, 200, 200, 300, 300, 500, 500, 250, 250, 400, 300, 150, 150, 300, 300, 300, 300 };
static const int16_T qmax[34] = { 200, 200, 260, 260, 230, 230, 90, 90, 200, 200, 260, 260, 230, 230, 90, 90, 6, 6, 3, 3, 3, 3, 3, 3, 15, 15, 45, 30, 15, 20, 220, 220, 220, 220 };
static const int8_T c[34] = { 60, 60, 40, 40, 50, 50, 15, 15, 60, 60, 40, 40, 50, 50, 15, 15, 1, 1, 4, 4, 2, 2, 6, 6, 0, 0, 20, 0, 10, 10, 20, 20, 20, 20 };
static const int16_T dqmin[34] = { -400, -400, -400, -400, -400, -400, -500, -500, -400, -400, -400, -400, -400, -400, -500, -500, -200, -200, -400, -400, -300, -300, -600, -600, -250, -250, -400, -300, -150, -150, -300, -300, -300, -300 };
static const int16_T qmin[34] = { 100, 100, 160, 160, 130, 130, 15, 15, 100, 100, 160, 160, 130, 130, 15, 15, -2, -2, -6, -6, -3, -3, -8, -8, -20, -20, -45, -25, -30, -20, 140, 140, 140, 140 };
static const real_T a[442] = { 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, -0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, 0.0, 0.0, -0.5, 0.0, 1.0, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0, 0.0, -0.5, 0.0, -1.0, 0.0, 0.0, -0.5, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.5, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.5, 0.0, -1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.5, 0.0, -1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.5, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 };
real_T a_0[34];
int32_T i;
int32_T i_0;
real_T a_1[34];
/*  MARLOBASICSAFETYLIMITS2 Checks to see if the configuration and velocity satisfy basic safety limits. */
/*  %<"\% q1"> */
/*  %<"\% q2"> */
/*  %<"\% qLA"> */
/*  %<"\% qKA"> */
/*  %<"\% qgr1"> */
/*  %<"\% qgr2"> */
/*  %<"\% qgrLA"> */
/*  %<"\% qgrKA"> */
/*  %<"\% qsp1"> */
/*  %<"\% qsp2"> */
/*  %<"\% qspLA"> */
/*  %<"\% qspKA"> */
/*  %<"\% q3"> */
/*  %<"\% qDLA"> */
/*  %<"\% q3RL"> */
/*  %<"\% qxT"> */
/*  %<"\% qyT"> */
/*  %<"\% theta"> */
/*  %<"\% thetagr"> */
/* 'MARLOBasicSafetyLimits2:4' T = [... */
/* 'MARLOBasicSafetyLimits2:5' 		... %<"\% q1"> */
/* 'MARLOBasicSafetyLimits2:6' 		0 0 0 1 0 0 0 0 0 0 0 0 0; */
/* 'MARLOBasicSafetyLimits2:7' 		0 0 0 0 0 1 0 0 0 0 0 0 0;  */
/* 'MARLOBasicSafetyLimits2:8' 		... %<"\% q2"> */
/* 'MARLOBasicSafetyLimits2:9' 		0 0 0 0 1 0 0 0 0 0 0 0 0; */
/* 'MARLOBasicSafetyLimits2:10' 		0 0 0 0 0 0 1 0 0 0 0 0 0;  */
/* 'MARLOBasicSafetyLimits2:11' 		... %<"\% qLA"> */
/* 'MARLOBasicSafetyLimits2:12' 		0 0 0 0.5 0.5 0 0 0 0 0 0 0 0; */
/* 'MARLOBasicSafetyLimits2:13' 		0 0 0 0 0 0.5 0.5 0 0 0 0 0 0;  */
/* 'MARLOBasicSafetyLimits2:14' 		... %<"\% qKA"> */
/* 'MARLOBasicSafetyLimits2:15' 		0 0 0 -1 1 0 0 0 0 0 0 0 0; */
/* 'MARLOBasicSafetyLimits2:16' 		0 0 0 0 0 -1 1 0 0 0 0 0 0;  */
/* 'MARLOBasicSafetyLimits2:17' 		... %<"\% qgr1"> */
/* 'MARLOBasicSafetyLimits2:18' 		0 0 0 0 0 0 0 1 0 0 0 0 0; */
/* 'MARLOBasicSafetyLimits2:19' 		0 0 0 0 0 0 0 0 0 0 1 0 0;  */
/* 'MARLOBasicSafetyLimits2:20' 		... %<"\% qgr2"> */
/* 'MARLOBasicSafetyLimits2:21' 		0 0 0 0 0 0 0 0 1 0 0 0 0; */
/* 'MARLOBasicSafetyLimits2:22' 		0 0 0 0 0 0 0 0 0 0 0 1 0;  */
/* 'MARLOBasicSafetyLimits2:23' 		... %<"\% qgrLA"> */
/* 'MARLOBasicSafetyLimits2:24' 		0 0 0 0 0 0 0 0.5 0.5 0 0 0 0; */
/* 'MARLOBasicSafetyLimits2:25' 		0 0 0 0 0 0 0 0 0 0 0.5 0.5 0;  */
/* 'MARLOBasicSafetyLimits2:26' 		... %<"\% qgrKA"> */
/* 'MARLOBasicSafetyLimits2:27' 		0 0 0 0 0 0 0 -1 1 0 0 0 0; */
/* 'MARLOBasicSafetyLimits2:28' 		0 0 0 0 0 0 0 0 0 0 -1 1 0;  */
/* 'MARLOBasicSafetyLimits2:29' 		... %<"\% qsp1"> */
/* 'MARLOBasicSafetyLimits2:30' 		0 0 0 -1 0 0 0 1 0 0 0 0 0; */
/* 'MARLOBasicSafetyLimits2:31' 		0 0 0 0 0 -1 0 0 0 0 1 0 0;  */
/* 'MARLOBasicSafetyLimits2:32' 		... %<"\% qsp2"> */
/* 'MARLOBasicSafetyLimits2:33' 		0 0 0 0 -1 0 0 0 1 0 0 0 0; */
/* 'MARLOBasicSafetyLimits2:34' 		0 0 0 0 0 0 -1 0 0 0 0 1 0;  */
/* 'MARLOBasicSafetyLimits2:35' 		... %<"\% qspLA"> */
/* 'MARLOBasicSafetyLimits2:36' 		0 0 0 -0.5 -0.5 0 0 0.5 0.5 0 0 0 0; */
/* 'MARLOBasicSafetyLimits2:37' 		0 0 0 0 0 -0.5 -0.5 0 0 0 0.5 0.5 0;  */
/* 'MARLOBasicSafetyLimits2:38' 		... %<"\% qspKA"> */
/* 'MARLOBasicSafetyLimits2:39' 		0 0 0 1 -1 0 0 -1 1 0 0 0 0; */
/* 'MARLOBasicSafetyLimits2:40' 		0 0 0 0 0 1 -1 0 0 0 -1 1 0;  */
/* 'MARLOBasicSafetyLimits2:41' 		... %<"\% q3"> */
/* 'MARLOBasicSafetyLimits2:42' 		0 0 0 0 0 0 0 0 0 1 0 0 0; */
/* 'MARLOBasicSafetyLimits2:43' 		0 0 0 0 0 0 0 0 0 0 0 0 1;  */
/* 'MARLOBasicSafetyLimits2:44' 		... %<"\% qDLA"> */
/* 'MARLOBasicSafetyLimits2:45' 		0 0 0 0.5 0.5 -0.5 -0.5 0 0 0 0 0 0;  */
/* 'MARLOBasicSafetyLimits2:46' 		... %<"\% q3RL"> */
/* 'MARLOBasicSafetyLimits2:47' 		0 0 0 0 0 0 0 0 0 1 0 0 1;  */
/* 'MARLOBasicSafetyLimits2:48' 		... %<"\% qxT"> */
/* 'MARLOBasicSafetyLimits2:49' 		0 0 1 0 0 0 0 0 0 0 0 0 0;  */
/* 'MARLOBasicSafetyLimits2:50' 		... %<"\% qyT"> */
/* 'MARLOBasicSafetyLimits2:51' 		0 1 0 0 0 0 0 0 0 0 0 0 0;  */
/* 'MARLOBasicSafetyLimits2:52' 		... %<"\% theta"> */
/* 'MARLOBasicSafetyLimits2:53' 		0 0 1 0.5 0.5 0 0 0 0 0 0 0 0; */
/* 'MARLOBasicSafetyLimits2:54' 		0 0 1 0 0 0.5 0.5 0 0 0 0 0 0;  */
/* 'MARLOBasicSafetyLimits2:55' 		... %<"\% thetagr"> */
/* 'MARLOBasicSafetyLimits2:56' 		0 0 1 0 0 0 0 0.5 0.5 0 0 0 0; */
/* 'MARLOBasicSafetyLimits2:57' 		0 0 1 0 0 0 0 0 0 0 0.5 0.5 0;  */
/* 'MARLOBasicSafetyLimits2:58' 	]; */
/*  %<"\% minimum q"> */
/*  %<"\% q1"> */
/*  %<"\% q2"> */
/*  %<"\% qLA"> */
/*  %<"\% qKA"> */
/*  %<"\% qgr1"> */
/*  %<"\% qgr2"> */
/*  %<"\% qgrLA"> */
/*  %<"\% qgrKA"> */
/*  %<"\% qsp1"> */
/*  %<"\% qsp2"> */
/*  %<"\% qspLA"> */
/*  %<"\% qspKA"> */
/*  %<"\% q3"> */
/*  %<"\% qDLA"> */
/*  %<"\% q3RL"> */
/*  %<"\% qxT"> */
/*  %<"\% qyT"> */
/*  %<"\% theta"> */
/*  %<"\% thetagr"> */
/* 'MARLOBasicSafetyLimits2:60' qmin = [... %<"\% minimum q"> */
/* 'MARLOBasicSafetyLimits2:61' 		... %<"\% q1"> */
/* 'MARLOBasicSafetyLimits2:62' 		100.000000;  */
/* 'MARLOBasicSafetyLimits2:63' 		100.000000;  */
/* 'MARLOBasicSafetyLimits2:64' 		... %<"\% q2"> */
/* 'MARLOBasicSafetyLimits2:65' 		160.000000;  */
/* 'MARLOBasicSafetyLimits2:66' 		160.000000;  */
/* 'MARLOBasicSafetyLimits2:67' 		... %<"\% qLA"> */
/* 'MARLOBasicSafetyLimits2:68' 		130.000000;  */
/* 'MARLOBasicSafetyLimits2:69' 		130.000000;  */
/* 'MARLOBasicSafetyLimits2:70' 		... %<"\% qKA"> */
/* 'MARLOBasicSafetyLimits2:71' 		15.000000;  */
/* 'MARLOBasicSafetyLimits2:72' 		15.000000;  */
/* 'MARLOBasicSafetyLimits2:73' 		... %<"\% qgr1"> */
/* 'MARLOBasicSafetyLimits2:74' 		100.000000;  */
/* 'MARLOBasicSafetyLimits2:75' 		100.000000;  */
/* 'MARLOBasicSafetyLimits2:76' 		... %<"\% qgr2"> */
/* 'MARLOBasicSafetyLimits2:77' 		160.000000;  */
/* 'MARLOBasicSafetyLimits2:78' 		160.000000;  */
/* 'MARLOBasicSafetyLimits2:79' 		... %<"\% qgrLA"> */
/* 'MARLOBasicSafetyLimits2:80' 		130.000000;  */
/* 'MARLOBasicSafetyLimits2:81' 		130.000000;  */
/* 'MARLOBasicSafetyLimits2:82' 		... %<"\% qgrKA"> */
/* 'MARLOBasicSafetyLimits2:83' 		15.000000;  */
/* 'MARLOBasicSafetyLimits2:84' 		15.000000;  */
/* 'MARLOBasicSafetyLimits2:85' 		... %<"\% qsp1"> */
/* 'MARLOBasicSafetyLimits2:86' 		-2.000000;  */
/* 'MARLOBasicSafetyLimits2:87' 		-2.000000;  */
/* 'MARLOBasicSafetyLimits2:88' 		... %<"\% qsp2"> */
/* 'MARLOBasicSafetyLimits2:89' 		-6.000000;  */
/* 'MARLOBasicSafetyLimits2:90' 		-6.000000;  */
/* 'MARLOBasicSafetyLimits2:91' 		... %<"\% qspLA"> */
/* 'MARLOBasicSafetyLimits2:92' 		-3.000000;  */
/* 'MARLOBasicSafetyLimits2:93' 		-3.000000;  */
/* 'MARLOBasicSafetyLimits2:94' 		... %<"\% qspKA"> */
/* 'MARLOBasicSafetyLimits2:95' 		-8.000000;  */
/* 'MARLOBasicSafetyLimits2:96' 		-8.000000;  */
/* 'MARLOBasicSafetyLimits2:97' 		... %<"\% q3"> */
/* 'MARLOBasicSafetyLimits2:98' 		-20.000000;  */
/* 'MARLOBasicSafetyLimits2:99' 		-20.000000;  */
/* 'MARLOBasicSafetyLimits2:100' 		... %<"\% qDLA"> */
/* 'MARLOBasicSafetyLimits2:101' 		-45.000000;  */
/* 'MARLOBasicSafetyLimits2:102' 		... %<"\% q3RL"> */
/* 'MARLOBasicSafetyLimits2:103' 		-25.000000;  */
/* 'MARLOBasicSafetyLimits2:104' 		... %<"\% qxT"> */
/* 'MARLOBasicSafetyLimits2:105' 		-30.000000;  */
/* 'MARLOBasicSafetyLimits2:106' 		... %<"\% qyT"> */
/* 'MARLOBasicSafetyLimits2:107' 		-20.000000;  */
/* 'MARLOBasicSafetyLimits2:108' 		... %<"\% theta"> */
/* 'MARLOBasicSafetyLimits2:109' 		140.000000;  */
/* 'MARLOBasicSafetyLimits2:110' 		140.000000;  */
/* 'MARLOBasicSafetyLimits2:111' 		... %<"\% thetagr"> */
/* 'MARLOBasicSafetyLimits2:112' 		140.000000;  */
/* 'MARLOBasicSafetyLimits2:113' 		140.000000;  */
/* 'MARLOBasicSafetyLimits2:114' 	]; */
/*  %<"\% maximum q"> */
/*  %<"\% q1"> */
/*  %<"\% q2"> */
/*  %<"\% qLA"> */
/*  %<"\% qKA"> */
/*  %<"\% qgr1"> */
/*  %<"\% qgr2"> */
/*  %<"\% qgrLA"> */
/*  %<"\% qgrKA"> */
/*  %<"\% qsp1"> */
/*  %<"\% qsp2"> */
/*  %<"\% qspLA"> */
/*  %<"\% qspKA"> */
/*  %<"\% q3"> */
/*  %<"\% qDLA"> */
/*  %<"\% q3RL"> */
/*  %<"\% qxT"> */
/*  %<"\% qyT"> */
/*  %<"\% theta"> */
/*  %<"\% thetagr"> */
/* 'MARLOBasicSafetyLimits2:115' qmax = [... %<"\% maximum q"> */
/* 'MARLOBasicSafetyLimits2:116' 		... %<"\% q1"> */
/* 'MARLOBasicSafetyLimits2:117' 		200.000000;  */
/* 'MARLOBasicSafetyLimits2:118' 		200.000000;  */
/* 'MARLOBasicSafetyLimits2:119' 		... %<"\% q2"> */
/* 'MARLOBasicSafetyLimits2:120' 		260.000000;  */
/* 'MARLOBasicSafetyLimits2:121' 		260.000000;  */
/* 'MARLOBasicSafetyLimits2:122' 		... %<"\% qLA"> */
/* 'MARLOBasicSafetyLimits2:123' 		230.000000;  */
/* 'MARLOBasicSafetyLimits2:124' 		230.000000;  */
/* 'MARLOBasicSafetyLimits2:125' 		... %<"\% qKA"> */
/* 'MARLOBasicSafetyLimits2:126' 		90.000000;  */
/* 'MARLOBasicSafetyLimits2:127' 		90.000000;  */
/* 'MARLOBasicSafetyLimits2:128' 		... %<"\% qgr1"> */
/* 'MARLOBasicSafetyLimits2:129' 		200.000000;  */
/* 'MARLOBasicSafetyLimits2:130' 		200.000000;  */
/* 'MARLOBasicSafetyLimits2:131' 		... %<"\% qgr2"> */
/* 'MARLOBasicSafetyLimits2:132' 		260.000000;  */
/* 'MARLOBasicSafetyLimits2:133' 		260.000000;  */
/* 'MARLOBasicSafetyLimits2:134' 		... %<"\% qgrLA"> */
/* 'MARLOBasicSafetyLimits2:135' 		230.000000;  */
/* 'MARLOBasicSafetyLimits2:136' 		230.000000;  */
/* 'MARLOBasicSafetyLimits2:137' 		... %<"\% qgrKA"> */
/* 'MARLOBasicSafetyLimits2:138' 		90.000000;  */
/* 'MARLOBasicSafetyLimits2:139' 		90.000000;  */
/* 'MARLOBasicSafetyLimits2:140' 		... %<"\% qsp1"> */
/* 'MARLOBasicSafetyLimits2:141' 		6.000000;  */
/* 'MARLOBasicSafetyLimits2:142' 		6.000000;  */
/* 'MARLOBasicSafetyLimits2:143' 		... %<"\% qsp2"> */
/* 'MARLOBasicSafetyLimits2:144' 		3.000000;  */
/* 'MARLOBasicSafetyLimits2:145' 		3.000000;  */
/* 'MARLOBasicSafetyLimits2:146' 		... %<"\% qspLA"> */
/* 'MARLOBasicSafetyLimits2:147' 		3.000000;  */
/* 'MARLOBasicSafetyLimits2:148' 		3.000000;  */
/* 'MARLOBasicSafetyLimits2:149' 		... %<"\% qspKA"> */
/* 'MARLOBasicSafetyLimits2:150' 		3.000000;  */
/* 'MARLOBasicSafetyLimits2:151' 		3.000000;  */
/* 'MARLOBasicSafetyLimits2:152' 		... %<"\% q3"> */
/* 'MARLOBasicSafetyLimits2:153' 		15.000000;  */
/* 'MARLOBasicSafetyLimits2:154' 		15.000000;  */
/* 'MARLOBasicSafetyLimits2:155' 		... %<"\% qDLA"> */
/* 'MARLOBasicSafetyLimits2:156' 		45.000000;  */
/* 'MARLOBasicSafetyLimits2:157' 		... %<"\% q3RL"> */
/* 'MARLOBasicSafetyLimits2:158' 		30.000000;  */
/* 'MARLOBasicSafetyLimits2:159' 		... %<"\% qxT"> */
/* 'MARLOBasicSafetyLimits2:160' 		15.000000;  */
/* 'MARLOBasicSafetyLimits2:161' 		... %<"\% qyT"> */
/* 'MARLOBasicSafetyLimits2:162' 		20.000000;  */
/* 'MARLOBasicSafetyLimits2:163' 		... %<"\% theta"> */
/* 'MARLOBasicSafetyLimits2:164' 		220.000000;  */
/* 'MARLOBasicSafetyLimits2:165' 		220.000000;  */
/* 'MARLOBasicSafetyLimits2:166' 		... %<"\% thetagr"> */
/* 'MARLOBasicSafetyLimits2:167' 		220.000000;  */
/* 'MARLOBasicSafetyLimits2:168' 		220.000000;  */
/* 'MARLOBasicSafetyLimits2:169' 	]; */
/*  %<"\% minimum dq"> */
/*  %<"\% q1"> */
/*  %<"\% q2"> */
/*  %<"\% qLA"> */
/*  %<"\% qKA"> */
/*  %<"\% qgr1"> */
/*  %<"\% qgr2"> */
/*  %<"\% qgrLA"> */
/*  %<"\% qgrKA"> */
/*  %<"\% qsp1"> */
/*  %<"\% qsp2"> */
/*  %<"\% qspLA"> */
/*  %<"\% qspKA"> */
/*  %<"\% q3"> */
/*  %<"\% qDLA"> */
/*  %<"\% q3RL"> */
/*  %<"\% qxT"> */
/*  %<"\% qyT"> */
/*  %<"\% theta"> */
/*  %<"\% thetagr"> */
/* 'MARLOBasicSafetyLimits2:170' dqmin = [... %<"\% minimum dq"> */
/* 'MARLOBasicSafetyLimits2:171' 		... %<"\% q1"> */
/* 'MARLOBasicSafetyLimits2:172' 		-400.000000;  */
/* 'MARLOBasicSafetyLimits2:173' 		-400.000000;  */
/* 'MARLOBasicSafetyLimits2:174' 		... %<"\% q2"> */
/* 'MARLOBasicSafetyLimits2:175' 		-400.000000;  */
/* 'MARLOBasicSafetyLimits2:176' 		-400.000000;  */
/* 'MARLOBasicSafetyLimits2:177' 		... %<"\% qLA"> */
/* 'MARLOBasicSafetyLimits2:178' 		-400.000000;  */
/* 'MARLOBasicSafetyLimits2:179' 		-400.000000;  */
/* 'MARLOBasicSafetyLimits2:180' 		... %<"\% qKA"> */
/* 'MARLOBasicSafetyLimits2:181' 		-500.000000;  */
/* 'MARLOBasicSafetyLimits2:182' 		-500.000000;  */
/* 'MARLOBasicSafetyLimits2:183' 		... %<"\% qgr1"> */
/* 'MARLOBasicSafetyLimits2:184' 		-400.000000;  */
/* 'MARLOBasicSafetyLimits2:185' 		-400.000000;  */
/* 'MARLOBasicSafetyLimits2:186' 		... %<"\% qgr2"> */
/* 'MARLOBasicSafetyLimits2:187' 		-400.000000;  */
/* 'MARLOBasicSafetyLimits2:188' 		-400.000000;  */
/* 'MARLOBasicSafetyLimits2:189' 		... %<"\% qgrLA"> */
/* 'MARLOBasicSafetyLimits2:190' 		-400.000000;  */
/* 'MARLOBasicSafetyLimits2:191' 		-400.000000;  */
/* 'MARLOBasicSafetyLimits2:192' 		... %<"\% qgrKA"> */
/* 'MARLOBasicSafetyLimits2:193' 		-500.000000;  */
/* 'MARLOBasicSafetyLimits2:194' 		-500.000000;  */
/* 'MARLOBasicSafetyLimits2:195' 		... %<"\% qsp1"> */
/* 'MARLOBasicSafetyLimits2:196' 		-200.000000;  */
/* 'MARLOBasicSafetyLimits2:197' 		-200.000000;  */
/* 'MARLOBasicSafetyLimits2:198' 		... %<"\% qsp2"> */
/* 'MARLOBasicSafetyLimits2:199' 		-400.000000;  */
/* 'MARLOBasicSafetyLimits2:200' 		-400.000000;  */
/* 'MARLOBasicSafetyLimits2:201' 		... %<"\% qspLA"> */
/* 'MARLOBasicSafetyLimits2:202' 		-300.000000;  */
/* 'MARLOBasicSafetyLimits2:203' 		-300.000000;  */
/* 'MARLOBasicSafetyLimits2:204' 		... %<"\% qspKA"> */
/* 'MARLOBasicSafetyLimits2:205' 		-600.000000;  */
/* 'MARLOBasicSafetyLimits2:206' 		-600.000000;  */
/* 'MARLOBasicSafetyLimits2:207' 		... %<"\% q3"> */
/* 'MARLOBasicSafetyLimits2:208' 		-250.000000;  */
/* 'MARLOBasicSafetyLimits2:209' 		-250.000000;  */
/* 'MARLOBasicSafetyLimits2:210' 		... %<"\% qDLA"> */
/* 'MARLOBasicSafetyLimits2:211' 		-400.000000;  */
/* 'MARLOBasicSafetyLimits2:212' 		... %<"\% q3RL"> */
/* 'MARLOBasicSafetyLimits2:213' 		-300.000000;  */
/* 'MARLOBasicSafetyLimits2:214' 		... %<"\% qxT"> */
/* 'MARLOBasicSafetyLimits2:215' 		-150.000000;  */
/* 'MARLOBasicSafetyLimits2:216' 		... %<"\% qyT"> */
/* 'MARLOBasicSafetyLimits2:217' 		-150.000000;  */
/* 'MARLOBasicSafetyLimits2:218' 		... %<"\% theta"> */
/* 'MARLOBasicSafetyLimits2:219' 		-300.000000;  */
/* 'MARLOBasicSafetyLimits2:220' 		-300.000000;  */
/* 'MARLOBasicSafetyLimits2:221' 		... %<"\% thetagr"> */
/* 'MARLOBasicSafetyLimits2:222' 		-300.000000;  */
/* 'MARLOBasicSafetyLimits2:223' 		-300.000000;  */
/* 'MARLOBasicSafetyLimits2:224' 	]; */
/*  %<"\% maximum dq"> */
/*  %<"\% q1"> */
/*  %<"\% q2"> */
/*  %<"\% qLA"> */
/*  %<"\% qKA"> */
/*  %<"\% qgr1"> */
/*  %<"\% qgr2"> */
/*  %<"\% qgrLA"> */
/*  %<"\% qgrKA"> */
/*  %<"\% qsp1"> */
/*  %<"\% qsp2"> */
/*  %<"\% qspLA"> */
/*  %<"\% qspKA"> */
/*  %<"\% q3"> */
/*  %<"\% qDLA"> */
/*  %<"\% q3RL"> */
/*  %<"\% qxT"> */
/*  %<"\% qyT"> */
/*  %<"\% theta"> */
/*  %<"\% thetagr"> */
/* 'MARLOBasicSafetyLimits2:225' dqmax = [... %<"\% maximum dq"> */
/* 'MARLOBasicSafetyLimits2:226' 		... %<"\% q1"> */
/* 'MARLOBasicSafetyLimits2:227' 		600.000000;  */
/* 'MARLOBasicSafetyLimits2:228' 		600.000000;  */
/* 'MARLOBasicSafetyLimits2:229' 		... %<"\% q2"> */
/* 'MARLOBasicSafetyLimits2:230' 		500.000000;  */
/* 'MARLOBasicSafetyLimits2:231' 		500.000000;  */
/* 'MARLOBasicSafetyLimits2:232' 		... %<"\% qLA"> */
/* 'MARLOBasicSafetyLimits2:233' 		500.000000;  */
/* 'MARLOBasicSafetyLimits2:234' 		500.000000;  */
/* 'MARLOBasicSafetyLimits2:235' 		... %<"\% qKA"> */
/* 'MARLOBasicSafetyLimits2:236' 		500.000000;  */
/* 'MARLOBasicSafetyLimits2:237' 		500.000000;  */
/* 'MARLOBasicSafetyLimits2:238' 		... %<"\% qgr1"> */
/* 'MARLOBasicSafetyLimits2:239' 		600.000000;  */
/* 'MARLOBasicSafetyLimits2:240' 		600.000000;  */
/* 'MARLOBasicSafetyLimits2:241' 		... %<"\% qgr2"> */
/* 'MARLOBasicSafetyLimits2:242' 		500.000000;  */
/* 'MARLOBasicSafetyLimits2:243' 		500.000000;  */
/* 'MARLOBasicSafetyLimits2:244' 		... %<"\% qgrLA"> */
/* 'MARLOBasicSafetyLimits2:245' 		500.000000;  */
/* 'MARLOBasicSafetyLimits2:246' 		500.000000;  */
/* 'MARLOBasicSafetyLimits2:247' 		... %<"\% qgrKA"> */
/* 'MARLOBasicSafetyLimits2:248' 		500.000000;  */
/* 'MARLOBasicSafetyLimits2:249' 		500.000000;  */
/* 'MARLOBasicSafetyLimits2:250' 		... %<"\% qsp1"> */
/* 'MARLOBasicSafetyLimits2:251' 		300.000000;  */
/* 'MARLOBasicSafetyLimits2:252' 		300.000000;  */
/* 'MARLOBasicSafetyLimits2:253' 		... %<"\% qsp2"> */
/* 'MARLOBasicSafetyLimits2:254' 		200.000000;  */
/* 'MARLOBasicSafetyLimits2:255' 		200.000000;  */
/* 'MARLOBasicSafetyLimits2:256' 		... %<"\% qspLA"> */
/* 'MARLOBasicSafetyLimits2:257' 		300.000000;  */
/* 'MARLOBasicSafetyLimits2:258' 		300.000000;  */
/* 'MARLOBasicSafetyLimits2:259' 		... %<"\% qspKA"> */
/* 'MARLOBasicSafetyLimits2:260' 		500.000000;  */
/* 'MARLOBasicSafetyLimits2:261' 		500.000000;  */
/* 'MARLOBasicSafetyLimits2:262' 		... %<"\% q3"> */
/* 'MARLOBasicSafetyLimits2:263' 		250.000000;  */
/* 'MARLOBasicSafetyLimits2:264' 		250.000000;  */
/* 'MARLOBasicSafetyLimits2:265' 		... %<"\% qDLA"> */
/* 'MARLOBasicSafetyLimits2:266' 		400.000000;  */
/* 'MARLOBasicSafetyLimits2:267' 		... %<"\% q3RL"> */
/* 'MARLOBasicSafetyLimits2:268' 		300.000000;  */
/* 'MARLOBasicSafetyLimits2:269' 		... %<"\% qxT"> */
/* 'MARLOBasicSafetyLimits2:270' 		150.000000;  */
/* 'MARLOBasicSafetyLimits2:271' 		... %<"\% qyT"> */
/* 'MARLOBasicSafetyLimits2:272' 		150.000000;  */
/* 'MARLOBasicSafetyLimits2:273' 		... %<"\% theta"> */
/* 'MARLOBasicSafetyLimits2:274' 		300.000000;  */
/* 'MARLOBasicSafetyLimits2:275' 		300.000000;  */
/* 'MARLOBasicSafetyLimits2:276' 		... %<"\% thetagr"> */
/* 'MARLOBasicSafetyLimits2:277' 		300.000000;  */
/* 'MARLOBasicSafetyLimits2:278' 		300.000000;  */
/* 'MARLOBasicSafetyLimits2:279' 	]; */
/*  %<"\% minimum q at full negative velocity (dqmin)"> */
/*  %<"\% q1"> */
/*  %<"\% q2"> */
/*  %<"\% qLA"> */
/*  %<"\% qKA"> */
/*  %<"\% qgr1"> */
/*  %<"\% qgr2"> */
/*  %<"\% qgrLA"> */
/*  %<"\% qgrKA"> */
/*  %<"\% qsp1"> */
/*  %<"\% qsp2"> */
/*  %<"\% qspLA"> */
/*  %<"\% qspKA"> */
/*  %<"\% q3"> */
/*  %<"\% qDLA"> */
/*  %<"\% q3RL"> */
/*  %<"\% qxT"> */
/*  %<"\% qyT"> */
/*  %<"\% theta"> */
/*  %<"\% thetagr"> */
/* 'MARLOBasicSafetyLimits2:280' qminv = [... %<"\% minimum q at full negative velocity (dqmin)"> */
/* 'MARLOBasicSafetyLimits2:281' 		... %<"\% q1"> */
/* 'MARLOBasicSafetyLimits2:282' 		160.000000;  */
/* 'MARLOBasicSafetyLimits2:283' 		160.000000;  */
/* 'MARLOBasicSafetyLimits2:284' 		... %<"\% q2"> */
/* 'MARLOBasicSafetyLimits2:285' 		200.000000;  */
/* 'MARLOBasicSafetyLimits2:286' 		200.000000;  */
/* 'MARLOBasicSafetyLimits2:287' 		... %<"\% qLA"> */
/* 'MARLOBasicSafetyLimits2:288' 		180.000000;  */
/* 'MARLOBasicSafetyLimits2:289' 		180.000000;  */
/* 'MARLOBasicSafetyLimits2:290' 		... %<"\% qKA"> */
/* 'MARLOBasicSafetyLimits2:291' 		30.000000;  */
/* 'MARLOBasicSafetyLimits2:292' 		30.000000;  */
/* 'MARLOBasicSafetyLimits2:293' 		... %<"\% qgr1"> */
/* 'MARLOBasicSafetyLimits2:294' 		160.000000;  */
/* 'MARLOBasicSafetyLimits2:295' 		160.000000;  */
/* 'MARLOBasicSafetyLimits2:296' 		... %<"\% qgr2"> */
/* 'MARLOBasicSafetyLimits2:297' 		200.000000;  */
/* 'MARLOBasicSafetyLimits2:298' 		200.000000;  */
/* 'MARLOBasicSafetyLimits2:299' 		... %<"\% qgrLA"> */
/* 'MARLOBasicSafetyLimits2:300' 		180.000000;  */
/* 'MARLOBasicSafetyLimits2:301' 		180.000000;  */
/* 'MARLOBasicSafetyLimits2:302' 		... %<"\% qgrKA"> */
/* 'MARLOBasicSafetyLimits2:303' 		30.000000;  */
/* 'MARLOBasicSafetyLimits2:304' 		30.000000;  */
/* 'MARLOBasicSafetyLimits2:305' 		... %<"\% qsp1"> */
/* 'MARLOBasicSafetyLimits2:306' 		-1.000000;  */
/* 'MARLOBasicSafetyLimits2:307' 		-1.000000;  */
/* 'MARLOBasicSafetyLimits2:308' 		... %<"\% qsp2"> */
/* 'MARLOBasicSafetyLimits2:309' 		-2.000000;  */
/* 'MARLOBasicSafetyLimits2:310' 		-2.000000;  */
/* 'MARLOBasicSafetyLimits2:311' 		... %<"\% qspLA"> */
/* 'MARLOBasicSafetyLimits2:312' 		-1.000000;  */
/* 'MARLOBasicSafetyLimits2:313' 		-1.000000;  */
/* 'MARLOBasicSafetyLimits2:314' 		... %<"\% qspKA"> */
/* 'MARLOBasicSafetyLimits2:315' 		-2.000000;  */
/* 'MARLOBasicSafetyLimits2:316' 		-2.000000;  */
/* 'MARLOBasicSafetyLimits2:317' 		... %<"\% q3"> */
/* 'MARLOBasicSafetyLimits2:318' 		-20.000000;  */
/* 'MARLOBasicSafetyLimits2:319' 		-20.000000;  */
/* 'MARLOBasicSafetyLimits2:320' 		... %<"\% qDLA"> */
/* 'MARLOBasicSafetyLimits2:321' 		-25.000000;  */
/* 'MARLOBasicSafetyLimits2:322' 		... %<"\% q3RL"> */
/* 'MARLOBasicSafetyLimits2:323' 		-25.000000;  */
/* 'MARLOBasicSafetyLimits2:324' 		... %<"\% qxT"> */
/* 'MARLOBasicSafetyLimits2:325' 		-20.000000;  */
/* 'MARLOBasicSafetyLimits2:326' 		... %<"\% qyT"> */
/* 'MARLOBasicSafetyLimits2:327' 		-10.000000;  */
/* 'MARLOBasicSafetyLimits2:328' 		... %<"\% theta"> */
/* 'MARLOBasicSafetyLimits2:329' 		160.000000;  */
/* 'MARLOBasicSafetyLimits2:330' 		160.000000;  */
/* 'MARLOBasicSafetyLimits2:331' 		... %<"\% thetagr"> */
/* 'MARLOBasicSafetyLimits2:332' 		160.000000;  */
/* 'MARLOBasicSafetyLimits2:333' 		160.000000;  */
/* 'MARLOBasicSafetyLimits2:334' 	]; */
/*  %<"\% maximum q at full positive velocity (dqmax)"> */
/*  %<"\% q1"> */
/*  %<"\% q2"> */
/*  %<"\% qLA"> */
/*  %<"\% qKA"> */
/*  %<"\% qgr1"> */
/*  %<"\% qgr2"> */
/*  %<"\% qgrLA"> */
/*  %<"\% qgrKA"> */
/*  %<"\% qsp1"> */
/*  %<"\% qsp2"> */
/*  %<"\% qspLA"> */
/*  %<"\% qspKA"> */
/*  %<"\% q3"> */
/*  %<"\% qDLA"> */
/*  %<"\% q3RL"> */
/*  %<"\% qxT"> */
/*  %<"\% qyT"> */
/*  %<"\% theta"> */
/*  %<"\% thetagr"> */
/* 'MARLOBasicSafetyLimits2:335' qmaxv = [... %<"\% maximum q at full positive velocity (dqmax)"> */
/* 'MARLOBasicSafetyLimits2:336' 		... %<"\% q1"> */
/* 'MARLOBasicSafetyLimits2:337' 		180.000000;  */
/* 'MARLOBasicSafetyLimits2:338' 		180.000000;  */
/* 'MARLOBasicSafetyLimits2:339' 		... %<"\% q2"> */
/* 'MARLOBasicSafetyLimits2:340' 		220.000000;  */
/* 'MARLOBasicSafetyLimits2:341' 		220.000000;  */
/* 'MARLOBasicSafetyLimits2:342' 		... %<"\% qLA"> */
/* 'MARLOBasicSafetyLimits2:343' 		180.000000;  */
/* 'MARLOBasicSafetyLimits2:344' 		180.000000;  */
/* 'MARLOBasicSafetyLimits2:345' 		... %<"\% qKA"> */
/* 'MARLOBasicSafetyLimits2:346' 		60.000000;  */
/* 'MARLOBasicSafetyLimits2:347' 		60.000000;  */
/* 'MARLOBasicSafetyLimits2:348' 		... %<"\% qgr1"> */
/* 'MARLOBasicSafetyLimits2:349' 		180.000000;  */
/* 'MARLOBasicSafetyLimits2:350' 		180.000000;  */
/* 'MARLOBasicSafetyLimits2:351' 		... %<"\% qgr2"> */
/* 'MARLOBasicSafetyLimits2:352' 		220.000000;  */
/* 'MARLOBasicSafetyLimits2:353' 		220.000000;  */
/* 'MARLOBasicSafetyLimits2:354' 		... %<"\% qgrLA"> */
/* 'MARLOBasicSafetyLimits2:355' 		180.000000;  */
/* 'MARLOBasicSafetyLimits2:356' 		180.000000;  */
/* 'MARLOBasicSafetyLimits2:357' 		... %<"\% qgrKA"> */
/* 'MARLOBasicSafetyLimits2:358' 		60.000000;  */
/* 'MARLOBasicSafetyLimits2:359' 		60.000000;  */
/* 'MARLOBasicSafetyLimits2:360' 		... %<"\% qsp1"> */
/* 'MARLOBasicSafetyLimits2:361' 		3.000000;  */
/* 'MARLOBasicSafetyLimits2:362' 		3.000000;  */
/* 'MARLOBasicSafetyLimits2:363' 		... %<"\% qsp2"> */
/* 'MARLOBasicSafetyLimits2:364' 		1.000000;  */
/* 'MARLOBasicSafetyLimits2:365' 		1.000000;  */
/* 'MARLOBasicSafetyLimits2:366' 		... %<"\% qspLA"> */
/* 'MARLOBasicSafetyLimits2:367' 		1.000000;  */
/* 'MARLOBasicSafetyLimits2:368' 		1.000000;  */
/* 'MARLOBasicSafetyLimits2:369' 		... %<"\% qspKA"> */
/* 'MARLOBasicSafetyLimits2:370' 		1.000000;  */
/* 'MARLOBasicSafetyLimits2:371' 		1.000000;  */
/* 'MARLOBasicSafetyLimits2:372' 		... %<"\% q3"> */
/* 'MARLOBasicSafetyLimits2:373' 		15.000000;  */
/* 'MARLOBasicSafetyLimits2:374' 		15.000000;  */
/* 'MARLOBasicSafetyLimits2:375' 		... %<"\% qDLA"> */
/* 'MARLOBasicSafetyLimits2:376' 		25.000000;  */
/* 'MARLOBasicSafetyLimits2:377' 		... %<"\% q3RL"> */
/* 'MARLOBasicSafetyLimits2:378' 		30.000000;  */
/* 'MARLOBasicSafetyLimits2:379' 		... %<"\% qxT"> */
/* 'MARLOBasicSafetyLimits2:380' 		0.000000;  */
/* 'MARLOBasicSafetyLimits2:381' 		... %<"\% qyT"> */
/* 'MARLOBasicSafetyLimits2:382' 		10.000000;  */
/* 'MARLOBasicSafetyLimits2:383' 		... %<"\% theta"> */
/* 'MARLOBasicSafetyLimits2:384' 		200.000000;  */
/* 'MARLOBasicSafetyLimits2:385' 		200.000000;  */
/* 'MARLOBasicSafetyLimits2:386' 		... %<"\% thetagr"> */
/* 'MARLOBasicSafetyLimits2:387' 		200.000000;  */
/* 'MARLOBasicSafetyLimits2:388' 		200.000000;  */
/* 'MARLOBasicSafetyLimits2:389' 	]; */
/*  Check limits */
/* 'MARLOBasicSafetyLimits2:392' qbar = T * q * 180/pi; */
/* 'MARLOBasicSafetyLimits2:393' dqbar = T * dq * 180/pi; */
/* 'MARLOBasicSafetyLimits2:394' violation = (qbar < qmin) | (qbar > qmax) ... */
/* 'MARLOBasicSafetyLimits2:395' 		 | (dqbar < dqmin) | (dqbar > dqmax) ... */
/* 'MARLOBasicSafetyLimits2:396' 		 | dqbar .* (qminv - qmin) < dqmin .* (qbar - qmin) ... */
/* 'MARLOBasicSafetyLimits2:397' 		 | dqbar .* (qmax - qmaxv) > dqmax .* (qmax - qbar); */
for (i = 0; i < 34; i++) {
    a_0[i] = 0.0;
    for (i_0 = 0; i_0 < 13; i_0++) {
        a_0[i] += a[34 * i_0 + i] * q[i_0];
    }
    qbar[i] = a_0[i] * 180.0 / 3.1415926535897931;
    a_1[i] = 0.0;
    for (i_0 = 0; i_0 < 13; i_0++) {
        a_1[i] += a[34 * i_0 + i] * dq[i_0];
    }
    dqbar[i] = a_1[i] * 180.0 / 3.1415926535897931;
    violation[i] = ((qbar[i] < qmin[i]) || (qbar[i] > qmax[i]) || (dqbar[i] < dqmin[i]) || (dqbar[i] > dqmax[i]) || (dqbar[i] * (real_T)c[i] < (qbar[i] - (real_T)qmin[i]) * (real_T)dqmin[i]) || (dqbar[i] * (real_T)b[i] > ((real_T)qmax[i] - qbar[i]) * (real_T)dqmax[i]));
}
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static void Walking_MARLOBasicSafetyLimits2(\
%assign comma = ""
%<comma>const real_T q[13]\
%assign comma = ", "
%<comma>const real_T dq[13]\
%assign comma = ", "
%<comma>boolean_T violation[34]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 67, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_any_Fcn68(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
boolean_T y;
int32_T k;
boolean_T exitg1;
y = false;
k = 0;
exitg1 = false;
while ((!exitg1) && (k < 6)) {
    if (!(x[k] == 0)) {
        y = true;
        exitg1 = true;
    } else {
        k++;
    }
}
return y;
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static boolean_T Walking01_withElmos_any(\
%assign comma = ""
%<comma>const boolean_T x[6]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 68, fcnProtoType)>
%return fcnBuff
%endfunction

%function Walking01_withElmos_norm_Fcn69(block) void
%assign fcnBuff = ""
%openfile fcnBuff
%assign cfgTxt = ""
%openfile cfgTxt
real_T y;
real_T scale;
real_T absxk;
real_T t;
scale = 2.2250738585072014E-308;
absxk = fabs(x[0]);
if (absxk > 2.2250738585072014E-308) {
    y = 1.0;
    scale = absxk;
} else {
    t = absxk / 2.2250738585072014E-308;
    y = t * t;
}
absxk = fabs(x[1]);
if (absxk > scale) {
    t = scale / absxk;
    y = y * t * t + 1.0;
    scale = absxk;
} else {
    t = absxk / scale;
    y += t * t;
}
absxk = fabs(x[2]);
if (absxk > scale) {
    t = scale / absxk;
    y = y * t * t + 1.0;
    scale = absxk;
} else {
    t = absxk / scale;
    y += t * t;
}
return scale * sqrt(y);
%closefile cfgTxt
%<cfgTxt>
%closefile fcnBuff
%assign fcnProtoType = ""
%openfile fcnProtoType
static real_T Walking01_withElmos_norm(\
%assign comma = ""
%<comma>const real_T x[3]\
%assign comma = ", "
%closefile fcnProtoType
%<SLibCG_SetFcnProtoType(9, 69, fcnProtoType)>
%return fcnBuff
%endfunction

